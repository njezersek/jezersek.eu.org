


<!DOCTYPE html>
<html>
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# githubog: http://ogp.me/ns/fb/githubog#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>threejs-examples/lib/Three_r49.js at master · yomotsu/threejs-examples · GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png" />
    <link rel="logo" type="image/svg" href="https://github-media-downloads.s3.amazonaws.com/github-logo.svg" />
    <meta property="og:image" content="https://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png">
    <meta name="hostname" content="github-fe134-cp1-prd.iad.github.net">
    <meta name="ruby" content="ruby 1.9.3p194-tcs-github-tcmalloc (2012-05-25, TCS patched 2012-05-27, GitHub v1.0.36) [x86_64-linux]">
    <link rel="assets" href="https://github.global.ssl.fastly.net/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035/">
    <link rel="xhr-socket" href="/_sockets" />
    


    <meta name="msapplication-TileImage" content="/windows-tile.png" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="selected-link" value="repo_source" data-pjax-transient />
    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="github" name="octolytics-app-id" /><meta content="1F0FB898:56EE:1C2C7FE:5247F89F" name="octolytics-dimension-request_id" />
    

    
    
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <meta content="authenticity_token" name="csrf-param" />
<meta content="d9Lck/QCCy213cN9wn0n0RBQXCIAtg5N4lde673cr6E=" name="csrf-token" />

    <link href="https://github.global.ssl.fastly.net/assets/github-4288f026700410ae032b5d324dea2b4571789d7c.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://github.global.ssl.fastly.net/assets/github2-61cd86e2b320f98354524f6a926105d8cd397d38.css" media="all" rel="stylesheet" type="text/css" />
    

    

      <script src="https://github.global.ssl.fastly.net/assets/frameworks-4e5aeedcc7a86dcff8294cb84644a333b46202a2.js" type="text/javascript"></script>
      <script src="https://github.global.ssl.fastly.net/assets/github-0c6e6b57b385c52ea52784f1accc11d4e71e1c62.js" type="text/javascript"></script>
      
      <meta http-equiv="x-pjax-version" content="96f9fc563a252f0e00cacb6106b88ea9">

        <link data-pjax-transient rel='permalink' href='/yomotsu/threejs-examples/blob/99d5ef2d9948d2f36707124e544e6db51abd2942/lib/Three_r49.js'>
  <meta property="og:title" content="threejs-examples"/>
  <meta property="og:type" content="githubog:gitrepository"/>
  <meta property="og:url" content="https://github.com/yomotsu/threejs-examples"/>
  <meta property="og:image" content="https://github.global.ssl.fastly.net/images/gravatars/gravatar-user-420.png"/>
  <meta property="og:site_name" content="GitHub"/>
  <meta property="og:description" content="Contribute to threejs-examples development by creating an account on GitHub."/>

  <meta name="description" content="Contribute to threejs-examples development by creating an account on GitHub." />

  <meta content="212837" name="octolytics-dimension-user_id" /><meta content="yomotsu" name="octolytics-dimension-user_login" /><meta content="4857721" name="octolytics-dimension-repository_id" /><meta content="yomotsu/threejs-examples" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="4857721" name="octolytics-dimension-repository_network_root_id" /><meta content="yomotsu/threejs-examples" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/yomotsu/threejs-examples/commits/master.atom" rel="alternate" title="Recent Commits to threejs-examples:master" type="application/atom+xml" />

  </head>


  <body class="logged_out  env-production windows vis-public  page-blob">
    <div class="wrapper">
      
      
      


      
      <div class="header header-logged-out">
  <div class="container clearfix">

    <a class="header-logo-wordmark" href="https://github.com/">
      <span class="mega-octicon octicon-logo-github"></span>
    </a>

    <div class="header-actions">
        <a class="button primary" href="/signup">Sign up</a>
      <a class="button signin" href="/login?return_to=%2Fyomotsu%2Fthreejs-examples%2Fblob%2Fmaster%2Flib%2FThree_r49.js">Sign in</a>
    </div>

    <div class="command-bar js-command-bar  in-repository">

      <ul class="top-nav">
          <li class="explore"><a href="/explore">Explore</a></li>
        <li class="features"><a href="/features">Features</a></li>
          <li class="enterprise"><a href="https://enterprise.github.com/">Enterprise</a></li>
          <li class="blog"><a href="/blog">Blog</a></li>
      </ul>
        <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">

<input type="text" data-hotkey="/ s" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" autocapitalize="off"
    
    
      data-repo="yomotsu/threejs-examples"
      data-branch="master"
      data-sha="97da0c728f2471731fae195d29daa94298c34e9b"
  >

    <input type="hidden" name="nwo" value="yomotsu/threejs-examples" />

    <div class="select-menu js-menu-container js-select-menu search-context-select-menu">
      <span class="minibutton select-menu-button js-menu-target">
        <span class="js-select-button">This repository</span>
      </span>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container">
        <div class="select-menu-modal">

          <div class="select-menu-item js-navigation-item js-this-repository-navigation-item selected">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" class="js-search-this-repository" name="search_target" value="repository" checked="checked" />
            <div class="select-menu-item-text js-select-button-text">This repository</div>
          </div> <!-- /.select-menu-item -->

          <div class="select-menu-item js-navigation-item js-all-repositories-navigation-item">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" name="search_target" value="global" />
            <div class="select-menu-item-text js-select-button-text">All repositories</div>
          </div> <!-- /.select-menu-item -->

        </div>
      </div>
    </div>

  <span class="octicon help tooltipped downwards" title="Show command bar help">
    <span class="octicon octicon-question"></span>
  </span>


  <input type="hidden" name="ref" value="cmdform">

</form>
    </div>

  </div>
</div>


      


          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        

<ul class="pagehead-actions">


  <li>
  <a href="/login?return_to=%2Fyomotsu%2Fthreejs-examples"
  class="minibutton with-count js-toggler-target star-button entice tooltipped upwards"
  title="You must be signed in to use this feature" rel="nofollow">
  <span class="octicon octicon-star"></span>Star
</a>
<a class="social-count js-social-count" href="/yomotsu/threejs-examples/stargazers">
  35
</a>

  </li>

    <li>
      <a href="/login?return_to=%2Fyomotsu%2Fthreejs-examples"
        class="minibutton with-count js-toggler-target fork-button entice tooltipped upwards"
        title="You must be signed in to fork a repository" rel="nofollow">
        <span class="octicon octicon-git-branch"></span>Fork
      </a>
      <a href="/yomotsu/threejs-examples/network" class="social-count">
        1
      </a>
    </li>
</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="repo-label"><span>public</span></span>
          <span class="mega-octicon octicon-repo"></span>
          <span class="author">
            <a href="/yomotsu" class="url fn" itemprop="url" rel="author"><span itemprop="title">yomotsu</span></a></span
          ><span class="repohead-name-divider">/</span><strong
          ><a href="/yomotsu/threejs-examples" class="js-current-repository js-repo-home-link">threejs-examples</a></strong>

          <span class="page-context-loader">
            <img alt="Octocat-spinner-32" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">

      <div class="repository-with-sidebar repo-container ">

        <div class="repository-sidebar">
            

<div class="repo-nav repo-nav-full js-repository-container-pjax js-octicon-loaders">
  <div class="repo-nav-contents">
    <ul class="repo-menu">
      <li class="tooltipped leftwards" title="Code">
        <a href="/yomotsu/threejs-examples" aria-label="Code" class="js-selected-navigation-item selected" data-gotokey="c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_tags repo_branches /yomotsu/threejs-examples">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped leftwards" title="Issues">
          <a href="/yomotsu/threejs-examples/issues" aria-label="Issues" class="js-selected-navigation-item js-disable-pjax" data-gotokey="i" data-selected-links="repo_issues /yomotsu/threejs-examples/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class='counter'>0</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped leftwards" title="Pull Requests"><a href="/yomotsu/threejs-examples/pulls" aria-label="Pull Requests" class="js-selected-navigation-item js-disable-pjax" data-gotokey="p" data-selected-links="repo_pulls /yomotsu/threejs-examples/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class='counter'>0</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


    </ul>
    <div class="repo-menu-separator"></div>
    <ul class="repo-menu">

      <li class="tooltipped leftwards" title="Pulse">
        <a href="/yomotsu/threejs-examples/pulse" aria-label="Pulse" class="js-selected-navigation-item " data-pjax="true" data-selected-links="pulse /yomotsu/threejs-examples/pulse">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped leftwards" title="Graphs">
        <a href="/yomotsu/threejs-examples/graphs" aria-label="Graphs" class="js-selected-navigation-item " data-pjax="true" data-selected-links="repo_graphs repo_contributors /yomotsu/threejs-examples/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped leftwards" title="Network">
        <a href="/yomotsu/threejs-examples/network" aria-label="Network" class="js-selected-navigation-item js-disable-pjax" data-selected-links="repo_network /yomotsu/threejs-examples/network">
          <span class="octicon octicon-git-branch"></span> <span class="full-word">Network</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

            <div class="only-with-full-nav">
              

  

<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><strong>HTTPS</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/yomotsu/threejs-examples.git" readonly="readonly">

    <span class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="https://github.com/yomotsu/threejs-examples.git" data-copied-hint="copied!" title="copy to clipboard"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><strong>Subversion</strong> checkout URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/yomotsu/threejs-examples" readonly="readonly">

    <span class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="https://github.com/yomotsu/threejs-examples" data-copied-hint="copied!" title="copy to clipboard"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>,
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <span class="octicon help tooltipped upwards" title="Get help on which URL is right for you.">
    <a href="https://help.github.com/articles/which-remote-url-should-i-use">
    <span class="octicon octicon-question"></span>
    </a>
  </span>
</p>


  <a href="http://windows.github.com" class="minibutton sidebar-button">
    <span class="octicon octicon-device-desktop"></span>
    Clone in Desktop
  </a>

              <a href="/yomotsu/threejs-examples/archive/master.zip"
                 class="minibutton sidebar-button"
                 title="Download this repository as a zip file"
                 rel="nofollow">
                <span class="octicon octicon-cloud-download"></span>
                Download ZIP
              </a>
            </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          


<!-- blob contrib key: blob_contributors:v21:4e575c0c322db2585766e94fc7f8fbe4 -->

<p title="This is a placeholder element" class="js-history-link-replace hidden"></p>

<a href="/yomotsu/threejs-examples/find/master" data-pjax data-hotkey="t" class="js-show-file-finder" style="display:none">Show File Finder</a>

<div class="file-navigation">
  


<div class="select-menu js-menu-container js-select-menu" >
  <span class="minibutton select-menu-button js-menu-target" data-hotkey="w"
    data-master-branch="master"
    data-ref="master"
    role="button" aria-label="Switch branches or tags" tabindex="0">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax>

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-remove-close js-menu-close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/yomotsu/threejs-examples/blob/gh-pages/lib/Three_r49.js"
                 data-name="gh-pages"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="gh-pages">gh-pages</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/yomotsu/threejs-examples/blob/master/lib/Three_r49.js"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="master">master</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

  <div class="breadcrumb">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/yomotsu/threejs-examples" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">threejs-examples</span></a></span></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/yomotsu/threejs-examples/tree/master/lib" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">lib</span></a></span><span class="separator"> / </span><strong class="final-path">Three_r49.js</strong> <span class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="lib/Three_r49.js" data-copied-hint="copied!" title="copy to clipboard"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>


  <div class="commit commit-loader file-history-tease js-deferred-content" data-url="/yomotsu/threejs-examples/contributors/master/lib/Three_r49.js">
    Fetching contributors…

    <div class="participation">
      <p class="loader-loading"><img alt="Octocat-spinner-32-eaf2f5" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" /></p>
      <p class="loader-error">Cannot retrieve contributors at this time</p>
    </div>
  </div>

<div id="files" class="bubble">
  <div class="file">
    <div class="meta">
      <div class="info">
        <span class="icon"><b class="octicon octicon-file-text"></b></span>
        <span class="mode" title="File Mode">file</span>
          <span>730 lines (729 sloc)</span>
        <span>364.25 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
              <a class="minibutton disabled js-entice" href=""
                 data-entice="You must be signed in to make or propose changes">Edit</a>
          <a href="/yomotsu/threejs-examples/raw/master/lib/Three_r49.js" class="button minibutton " id="raw-url">Raw</a>
            <a href="/yomotsu/threejs-examples/blame/master/lib/Three_r49.js" class="button minibutton ">Blame</a>
          <a href="/yomotsu/threejs-examples/commits/master/lib/Three_r49.js" class="button minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->
            <a class="minibutton danger empty-icon js-entice" href=""
               data-entice="You must be signed in and on a branch to make or propose changes">
            Delete
          </a>
      </div><!-- /.actions -->

    </div>
        <div class="blob-wrapper data type-javascript js-blob-data">
        <table class="file-code file-diff">
          <tr class="file-code-line">
            <td class="blob-line-nums">
              <span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>
<span id="L5" rel="#L5">5</span>
<span id="L6" rel="#L6">6</span>
<span id="L7" rel="#L7">7</span>
<span id="L8" rel="#L8">8</span>
<span id="L9" rel="#L9">9</span>
<span id="L10" rel="#L10">10</span>
<span id="L11" rel="#L11">11</span>
<span id="L12" rel="#L12">12</span>
<span id="L13" rel="#L13">13</span>
<span id="L14" rel="#L14">14</span>
<span id="L15" rel="#L15">15</span>
<span id="L16" rel="#L16">16</span>
<span id="L17" rel="#L17">17</span>
<span id="L18" rel="#L18">18</span>
<span id="L19" rel="#L19">19</span>
<span id="L20" rel="#L20">20</span>
<span id="L21" rel="#L21">21</span>
<span id="L22" rel="#L22">22</span>
<span id="L23" rel="#L23">23</span>
<span id="L24" rel="#L24">24</span>
<span id="L25" rel="#L25">25</span>
<span id="L26" rel="#L26">26</span>
<span id="L27" rel="#L27">27</span>
<span id="L28" rel="#L28">28</span>
<span id="L29" rel="#L29">29</span>
<span id="L30" rel="#L30">30</span>
<span id="L31" rel="#L31">31</span>
<span id="L32" rel="#L32">32</span>
<span id="L33" rel="#L33">33</span>
<span id="L34" rel="#L34">34</span>
<span id="L35" rel="#L35">35</span>
<span id="L36" rel="#L36">36</span>
<span id="L37" rel="#L37">37</span>
<span id="L38" rel="#L38">38</span>
<span id="L39" rel="#L39">39</span>
<span id="L40" rel="#L40">40</span>
<span id="L41" rel="#L41">41</span>
<span id="L42" rel="#L42">42</span>
<span id="L43" rel="#L43">43</span>
<span id="L44" rel="#L44">44</span>
<span id="L45" rel="#L45">45</span>
<span id="L46" rel="#L46">46</span>
<span id="L47" rel="#L47">47</span>
<span id="L48" rel="#L48">48</span>
<span id="L49" rel="#L49">49</span>
<span id="L50" rel="#L50">50</span>
<span id="L51" rel="#L51">51</span>
<span id="L52" rel="#L52">52</span>
<span id="L53" rel="#L53">53</span>
<span id="L54" rel="#L54">54</span>
<span id="L55" rel="#L55">55</span>
<span id="L56" rel="#L56">56</span>
<span id="L57" rel="#L57">57</span>
<span id="L58" rel="#L58">58</span>
<span id="L59" rel="#L59">59</span>
<span id="L60" rel="#L60">60</span>
<span id="L61" rel="#L61">61</span>
<span id="L62" rel="#L62">62</span>
<span id="L63" rel="#L63">63</span>
<span id="L64" rel="#L64">64</span>
<span id="L65" rel="#L65">65</span>
<span id="L66" rel="#L66">66</span>
<span id="L67" rel="#L67">67</span>
<span id="L68" rel="#L68">68</span>
<span id="L69" rel="#L69">69</span>
<span id="L70" rel="#L70">70</span>
<span id="L71" rel="#L71">71</span>
<span id="L72" rel="#L72">72</span>
<span id="L73" rel="#L73">73</span>
<span id="L74" rel="#L74">74</span>
<span id="L75" rel="#L75">75</span>
<span id="L76" rel="#L76">76</span>
<span id="L77" rel="#L77">77</span>
<span id="L78" rel="#L78">78</span>
<span id="L79" rel="#L79">79</span>
<span id="L80" rel="#L80">80</span>
<span id="L81" rel="#L81">81</span>
<span id="L82" rel="#L82">82</span>
<span id="L83" rel="#L83">83</span>
<span id="L84" rel="#L84">84</span>
<span id="L85" rel="#L85">85</span>
<span id="L86" rel="#L86">86</span>
<span id="L87" rel="#L87">87</span>
<span id="L88" rel="#L88">88</span>
<span id="L89" rel="#L89">89</span>
<span id="L90" rel="#L90">90</span>
<span id="L91" rel="#L91">91</span>
<span id="L92" rel="#L92">92</span>
<span id="L93" rel="#L93">93</span>
<span id="L94" rel="#L94">94</span>
<span id="L95" rel="#L95">95</span>
<span id="L96" rel="#L96">96</span>
<span id="L97" rel="#L97">97</span>
<span id="L98" rel="#L98">98</span>
<span id="L99" rel="#L99">99</span>
<span id="L100" rel="#L100">100</span>
<span id="L101" rel="#L101">101</span>
<span id="L102" rel="#L102">102</span>
<span id="L103" rel="#L103">103</span>
<span id="L104" rel="#L104">104</span>
<span id="L105" rel="#L105">105</span>
<span id="L106" rel="#L106">106</span>
<span id="L107" rel="#L107">107</span>
<span id="L108" rel="#L108">108</span>
<span id="L109" rel="#L109">109</span>
<span id="L110" rel="#L110">110</span>
<span id="L111" rel="#L111">111</span>
<span id="L112" rel="#L112">112</span>
<span id="L113" rel="#L113">113</span>
<span id="L114" rel="#L114">114</span>
<span id="L115" rel="#L115">115</span>
<span id="L116" rel="#L116">116</span>
<span id="L117" rel="#L117">117</span>
<span id="L118" rel="#L118">118</span>
<span id="L119" rel="#L119">119</span>
<span id="L120" rel="#L120">120</span>
<span id="L121" rel="#L121">121</span>
<span id="L122" rel="#L122">122</span>
<span id="L123" rel="#L123">123</span>
<span id="L124" rel="#L124">124</span>
<span id="L125" rel="#L125">125</span>
<span id="L126" rel="#L126">126</span>
<span id="L127" rel="#L127">127</span>
<span id="L128" rel="#L128">128</span>
<span id="L129" rel="#L129">129</span>
<span id="L130" rel="#L130">130</span>
<span id="L131" rel="#L131">131</span>
<span id="L132" rel="#L132">132</span>
<span id="L133" rel="#L133">133</span>
<span id="L134" rel="#L134">134</span>
<span id="L135" rel="#L135">135</span>
<span id="L136" rel="#L136">136</span>
<span id="L137" rel="#L137">137</span>
<span id="L138" rel="#L138">138</span>
<span id="L139" rel="#L139">139</span>
<span id="L140" rel="#L140">140</span>
<span id="L141" rel="#L141">141</span>
<span id="L142" rel="#L142">142</span>
<span id="L143" rel="#L143">143</span>
<span id="L144" rel="#L144">144</span>
<span id="L145" rel="#L145">145</span>
<span id="L146" rel="#L146">146</span>
<span id="L147" rel="#L147">147</span>
<span id="L148" rel="#L148">148</span>
<span id="L149" rel="#L149">149</span>
<span id="L150" rel="#L150">150</span>
<span id="L151" rel="#L151">151</span>
<span id="L152" rel="#L152">152</span>
<span id="L153" rel="#L153">153</span>
<span id="L154" rel="#L154">154</span>
<span id="L155" rel="#L155">155</span>
<span id="L156" rel="#L156">156</span>
<span id="L157" rel="#L157">157</span>
<span id="L158" rel="#L158">158</span>
<span id="L159" rel="#L159">159</span>
<span id="L160" rel="#L160">160</span>
<span id="L161" rel="#L161">161</span>
<span id="L162" rel="#L162">162</span>
<span id="L163" rel="#L163">163</span>
<span id="L164" rel="#L164">164</span>
<span id="L165" rel="#L165">165</span>
<span id="L166" rel="#L166">166</span>
<span id="L167" rel="#L167">167</span>
<span id="L168" rel="#L168">168</span>
<span id="L169" rel="#L169">169</span>
<span id="L170" rel="#L170">170</span>
<span id="L171" rel="#L171">171</span>
<span id="L172" rel="#L172">172</span>
<span id="L173" rel="#L173">173</span>
<span id="L174" rel="#L174">174</span>
<span id="L175" rel="#L175">175</span>
<span id="L176" rel="#L176">176</span>
<span id="L177" rel="#L177">177</span>
<span id="L178" rel="#L178">178</span>
<span id="L179" rel="#L179">179</span>
<span id="L180" rel="#L180">180</span>
<span id="L181" rel="#L181">181</span>
<span id="L182" rel="#L182">182</span>
<span id="L183" rel="#L183">183</span>
<span id="L184" rel="#L184">184</span>
<span id="L185" rel="#L185">185</span>
<span id="L186" rel="#L186">186</span>
<span id="L187" rel="#L187">187</span>
<span id="L188" rel="#L188">188</span>
<span id="L189" rel="#L189">189</span>
<span id="L190" rel="#L190">190</span>
<span id="L191" rel="#L191">191</span>
<span id="L192" rel="#L192">192</span>
<span id="L193" rel="#L193">193</span>
<span id="L194" rel="#L194">194</span>
<span id="L195" rel="#L195">195</span>
<span id="L196" rel="#L196">196</span>
<span id="L197" rel="#L197">197</span>
<span id="L198" rel="#L198">198</span>
<span id="L199" rel="#L199">199</span>
<span id="L200" rel="#L200">200</span>
<span id="L201" rel="#L201">201</span>
<span id="L202" rel="#L202">202</span>
<span id="L203" rel="#L203">203</span>
<span id="L204" rel="#L204">204</span>
<span id="L205" rel="#L205">205</span>
<span id="L206" rel="#L206">206</span>
<span id="L207" rel="#L207">207</span>
<span id="L208" rel="#L208">208</span>
<span id="L209" rel="#L209">209</span>
<span id="L210" rel="#L210">210</span>
<span id="L211" rel="#L211">211</span>
<span id="L212" rel="#L212">212</span>
<span id="L213" rel="#L213">213</span>
<span id="L214" rel="#L214">214</span>
<span id="L215" rel="#L215">215</span>
<span id="L216" rel="#L216">216</span>
<span id="L217" rel="#L217">217</span>
<span id="L218" rel="#L218">218</span>
<span id="L219" rel="#L219">219</span>
<span id="L220" rel="#L220">220</span>
<span id="L221" rel="#L221">221</span>
<span id="L222" rel="#L222">222</span>
<span id="L223" rel="#L223">223</span>
<span id="L224" rel="#L224">224</span>
<span id="L225" rel="#L225">225</span>
<span id="L226" rel="#L226">226</span>
<span id="L227" rel="#L227">227</span>
<span id="L228" rel="#L228">228</span>
<span id="L229" rel="#L229">229</span>
<span id="L230" rel="#L230">230</span>
<span id="L231" rel="#L231">231</span>
<span id="L232" rel="#L232">232</span>
<span id="L233" rel="#L233">233</span>
<span id="L234" rel="#L234">234</span>
<span id="L235" rel="#L235">235</span>
<span id="L236" rel="#L236">236</span>
<span id="L237" rel="#L237">237</span>
<span id="L238" rel="#L238">238</span>
<span id="L239" rel="#L239">239</span>
<span id="L240" rel="#L240">240</span>
<span id="L241" rel="#L241">241</span>
<span id="L242" rel="#L242">242</span>
<span id="L243" rel="#L243">243</span>
<span id="L244" rel="#L244">244</span>
<span id="L245" rel="#L245">245</span>
<span id="L246" rel="#L246">246</span>
<span id="L247" rel="#L247">247</span>
<span id="L248" rel="#L248">248</span>
<span id="L249" rel="#L249">249</span>
<span id="L250" rel="#L250">250</span>
<span id="L251" rel="#L251">251</span>
<span id="L252" rel="#L252">252</span>
<span id="L253" rel="#L253">253</span>
<span id="L254" rel="#L254">254</span>
<span id="L255" rel="#L255">255</span>
<span id="L256" rel="#L256">256</span>
<span id="L257" rel="#L257">257</span>
<span id="L258" rel="#L258">258</span>
<span id="L259" rel="#L259">259</span>
<span id="L260" rel="#L260">260</span>
<span id="L261" rel="#L261">261</span>
<span id="L262" rel="#L262">262</span>
<span id="L263" rel="#L263">263</span>
<span id="L264" rel="#L264">264</span>
<span id="L265" rel="#L265">265</span>
<span id="L266" rel="#L266">266</span>
<span id="L267" rel="#L267">267</span>
<span id="L268" rel="#L268">268</span>
<span id="L269" rel="#L269">269</span>
<span id="L270" rel="#L270">270</span>
<span id="L271" rel="#L271">271</span>
<span id="L272" rel="#L272">272</span>
<span id="L273" rel="#L273">273</span>
<span id="L274" rel="#L274">274</span>
<span id="L275" rel="#L275">275</span>
<span id="L276" rel="#L276">276</span>
<span id="L277" rel="#L277">277</span>
<span id="L278" rel="#L278">278</span>
<span id="L279" rel="#L279">279</span>
<span id="L280" rel="#L280">280</span>
<span id="L281" rel="#L281">281</span>
<span id="L282" rel="#L282">282</span>
<span id="L283" rel="#L283">283</span>
<span id="L284" rel="#L284">284</span>
<span id="L285" rel="#L285">285</span>
<span id="L286" rel="#L286">286</span>
<span id="L287" rel="#L287">287</span>
<span id="L288" rel="#L288">288</span>
<span id="L289" rel="#L289">289</span>
<span id="L290" rel="#L290">290</span>
<span id="L291" rel="#L291">291</span>
<span id="L292" rel="#L292">292</span>
<span id="L293" rel="#L293">293</span>
<span id="L294" rel="#L294">294</span>
<span id="L295" rel="#L295">295</span>
<span id="L296" rel="#L296">296</span>
<span id="L297" rel="#L297">297</span>
<span id="L298" rel="#L298">298</span>
<span id="L299" rel="#L299">299</span>
<span id="L300" rel="#L300">300</span>
<span id="L301" rel="#L301">301</span>
<span id="L302" rel="#L302">302</span>
<span id="L303" rel="#L303">303</span>
<span id="L304" rel="#L304">304</span>
<span id="L305" rel="#L305">305</span>
<span id="L306" rel="#L306">306</span>
<span id="L307" rel="#L307">307</span>
<span id="L308" rel="#L308">308</span>
<span id="L309" rel="#L309">309</span>
<span id="L310" rel="#L310">310</span>
<span id="L311" rel="#L311">311</span>
<span id="L312" rel="#L312">312</span>
<span id="L313" rel="#L313">313</span>
<span id="L314" rel="#L314">314</span>
<span id="L315" rel="#L315">315</span>
<span id="L316" rel="#L316">316</span>
<span id="L317" rel="#L317">317</span>
<span id="L318" rel="#L318">318</span>
<span id="L319" rel="#L319">319</span>
<span id="L320" rel="#L320">320</span>
<span id="L321" rel="#L321">321</span>
<span id="L322" rel="#L322">322</span>
<span id="L323" rel="#L323">323</span>
<span id="L324" rel="#L324">324</span>
<span id="L325" rel="#L325">325</span>
<span id="L326" rel="#L326">326</span>
<span id="L327" rel="#L327">327</span>
<span id="L328" rel="#L328">328</span>
<span id="L329" rel="#L329">329</span>
<span id="L330" rel="#L330">330</span>
<span id="L331" rel="#L331">331</span>
<span id="L332" rel="#L332">332</span>
<span id="L333" rel="#L333">333</span>
<span id="L334" rel="#L334">334</span>
<span id="L335" rel="#L335">335</span>
<span id="L336" rel="#L336">336</span>
<span id="L337" rel="#L337">337</span>
<span id="L338" rel="#L338">338</span>
<span id="L339" rel="#L339">339</span>
<span id="L340" rel="#L340">340</span>
<span id="L341" rel="#L341">341</span>
<span id="L342" rel="#L342">342</span>
<span id="L343" rel="#L343">343</span>
<span id="L344" rel="#L344">344</span>
<span id="L345" rel="#L345">345</span>
<span id="L346" rel="#L346">346</span>
<span id="L347" rel="#L347">347</span>
<span id="L348" rel="#L348">348</span>
<span id="L349" rel="#L349">349</span>
<span id="L350" rel="#L350">350</span>
<span id="L351" rel="#L351">351</span>
<span id="L352" rel="#L352">352</span>
<span id="L353" rel="#L353">353</span>
<span id="L354" rel="#L354">354</span>
<span id="L355" rel="#L355">355</span>
<span id="L356" rel="#L356">356</span>
<span id="L357" rel="#L357">357</span>
<span id="L358" rel="#L358">358</span>
<span id="L359" rel="#L359">359</span>
<span id="L360" rel="#L360">360</span>
<span id="L361" rel="#L361">361</span>
<span id="L362" rel="#L362">362</span>
<span id="L363" rel="#L363">363</span>
<span id="L364" rel="#L364">364</span>
<span id="L365" rel="#L365">365</span>
<span id="L366" rel="#L366">366</span>
<span id="L367" rel="#L367">367</span>
<span id="L368" rel="#L368">368</span>
<span id="L369" rel="#L369">369</span>
<span id="L370" rel="#L370">370</span>
<span id="L371" rel="#L371">371</span>
<span id="L372" rel="#L372">372</span>
<span id="L373" rel="#L373">373</span>
<span id="L374" rel="#L374">374</span>
<span id="L375" rel="#L375">375</span>
<span id="L376" rel="#L376">376</span>
<span id="L377" rel="#L377">377</span>
<span id="L378" rel="#L378">378</span>
<span id="L379" rel="#L379">379</span>
<span id="L380" rel="#L380">380</span>
<span id="L381" rel="#L381">381</span>
<span id="L382" rel="#L382">382</span>
<span id="L383" rel="#L383">383</span>
<span id="L384" rel="#L384">384</span>
<span id="L385" rel="#L385">385</span>
<span id="L386" rel="#L386">386</span>
<span id="L387" rel="#L387">387</span>
<span id="L388" rel="#L388">388</span>
<span id="L389" rel="#L389">389</span>
<span id="L390" rel="#L390">390</span>
<span id="L391" rel="#L391">391</span>
<span id="L392" rel="#L392">392</span>
<span id="L393" rel="#L393">393</span>
<span id="L394" rel="#L394">394</span>
<span id="L395" rel="#L395">395</span>
<span id="L396" rel="#L396">396</span>
<span id="L397" rel="#L397">397</span>
<span id="L398" rel="#L398">398</span>
<span id="L399" rel="#L399">399</span>
<span id="L400" rel="#L400">400</span>
<span id="L401" rel="#L401">401</span>
<span id="L402" rel="#L402">402</span>
<span id="L403" rel="#L403">403</span>
<span id="L404" rel="#L404">404</span>
<span id="L405" rel="#L405">405</span>
<span id="L406" rel="#L406">406</span>
<span id="L407" rel="#L407">407</span>
<span id="L408" rel="#L408">408</span>
<span id="L409" rel="#L409">409</span>
<span id="L410" rel="#L410">410</span>
<span id="L411" rel="#L411">411</span>
<span id="L412" rel="#L412">412</span>
<span id="L413" rel="#L413">413</span>
<span id="L414" rel="#L414">414</span>
<span id="L415" rel="#L415">415</span>
<span id="L416" rel="#L416">416</span>
<span id="L417" rel="#L417">417</span>
<span id="L418" rel="#L418">418</span>
<span id="L419" rel="#L419">419</span>
<span id="L420" rel="#L420">420</span>
<span id="L421" rel="#L421">421</span>
<span id="L422" rel="#L422">422</span>
<span id="L423" rel="#L423">423</span>
<span id="L424" rel="#L424">424</span>
<span id="L425" rel="#L425">425</span>
<span id="L426" rel="#L426">426</span>
<span id="L427" rel="#L427">427</span>
<span id="L428" rel="#L428">428</span>
<span id="L429" rel="#L429">429</span>
<span id="L430" rel="#L430">430</span>
<span id="L431" rel="#L431">431</span>
<span id="L432" rel="#L432">432</span>
<span id="L433" rel="#L433">433</span>
<span id="L434" rel="#L434">434</span>
<span id="L435" rel="#L435">435</span>
<span id="L436" rel="#L436">436</span>
<span id="L437" rel="#L437">437</span>
<span id="L438" rel="#L438">438</span>
<span id="L439" rel="#L439">439</span>
<span id="L440" rel="#L440">440</span>
<span id="L441" rel="#L441">441</span>
<span id="L442" rel="#L442">442</span>
<span id="L443" rel="#L443">443</span>
<span id="L444" rel="#L444">444</span>
<span id="L445" rel="#L445">445</span>
<span id="L446" rel="#L446">446</span>
<span id="L447" rel="#L447">447</span>
<span id="L448" rel="#L448">448</span>
<span id="L449" rel="#L449">449</span>
<span id="L450" rel="#L450">450</span>
<span id="L451" rel="#L451">451</span>
<span id="L452" rel="#L452">452</span>
<span id="L453" rel="#L453">453</span>
<span id="L454" rel="#L454">454</span>
<span id="L455" rel="#L455">455</span>
<span id="L456" rel="#L456">456</span>
<span id="L457" rel="#L457">457</span>
<span id="L458" rel="#L458">458</span>
<span id="L459" rel="#L459">459</span>
<span id="L460" rel="#L460">460</span>
<span id="L461" rel="#L461">461</span>
<span id="L462" rel="#L462">462</span>
<span id="L463" rel="#L463">463</span>
<span id="L464" rel="#L464">464</span>
<span id="L465" rel="#L465">465</span>
<span id="L466" rel="#L466">466</span>
<span id="L467" rel="#L467">467</span>
<span id="L468" rel="#L468">468</span>
<span id="L469" rel="#L469">469</span>
<span id="L470" rel="#L470">470</span>
<span id="L471" rel="#L471">471</span>
<span id="L472" rel="#L472">472</span>
<span id="L473" rel="#L473">473</span>
<span id="L474" rel="#L474">474</span>
<span id="L475" rel="#L475">475</span>
<span id="L476" rel="#L476">476</span>
<span id="L477" rel="#L477">477</span>
<span id="L478" rel="#L478">478</span>
<span id="L479" rel="#L479">479</span>
<span id="L480" rel="#L480">480</span>
<span id="L481" rel="#L481">481</span>
<span id="L482" rel="#L482">482</span>
<span id="L483" rel="#L483">483</span>
<span id="L484" rel="#L484">484</span>
<span id="L485" rel="#L485">485</span>
<span id="L486" rel="#L486">486</span>
<span id="L487" rel="#L487">487</span>
<span id="L488" rel="#L488">488</span>
<span id="L489" rel="#L489">489</span>
<span id="L490" rel="#L490">490</span>
<span id="L491" rel="#L491">491</span>
<span id="L492" rel="#L492">492</span>
<span id="L493" rel="#L493">493</span>
<span id="L494" rel="#L494">494</span>
<span id="L495" rel="#L495">495</span>
<span id="L496" rel="#L496">496</span>
<span id="L497" rel="#L497">497</span>
<span id="L498" rel="#L498">498</span>
<span id="L499" rel="#L499">499</span>
<span id="L500" rel="#L500">500</span>
<span id="L501" rel="#L501">501</span>
<span id="L502" rel="#L502">502</span>
<span id="L503" rel="#L503">503</span>
<span id="L504" rel="#L504">504</span>
<span id="L505" rel="#L505">505</span>
<span id="L506" rel="#L506">506</span>
<span id="L507" rel="#L507">507</span>
<span id="L508" rel="#L508">508</span>
<span id="L509" rel="#L509">509</span>
<span id="L510" rel="#L510">510</span>
<span id="L511" rel="#L511">511</span>
<span id="L512" rel="#L512">512</span>
<span id="L513" rel="#L513">513</span>
<span id="L514" rel="#L514">514</span>
<span id="L515" rel="#L515">515</span>
<span id="L516" rel="#L516">516</span>
<span id="L517" rel="#L517">517</span>
<span id="L518" rel="#L518">518</span>
<span id="L519" rel="#L519">519</span>
<span id="L520" rel="#L520">520</span>
<span id="L521" rel="#L521">521</span>
<span id="L522" rel="#L522">522</span>
<span id="L523" rel="#L523">523</span>
<span id="L524" rel="#L524">524</span>
<span id="L525" rel="#L525">525</span>
<span id="L526" rel="#L526">526</span>
<span id="L527" rel="#L527">527</span>
<span id="L528" rel="#L528">528</span>
<span id="L529" rel="#L529">529</span>
<span id="L530" rel="#L530">530</span>
<span id="L531" rel="#L531">531</span>
<span id="L532" rel="#L532">532</span>
<span id="L533" rel="#L533">533</span>
<span id="L534" rel="#L534">534</span>
<span id="L535" rel="#L535">535</span>
<span id="L536" rel="#L536">536</span>
<span id="L537" rel="#L537">537</span>
<span id="L538" rel="#L538">538</span>
<span id="L539" rel="#L539">539</span>
<span id="L540" rel="#L540">540</span>
<span id="L541" rel="#L541">541</span>
<span id="L542" rel="#L542">542</span>
<span id="L543" rel="#L543">543</span>
<span id="L544" rel="#L544">544</span>
<span id="L545" rel="#L545">545</span>
<span id="L546" rel="#L546">546</span>
<span id="L547" rel="#L547">547</span>
<span id="L548" rel="#L548">548</span>
<span id="L549" rel="#L549">549</span>
<span id="L550" rel="#L550">550</span>
<span id="L551" rel="#L551">551</span>
<span id="L552" rel="#L552">552</span>
<span id="L553" rel="#L553">553</span>
<span id="L554" rel="#L554">554</span>
<span id="L555" rel="#L555">555</span>
<span id="L556" rel="#L556">556</span>
<span id="L557" rel="#L557">557</span>
<span id="L558" rel="#L558">558</span>
<span id="L559" rel="#L559">559</span>
<span id="L560" rel="#L560">560</span>
<span id="L561" rel="#L561">561</span>
<span id="L562" rel="#L562">562</span>
<span id="L563" rel="#L563">563</span>
<span id="L564" rel="#L564">564</span>
<span id="L565" rel="#L565">565</span>
<span id="L566" rel="#L566">566</span>
<span id="L567" rel="#L567">567</span>
<span id="L568" rel="#L568">568</span>
<span id="L569" rel="#L569">569</span>
<span id="L570" rel="#L570">570</span>
<span id="L571" rel="#L571">571</span>
<span id="L572" rel="#L572">572</span>
<span id="L573" rel="#L573">573</span>
<span id="L574" rel="#L574">574</span>
<span id="L575" rel="#L575">575</span>
<span id="L576" rel="#L576">576</span>
<span id="L577" rel="#L577">577</span>
<span id="L578" rel="#L578">578</span>
<span id="L579" rel="#L579">579</span>
<span id="L580" rel="#L580">580</span>
<span id="L581" rel="#L581">581</span>
<span id="L582" rel="#L582">582</span>
<span id="L583" rel="#L583">583</span>
<span id="L584" rel="#L584">584</span>
<span id="L585" rel="#L585">585</span>
<span id="L586" rel="#L586">586</span>
<span id="L587" rel="#L587">587</span>
<span id="L588" rel="#L588">588</span>
<span id="L589" rel="#L589">589</span>
<span id="L590" rel="#L590">590</span>
<span id="L591" rel="#L591">591</span>
<span id="L592" rel="#L592">592</span>
<span id="L593" rel="#L593">593</span>
<span id="L594" rel="#L594">594</span>
<span id="L595" rel="#L595">595</span>
<span id="L596" rel="#L596">596</span>
<span id="L597" rel="#L597">597</span>
<span id="L598" rel="#L598">598</span>
<span id="L599" rel="#L599">599</span>
<span id="L600" rel="#L600">600</span>
<span id="L601" rel="#L601">601</span>
<span id="L602" rel="#L602">602</span>
<span id="L603" rel="#L603">603</span>
<span id="L604" rel="#L604">604</span>
<span id="L605" rel="#L605">605</span>
<span id="L606" rel="#L606">606</span>
<span id="L607" rel="#L607">607</span>
<span id="L608" rel="#L608">608</span>
<span id="L609" rel="#L609">609</span>
<span id="L610" rel="#L610">610</span>
<span id="L611" rel="#L611">611</span>
<span id="L612" rel="#L612">612</span>
<span id="L613" rel="#L613">613</span>
<span id="L614" rel="#L614">614</span>
<span id="L615" rel="#L615">615</span>
<span id="L616" rel="#L616">616</span>
<span id="L617" rel="#L617">617</span>
<span id="L618" rel="#L618">618</span>
<span id="L619" rel="#L619">619</span>
<span id="L620" rel="#L620">620</span>
<span id="L621" rel="#L621">621</span>
<span id="L622" rel="#L622">622</span>
<span id="L623" rel="#L623">623</span>
<span id="L624" rel="#L624">624</span>
<span id="L625" rel="#L625">625</span>
<span id="L626" rel="#L626">626</span>
<span id="L627" rel="#L627">627</span>
<span id="L628" rel="#L628">628</span>
<span id="L629" rel="#L629">629</span>
<span id="L630" rel="#L630">630</span>
<span id="L631" rel="#L631">631</span>
<span id="L632" rel="#L632">632</span>
<span id="L633" rel="#L633">633</span>
<span id="L634" rel="#L634">634</span>
<span id="L635" rel="#L635">635</span>
<span id="L636" rel="#L636">636</span>
<span id="L637" rel="#L637">637</span>
<span id="L638" rel="#L638">638</span>
<span id="L639" rel="#L639">639</span>
<span id="L640" rel="#L640">640</span>
<span id="L641" rel="#L641">641</span>
<span id="L642" rel="#L642">642</span>
<span id="L643" rel="#L643">643</span>
<span id="L644" rel="#L644">644</span>
<span id="L645" rel="#L645">645</span>
<span id="L646" rel="#L646">646</span>
<span id="L647" rel="#L647">647</span>
<span id="L648" rel="#L648">648</span>
<span id="L649" rel="#L649">649</span>
<span id="L650" rel="#L650">650</span>
<span id="L651" rel="#L651">651</span>
<span id="L652" rel="#L652">652</span>
<span id="L653" rel="#L653">653</span>
<span id="L654" rel="#L654">654</span>
<span id="L655" rel="#L655">655</span>
<span id="L656" rel="#L656">656</span>
<span id="L657" rel="#L657">657</span>
<span id="L658" rel="#L658">658</span>
<span id="L659" rel="#L659">659</span>
<span id="L660" rel="#L660">660</span>
<span id="L661" rel="#L661">661</span>
<span id="L662" rel="#L662">662</span>
<span id="L663" rel="#L663">663</span>
<span id="L664" rel="#L664">664</span>
<span id="L665" rel="#L665">665</span>
<span id="L666" rel="#L666">666</span>
<span id="L667" rel="#L667">667</span>
<span id="L668" rel="#L668">668</span>
<span id="L669" rel="#L669">669</span>
<span id="L670" rel="#L670">670</span>
<span id="L671" rel="#L671">671</span>
<span id="L672" rel="#L672">672</span>
<span id="L673" rel="#L673">673</span>
<span id="L674" rel="#L674">674</span>
<span id="L675" rel="#L675">675</span>
<span id="L676" rel="#L676">676</span>
<span id="L677" rel="#L677">677</span>
<span id="L678" rel="#L678">678</span>
<span id="L679" rel="#L679">679</span>
<span id="L680" rel="#L680">680</span>
<span id="L681" rel="#L681">681</span>
<span id="L682" rel="#L682">682</span>
<span id="L683" rel="#L683">683</span>
<span id="L684" rel="#L684">684</span>
<span id="L685" rel="#L685">685</span>
<span id="L686" rel="#L686">686</span>
<span id="L687" rel="#L687">687</span>
<span id="L688" rel="#L688">688</span>
<span id="L689" rel="#L689">689</span>
<span id="L690" rel="#L690">690</span>
<span id="L691" rel="#L691">691</span>
<span id="L692" rel="#L692">692</span>
<span id="L693" rel="#L693">693</span>
<span id="L694" rel="#L694">694</span>
<span id="L695" rel="#L695">695</span>
<span id="L696" rel="#L696">696</span>
<span id="L697" rel="#L697">697</span>
<span id="L698" rel="#L698">698</span>
<span id="L699" rel="#L699">699</span>
<span id="L700" rel="#L700">700</span>
<span id="L701" rel="#L701">701</span>
<span id="L702" rel="#L702">702</span>
<span id="L703" rel="#L703">703</span>
<span id="L704" rel="#L704">704</span>
<span id="L705" rel="#L705">705</span>
<span id="L706" rel="#L706">706</span>
<span id="L707" rel="#L707">707</span>
<span id="L708" rel="#L708">708</span>
<span id="L709" rel="#L709">709</span>
<span id="L710" rel="#L710">710</span>
<span id="L711" rel="#L711">711</span>
<span id="L712" rel="#L712">712</span>
<span id="L713" rel="#L713">713</span>
<span id="L714" rel="#L714">714</span>
<span id="L715" rel="#L715">715</span>
<span id="L716" rel="#L716">716</span>
<span id="L717" rel="#L717">717</span>
<span id="L718" rel="#L718">718</span>
<span id="L719" rel="#L719">719</span>
<span id="L720" rel="#L720">720</span>
<span id="L721" rel="#L721">721</span>
<span id="L722" rel="#L722">722</span>
<span id="L723" rel="#L723">723</span>
<span id="L724" rel="#L724">724</span>
<span id="L725" rel="#L725">725</span>
<span id="L726" rel="#L726">726</span>
<span id="L727" rel="#L727">727</span>
<span id="L728" rel="#L728">728</span>
<span id="L729" rel="#L729">729</span>

            </td>
            <td class="blob-line-code">
                    <div class="highlight"><pre><div class='line' id='LC1'><span class="c1">// Three.js - http://github.com/mrdoob/three.js</span></div><div class='line' id='LC2'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">THREE</span><span class="o">=</span><span class="nx">THREE</span><span class="o">||</span><span class="p">{</span><span class="nx">REVISION</span><span class="o">:</span><span class="s2">&quot;49&quot;</span><span class="p">};</span><span class="nx">self</span><span class="p">.</span><span class="nx">Int32Array</span><span class="o">||</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">Int32Array</span><span class="o">=</span><span class="nb">Array</span><span class="p">,</span><span class="nx">self</span><span class="p">.</span><span class="nx">Float32Array</span><span class="o">=</span><span class="nb">Array</span><span class="p">);</span></div><div class='line' id='LC3'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;ms&quot;</span><span class="p">,</span><span class="s2">&quot;moz&quot;</span><span class="p">,</span><span class="s2">&quot;webkit&quot;</span><span class="p">,</span><span class="s2">&quot;o&quot;</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">;</span><span class="o">++</span><span class="nx">c</span><span class="p">){</span><span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="o">=</span><span class="nb">window</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;RequestAnimationFrame&quot;</span><span class="p">];</span><span class="nb">window</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="o">=</span><span class="nb">window</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;CancelAnimationFrame&quot;</span><span class="p">]</span><span class="o">||</span><span class="nb">window</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;CancelRequestAnimationFrame&quot;</span><span class="p">]}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">)</span><span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">16</span><span class="o">-</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">)),</span><span class="nx">g</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="nx">f</span><span class="p">)},</span><span class="nx">f</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="p">)</span><span class="nb">window</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="o">=</span></div><div class='line' id='LC4'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">a</span><span class="p">)}})();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">autoStart</span><span class="o">=</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">elapsedTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">oldTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">start</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">oldTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stop</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">getElapsedTime</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getElapsedTime</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elapsedTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elapsedTime</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">getDelta</span><span class="p">()};</span></div><div class='line' id='LC5'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getDelta</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoStart</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span><span class="nx">a</span><span class="o">=</span><span class="mf">0.0010</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">oldTime</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">oldTime</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">elapsedTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elapsedTime</span><span class="o">+</span><span class="nx">a</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span></div><div class='line' id='LC6'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">r</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copyGammaToLinear</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copyLinearToGamma</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">convertGammaToLinear</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">convertLinearToGamma</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">);</span></div><div class='line' id='LC7'><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setRGB</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setHSV</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="mi">6</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="mi">6</span><span class="o">-</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">));</span><span class="k">switch</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">4</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">5</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">6</span><span class="o">:</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">}}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setHex</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span></div><div class='line' id='LC8'><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lerpSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getHex</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="o">^</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="o">^</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="mi">255</span><span class="p">)},</span><span class="nx">getContextStyle</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">&quot;rgb(&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">).</span><span class="nx">setRGB</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">)}};</span></div><div class='line' id='LC9'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">};</span></div><div class='line' id='LC10'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">subSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">divideScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span></div><div class='line' id='LC11'><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">a</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">negate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span><span class="nx">dot</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">},</span><span class="nx">lengthSq</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">},</span><span class="nx">length</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">())},</span><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">())},</span><span class="nx">distanceTo</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="nx">a</span><span class="p">))},</span><span class="nx">distanceToSquared</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="p">},</span><span class="nx">setLength</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">normalize</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span></div><div class='line' id='LC12'><span class="nx">lerpSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">},</span><span class="nx">isZero</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">()</span><span class="o">&lt;</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">};</span></div><div class='line' id='LC13'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setX</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setY</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span></div><div class='line' id='LC14'><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">subSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiply</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplySelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">divideSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span></div><div class='line' id='LC15'><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">divideScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">/</span><span class="nx">a</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">negate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span><span class="nx">dot</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">},</span><span class="nx">lengthSq</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">},</span><span class="nx">length</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">())},</span><span class="nx">lengthManhattan</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)},</span><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">())},</span></div><div class='line' id='LC16'><span class="nx">setLength</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">normalize</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">lerpSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">cross</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">crossSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">distanceTo</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="nx">a</span><span class="p">))},</span><span class="nx">distanceToSquared</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">sub</span><span class="p">(</span><span class="k">this</span><span class="p">,</span></div><div class='line' id='LC17'><span class="nx">a</span><span class="p">).</span><span class="nx">lengthSq</span><span class="p">()},</span><span class="nx">getPositionFromMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getRotationFromMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">/</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">/</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">/</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&gt;</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">5</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">h</span><span class="o">/</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">/</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">g</span><span class="o">/</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">/</span><span class="nx">e</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getScaleFromMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span></div><div class='line' id='LC18'><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]).</span><span class="nx">length</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">},</span><span class="nx">isZero</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">()</span><span class="o">&lt;</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span></div><div class='line' id='LC19'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">subSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span></div><div class='line' id='LC20'><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">divideScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">/</span><span class="nx">a</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">negate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span><span class="nx">dot</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">},</span><span class="nx">lengthSq</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">length</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">())},</span></div><div class='line' id='LC21'><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">())},</span><span class="nx">setLength</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">normalize</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">lerpSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">]};</span></div><div class='line' id='LC22'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">o</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">l</span><span class="o">-</span><span class="nx">g</span><span class="p">,</span><span class="nx">o</span><span class="o">-</span><span class="nx">k</span><span class="p">,</span><span class="nx">d</span><span class="o">-</span><span class="nx">q</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">l</span><span class="o">+</span><span class="nx">g</span><span class="p">,</span><span class="nx">o</span><span class="o">+</span><span class="nx">k</span><span class="p">,</span><span class="nx">d</span><span class="o">+</span><span class="nx">q</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="o">+</span><span class="nx">h</span><span class="p">,</span><span class="nx">o</span><span class="o">+</span><span class="nx">p</span><span class="p">,</span><span class="nx">d</span><span class="o">+</span><span class="nx">n</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="nx">o</span><span class="o">-</span><span class="nx">p</span><span class="p">,</span><span class="nx">d</span><span class="o">-</span><span class="nx">n</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">o</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="nx">d</span><span class="o">-</span><span class="nx">r</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="nx">o</span><span class="o">+</span><span class="nx">m</span><span class="p">,</span><span class="nx">d</span><span class="o">+</span><span class="nx">r</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">b</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">))}};</span></div><div class='line' id='LC23'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">contains</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMaxScaleOnAxis</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">x</span><span class="o">*</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">y</span><span class="o">*</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">z</span><span class="o">*</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">w</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span><span class="k">return</span> <span class="kc">true</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">.</span><span class="nx">__v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span></div><div class='line' id='LC24'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">q</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">u</span><span class="p">));</span><span class="k">return</span> <span class="nx">y</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">t</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">q</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="nx">w</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">H</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">E</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">z</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">v</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">s</span><span class="o">*</span><span class="nx">E</span><span class="o">-</span><span class="nx">w</span><span class="o">*</span><span class="nx">w</span><span class="p">);</span><span class="nx">A</span><span class="o">=</span><span class="p">(</span><span class="nx">E</span><span class="o">*</span><span class="nx">H</span><span class="o">-</span><span class="nx">w</span><span class="o">*</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">v</span><span class="p">;</span><span class="nx">J</span><span class="o">=</span><span class="p">(</span><span class="nx">s</span><span class="o">*</span><span class="nx">z</span><span class="o">-</span><span class="nx">w</span><span class="o">*</span><span class="nx">H</span><span class="p">)</span><span class="o">*</span><span class="nx">v</span><span class="p">;</span><span class="k">return</span> <span class="nx">A</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">J</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="o">+</span><span class="nx">J</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setPrecision</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span></div><div class='line' id='LC25'><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">intersectObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="nx">distance</span><span class="o">:</span><span class="nx">q</span><span class="p">,</span><span class="nx">point</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">face</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">()),</span><span class="nx">r</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">.</span><span class="nx">__v1</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getColumnX</span><span class="p">().</span><span class="nx">length</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getColumnY</span><span class="p">().</span><span class="nx">length</span><span class="p">(),</span></div><div class='line' id='LC26'><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getColumnZ</span><span class="p">().</span><span class="nx">length</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">z</span><span class="p">)))</span><span class="k">return</span> <span class="nx">n</span><span class="p">;</span><span class="kd">var</span> <span class="nx">s</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">C</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixRotationWorld</span><span class="p">.</span><span class="nx">extractRotation</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">q</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">q</span><span class="o">++</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">q</span><span class="p">];</span><span class="nx">l</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">);</span><span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">centroid</span><span class="p">)).</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixRotationWorld</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">normal</span><span class="p">));</span><span class="nx">s</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">)){</span><span class="nx">i</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="o">/</span><span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">?</span></div><div class='line' id='LC27'><span class="nx">s</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">:</span><span class="nx">s</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">))){</span><span class="nx">o</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">i</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">a</span><span class="p">]));</span><span class="nx">g</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">]));</span><span class="nx">h</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">c</span><span class="p">]));</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">)){</span><span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="nx">distance</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">o</span><span class="p">),</span><span class="nx">point</span><span class="o">:</span><span class="nx">o</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">face</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">a</span><span class="p">]));</span><span class="nx">g</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">]));</span><span class="nx">h</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">c</span><span class="p">]));</span><span class="nx">j</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">d</span><span class="p">]));</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="p">)</span><span class="o">||</span><span class="nx">d</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">)){</span><span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="nx">distance</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">o</span><span class="p">),</span><span class="nx">point</span><span class="o">:</span><span class="nx">o</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span></div><div class='line' id='LC28'><span class="nx">face</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)}}}}}}</span><span class="k">return</span> <span class="nx">n</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">intersectObjects</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">intersectObject</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]));</span><span class="nx">b</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distance</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">distance</span><span class="p">});</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">E</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">J</span><span class="p">};</span></div><div class='line' id='LC29'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Rectangle</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">c</span><span class="p">}</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">getX</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getY</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getWidth</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getHeight</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getLeft</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getTop</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getRight</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getBottom</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">a</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">addPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">f</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">g</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">f</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">g</span><span class="o">?</span></div><div class='line' id='LC30'><span class="nx">e</span><span class="o">:</span><span class="nx">g</span><span class="p">}</span><span class="nx">a</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">add3Points</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">k</span><span class="o">?</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">m</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">m</span><span class="o">:</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">m</span><span class="o">?</span><span class="nx">k</span><span class="o">:</span><span class="nx">m</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">p</span><span class="o">?</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">o</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nx">o</span><span class="o">:</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">o</span><span class="o">?</span><span class="nx">p</span><span class="o">:</span><span class="nx">o</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">k</span><span class="o">?</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">m</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">m</span><span class="o">:</span><span class="nx">k</span><span class="o">&gt;</span><span class="nx">m</span><span class="o">?</span><span class="nx">k</span><span class="o">:</span><span class="nx">m</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">p</span><span class="o">?</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">o</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nx">o</span><span class="o">:</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">o</span><span class="o">?</span><span class="nx">p</span><span class="o">:</span><span class="nx">o</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">k</span><span class="o">?</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">m</span><span class="o">?</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">b</span><span class="o">:</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">m</span><span class="o">:</span><span class="nx">b</span><span class="o">:</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">m</span><span class="o">?</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">k</span><span class="o">:</span><span class="nx">b</span><span class="o">:</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">m</span><span class="o">:</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">p</span><span class="o">?</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">o</span><span class="o">?</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nx">c</span><span class="o">:</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">o</span><span class="o">:</span><span class="nx">c</span><span class="o">:</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">o</span><span class="o">?</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">p</span><span class="o">:</span><span class="nx">c</span><span class="o">:</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">o</span><span class="o">:</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">k</span><span class="o">?</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">m</span><span class="o">?</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">d</span><span class="o">:</span><span class="nx">m</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="nx">m</span><span class="o">:</span><span class="nx">d</span><span class="o">:</span><span class="nx">k</span><span class="o">&gt;</span><span class="nx">m</span><span class="o">?</span><span class="nx">k</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="nx">k</span><span class="o">:</span><span class="nx">d</span><span class="o">:</span><span class="nx">m</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="nx">m</span><span class="o">:</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">p</span><span class="o">?</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">o</span><span class="o">?</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nx">e</span><span class="o">:</span><span class="nx">o</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="nx">o</span><span class="o">:</span><span class="nx">e</span><span class="o">:</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">o</span><span class="o">?</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="nx">p</span><span class="o">:</span><span class="nx">e</span><span class="o">:</span><span class="nx">o</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="nx">o</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="nx">a</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">addRectangle</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getLeft</span><span class="p">();</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getTop</span><span class="p">();</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRight</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getBottom</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getLeft</span><span class="p">()</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">getLeft</span><span class="p">();</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getTop</span><span class="p">()</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">getTop</span><span class="p">();</span></div><div class='line' id='LC31'><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRight</span><span class="p">()</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRight</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getBottom</span><span class="p">()</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">getBottom</span><span class="p">()}</span><span class="nx">a</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">inflate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">minSelf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getLeft</span><span class="p">()</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">getLeft</span><span class="p">();</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getTop</span><span class="p">()</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">getTop</span><span class="p">();</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRight</span><span class="p">()</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">getRight</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getBottom</span><span class="p">()</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">getBottom</span><span class="p">();</span><span class="nx">a</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">intersects</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">getLeft</span><span class="p">()</span><span class="o">||</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">getRight</span><span class="p">()</span><span class="o">||</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">getTop</span><span class="p">()</span><span class="o">||</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">getBottom</span><span class="p">()</span><span class="o">?</span><span class="kc">false</span><span class="o">:</span><span class="kc">true</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">empty</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">h</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">isEmpty</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">h</span><span class="p">}};</span></div><div class='line' id='LC32'><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="o">=</span><span class="p">{</span><span class="nx">clamp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="nx">clampBottom</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="nx">mapLinear</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">)},</span><span class="nx">random16</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="mi">65280</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">+</span><span class="mi">255</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">())</span><span class="o">/</span><span class="mi">65535</span><span class="p">},</span><span class="nx">randInt</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">))},</span><span class="nx">randFloat</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)},</span><span class="nx">randFloatSpread</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="mf">0.5</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">())},</span><span class="nx">sign</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">9</span><span class="p">)};</span></div><div class='line' id='LC33'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">,</span><span class="nx">getInverse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">c</span><span class="o">=-</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">e</span><span class="o">=-</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">g</span><span class="o">=-</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">j</span><span class="o">=-</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;Matrix3.getInverse(): determinant == 0&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">k</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">l</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span></div><div class='line' id='LC34'><span class="nx">transpose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">transposeIntoArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">m</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">k</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">p</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">o</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">q</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="mi">1</span><span class="p">)};</span></div><div class='line' id='LC35'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">identity</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">]);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lookAt</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span></div><div class='line' id='LC36'><span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v2</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v3</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">).</span><span class="nx">normalize</span><span class="p">()}</span><span class="nx">f</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiply</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">o</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">u</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">y</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="nx">s</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span></div><div class='line' id='LC37'><span class="nx">H</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">E</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">z</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">A</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">J</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">K</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">R</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">D</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">M</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">G</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">z</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">K</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">M</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">w</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">R</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">G</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">A</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">P</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">E</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">J</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">D</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">z</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">K</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">M</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">w</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">R</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">G</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">A</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">P</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">E</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">J</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">D</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">z</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">K</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">M</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="nx">w</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">R</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">G</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">A</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">P</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="nx">E</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">J</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">D</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">z</span><span class="o">+</span><span class="nx">y</span><span class="o">*</span><span class="nx">K</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">M</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="o">*</span><span class="nx">w</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">y</span><span class="o">*</span><span class="nx">R</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">G</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">A</span><span class="o">+</span><span class="nx">y</span><span class="o">*</span><span class="nx">P</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="o">*</span><span class="nx">E</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">J</span><span class="o">+</span><span class="nx">y</span><span class="o">*</span><span class="nx">D</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplySelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span></div><div class='line' id='LC38'><span class="nx">a</span><span class="p">)},</span><span class="nx">multiplyToArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC39'><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyVector3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">])</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">])</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">])</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">multiplyVector4</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">rotateAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></div><div class='line' id='LC40'><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">crossVector</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">?</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">determinant</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span></div><div class='line' id='LC41'><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="k">return</span> <span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">o</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">o</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">a</span><span class="p">},</span><span class="nx">transpose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">flattenToArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span></div><div class='line' id='LC42'><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">flattenToArrayOffset</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">getPosition</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v1</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span></div><div class='line' id='LC43'><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">])},</span><span class="nx">setPosition</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getColumnX</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v1</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">])},</span><span class="nx">getColumnY</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v1</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">])},</span><span class="nx">getColumnZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v1</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">])},</span><span class="nx">getInverse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">o</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span></div><div class='line' id='LC44'><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">u</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">m</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">m</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">o</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">o</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span></div><div class='line' id='LC45'><span class="nx">e</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">k</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">u</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">u</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">u</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">m</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">o</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">determinant</span><span class="p">());</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setRotationFromEuler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;YXZ&quot;</span><span class="o">:</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">k</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span></div><div class='line' id='LC46'><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=-</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;ZXY&quot;</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=-</span><span class="nx">g</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=-</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;ZYX&quot;</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">k</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">m</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">l</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=-</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;YZX&quot;</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">k</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=-</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=-</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;XZY&quot;</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=-</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span></div><div class='line' id='LC47'><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">m</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">k</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">l</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=-</span><span class="nx">h</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=-</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setRotationFromQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">k</span><span class="o">+</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">k</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">compose</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span></div><div class='line' id='LC48'><span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__m1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__m2</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">identity</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">setRotationFromQuaternion</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">makeScale</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">decompose</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v2</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v3</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">f</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">]);</span><span class="nx">g</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">]);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span></div><div class='line' id='LC49'><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__m1</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">setFromRotationMatrix</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span><span class="p">[</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">]},</span><span class="nx">extractPosition</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span></div><div class='line' id='LC50'><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">extractRotation</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]).</span><span class="nx">length</span><span class="p">();</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">translate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span></div><div class='line' id='LC51'><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">rotateX</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">l</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">j</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">rotateY</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">l</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC52'><span class="nx">k</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">j</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">l</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">rotateZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">l</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">j</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">rotateByAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rotateX</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">===</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rotateY</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rotateZ</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></div><div class='line' id='LC53'><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">d</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">f</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">/</span><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">/</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">g</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">p</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">k</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">k</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">k</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="nx">k</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">o</span><span class="o">-</span><span class="nx">q</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="o">-</span><span class="nx">k</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">h</span><span class="p">)</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">p</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">o</span><span class="o">+</span><span class="nx">q</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">p</span><span class="o">-</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">j</span><span class="p">)</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">u</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">y</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">s</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">w</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">H</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">E</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">l</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">s</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">w</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">t</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">H</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">E</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="nx">l</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">s</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">w</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">t</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">H</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="nx">E</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="nx">l</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">s</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">u</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">w</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">t</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">H</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC54'><span class="nx">o</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">E</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">scale</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getMaxScaleOnAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">])))},</span><span class="nx">makeTranslation</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span></div><div class='line' id='LC55'><span class="nx">makeRotationX</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeRotationY</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeRotationZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeRotationAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">j</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span></div><div class='line' id='LC56'><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeScale</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeFrustum</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=-</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=-</span><span class="mi">2</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makePerspective</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">tan</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">360</span><span class="p">),</span><span class="nx">e</span><span class="o">=-</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">makeFrustum</span><span class="p">(</span><span class="nx">e</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)},</span><span class="nx">makeOrthographic</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></div><div class='line' id='LC57'><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">d</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">/</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=-</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">h</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">/</span><span class="nx">j</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=-</span><span class="p">((</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">)</span><span class="o">/</span><span class="nx">j</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=-</span><span class="mi">2</span><span class="o">/</span><span class="nx">l</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=-</span><span class="p">((</span><span class="nx">f</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="nx">l</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">])}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__v3</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__m1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span></div><div class='line' id='LC58'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">__m2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span></div><div class='line' id='LC59'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3DCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">up</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">eulerOrder</span><span class="o">=</span><span class="s2">&quot;XYZ&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">renderDepth</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixRotationWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span></div><div class='line' id='LC60'><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">boundRadius</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">boundRadiusScale</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_vector</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></div><div class='line' id='LC61'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">,</span><span class="nx">applyMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">getScaleFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">getRotationFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)},</span><span class="nx">translate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">rotateAxis</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">))},</span><span class="nx">translateX</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_vector</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))},</span><span class="nx">translateY</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_vector</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">))},</span><span class="nx">translateZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></div><div class='line' id='LC62'><span class="k">this</span><span class="p">.</span><span class="nx">_vector</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))},</span><span class="nx">lookAt</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">up</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">getRotationFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="k">this</span><span class="p">)</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.Object3D.add: An object can&#39;t be added as a child of itself.&quot;</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">;)</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">__addObject</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="nx">remove</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span></div><div class='line' id='LC63'><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!==-</span><span class="mi">1</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">;)</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">__removeObject</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="nx">getChildByName</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getChildByName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="nx">e</span><span class="p">}}},</span><span class="nx">updateMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">setRotationFromQuaternion</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">setRotationFromEuler</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span></div><div class='line' id='LC64'><span class="k">this</span><span class="p">.</span><span class="nx">eulerOrder</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">!==</span><span class="mi">1</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">!==</span><span class="mi">1</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">z</span><span class="o">!==</span><span class="mi">1</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">boundRadiusScale</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">z</span><span class="p">))}</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">},</span><span class="nx">updateMatrixWorld</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">||</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span></div><div class='line' id='LC65'><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="nx">a</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3DCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span></div><div class='line' id='LC66'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableObject</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">g</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">h</span><span class="o">=-</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">g</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">))</span><span class="o">:</span><span class="nx">f</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">)));</span><span class="nx">g</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="o">/</span><span class="p">(</span><span class="nx">g</span><span class="o">-</span><span class="nx">h</span><span class="p">))</span><span class="o">:</span><span class="nx">h</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="o">/</span><span class="p">(</span><span class="nx">g</span><span class="o">-</span><span class="nx">h</span><span class="p">)));</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span></div><div class='line' id='LC67'><span class="nx">d</span><span class="p">);</span><span class="k">return</span> <span class="kc">true</span><span class="p">}</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="p">[],</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="p">[],</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="p">[],</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">[],</span><span class="nx">w</span><span class="o">=</span><span class="p">{</span><span class="nx">objects</span><span class="o">:</span><span class="p">[],</span><span class="nx">sprites</span><span class="o">:</span><span class="p">[],</span><span class="nx">lights</span><span class="o">:</span><span class="p">[],</span><span class="nx">elements</span><span class="o">:</span><span class="p">[]},</span><span class="nx">H</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">projectVector</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrixInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">);</span></div><div class='line' id='LC68'><span class="nx">z</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrixInverse</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">pickingRay</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ray</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">projectGraph</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">sprites</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">lights</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">visible</span><span class="o">!==</span><span class="kc">false</span><span class="p">){</span><span class="k">if</span><span class="p">((</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">||</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">===</span><span class="kc">false</span><span class="o">||</span><span class="nx">A</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">b</span><span class="p">))){</span><span class="nx">H</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span></div><div class='line' id='LC69'><span class="nx">z</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">H</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="o">||</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">){</span><span class="nx">H</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">H</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">sprites</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">else</span> <span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">lights</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">])}};</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">w</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">projectScene</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">far</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">ea</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">ia</span><span class="p">,</span><span class="nx">O</span><span class="p">,</span><span class="nx">Q</span><span class="p">,</span><span class="nx">Z</span><span class="p">,</span><span class="nx">$</span><span class="p">,</span><span class="nx">ha</span><span class="p">,</span><span class="nx">Ma</span><span class="p">,</span><span class="nx">Ka</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">r</span><span class="o">=</span><span class="nx">o</span><span class="o">=</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">===</span></div><div class='line' id='LC70'><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Camera hasn&#39;t been added to a Scene. Adding it...&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="nx">a</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="nx">A</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">projectGraph</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kc">false</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">H</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">H</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">O</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">object</span><span class="p">;</span><span class="nx">Q</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">O</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="nx">Z</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="nx">$</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">materials</span><span class="p">;</span><span class="nx">Y</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">ha</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">faces</span><span class="p">;</span><span class="nx">Ma</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">;</span><span class="nx">Z</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">matrixRotationWorld</span><span class="p">.</span><span class="nx">extractRotation</span><span class="p">(</span><span class="nx">Q</span><span class="p">);</span><span class="nx">U</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">C</span><span class="o">=</span></div><div class='line' id='LC71'><span class="nx">Y</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">U</span><span class="o">&lt;</span><span class="nx">C</span><span class="p">;</span><span class="nx">U</span><span class="o">++</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">();</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">Y</span><span class="p">[</span><span class="nx">U</span><span class="p">]);</span><span class="nx">Q</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiplyVector4</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">G</span><span class="p">}</span><span class="nx">Y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">U</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Y</span><span class="o">&lt;</span><span class="nx">U</span><span class="p">;</span><span class="nx">Y</span><span class="o">++</span><span class="p">){</span><span class="nx">C</span><span class="o">=</span><span class="nx">ha</span><span class="p">[</span><span class="nx">Y</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">F</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">C</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">ea</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">C</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">fa</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">C</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">fa</span><span class="p">.</span><span class="nx">visible</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">fa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span></div><div class='line' id='LC72'><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nx">fa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">O</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">||</span><span class="nx">i</span><span class="o">!=</span><span class="nx">O</span><span class="p">.</span><span class="nx">flipSided</span><span class="p">){</span><span class="nx">ia</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace3</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">ia</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">F</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ea</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">fa</span><span class="p">)}</span><span class="k">else</span> <span class="k">continue</span><span class="p">}</span><span class="k">else</span> <span class="k">continue</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">F</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">C</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">ea</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">C</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">fa</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">C</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ia</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">C</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">fa</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">ia</span><span class="p">.</span><span class="nx">visible</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">ia</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nx">ia</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span></div><div class='line' id='LC73'><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">fa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">ia</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">fa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">fa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">ia</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">fa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">O</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">||</span><span class="nx">i</span><span class="o">!=</span><span class="nx">O</span><span class="p">.</span><span class="nx">flipSided</span><span class="p">){</span><span class="nx">Ka</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace4</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">Ka</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">F</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ea</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">fa</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">v4</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ia</span><span class="p">)}</span><span class="k">else</span> <span class="k">continue</span><span class="p">}</span><span class="k">else</span> <span class="k">continue</span><span class="p">}</span><span class="nx">k</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="o">!</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">O</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">||</span><span class="nx">O</span><span class="p">.</span><span class="nx">doubleSided</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">negate</span><span class="p">();</span><span class="nx">Z</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">);</span></div><div class='line' id='LC74'><span class="nx">k</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">Q</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">centroidScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">centroidScreen</span><span class="p">);</span><span class="nx">fa</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ea</span><span class="o">=</span><span class="nx">fa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">ea</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">ia</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="nx">ia</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">fa</span><span class="p">[</span><span class="nx">F</span><span class="p">]);</span><span class="o">!</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">O</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">||</span><span class="nx">O</span><span class="p">.</span><span class="nx">doubleSided</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">ia</span><span class="p">.</span><span class="nx">negate</span><span class="p">();</span><span class="nx">Z</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">ia</span><span class="p">)}</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ea</span><span class="o">=</span><span class="nx">Ma</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">ea</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">Ka</span><span class="o">=</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">F</span><span class="p">][</span><span class="nx">Y</span><span class="p">]){</span><span class="nx">fa</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ia</span><span class="o">=</span><span class="nx">Ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">fa</span><span class="o">&lt;</span><span class="nx">ia</span><span class="p">;</span><span class="nx">fa</span><span class="o">++</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="nx">F</span><span class="p">][</span><span class="nx">fa</span><span class="p">]</span><span class="o">=</span><span class="nx">Ka</span><span class="p">[</span><span class="nx">fa</span><span class="p">]}</span><span class="nx">k</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">faceMaterial</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">!==</span><span class="kc">null</span><span class="o">?</span><span class="nx">$</span><span class="p">[</span><span class="nx">C</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">]</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">centroidScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span></div><div class='line' id='LC75'><span class="nx">w</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">O</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">){</span><span class="nx">v</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">Q</span><span class="p">);</span><span class="nx">Y</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="nx">b</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">Y</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">v</span><span class="p">.</span><span class="nx">multiplyVector4</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">Q</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">U</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">C</span><span class="o">=</span><span class="nx">Y</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">U</span><span class="o">&lt;</span><span class="nx">C</span><span class="p">;</span><span class="nx">U</span><span class="o">++</span><span class="p">){</span><span class="nx">F</span><span class="o">=</span><span class="nx">b</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">Y</span><span class="p">[</span><span class="nx">U</span><span class="p">]);</span><span class="nx">v</span><span class="p">.</span><span class="nx">multiplyVector4</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">((</span><span class="nx">U</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">Q</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)){</span><span class="nx">ea</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">2</span><span class="p">];</span><span class="nx">J</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">K</span><span class="p">)){</span><span class="nx">J</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nx">J</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nx">K</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="nx">$</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableLine</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">$</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">J</span><span class="p">);</span></div><div class='line' id='LC76'><span class="nx">n</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">K</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)}}}}}</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">H</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">sprites</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">H</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">O</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">sprites</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">object</span><span class="p">;</span><span class="nx">Q</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">O</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">){</span><span class="nx">E</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">Q</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">Q</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">Q</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">1</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiplyVector4</span><span class="p">(</span><span class="nx">E</span><span class="p">);</span><span class="nx">E</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">z</span><span class="o">/</span><span class="nx">E</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">E</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">E</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableParticle</span><span class="p">;</span><span class="nx">y</span><span class="o">++</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">E</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">E</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="p">(</span><span class="nx">E</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="nx">E</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">]));</span></div><div class='line' id='LC77'><span class="nx">t</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="p">(</span><span class="nx">E</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="nx">E</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">]));</span><span class="nx">t</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">)}}}</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">w</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span></div><div class='line' id='LC78'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromEuler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">360</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="o">-</span><span class="nx">e</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="o">-</span><span class="nx">e</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromAxisAngle</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span></div><div class='line' id='LC79'><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromRotationMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">determinant</span><span class="p">(),</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]))</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]))</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]))</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]))</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">:</span></div><div class='line' id='LC80'><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">calculateW</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">inverse</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*-</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">length</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">)},</span><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span></div><div class='line' id='LC81'><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">a</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiply</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplySelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span></div><div class='line' id='LC82'><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyVector3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=-</span><span class="nx">f</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">j</span><span class="o">+</span><span class="nx">c</span><span class="o">*-</span><span class="nx">f</span><span class="o">+</span><span class="nx">k</span><span class="o">*-</span><span class="nx">h</span><span class="o">-</span><span class="nx">p</span><span class="o">*-</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">j</span><span class="o">+</span><span class="nx">c</span><span class="o">*-</span><span class="nx">g</span><span class="o">+</span><span class="nx">p</span><span class="o">*-</span><span class="nx">f</span><span class="o">-</span><span class="nx">l</span><span class="o">*-</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">j</span><span class="o">+</span><span class="nx">c</span><span class="o">*-</span><span class="nx">h</span><span class="o">+</span><span class="nx">l</span><span class="o">*-</span><span class="nx">g</span><span class="o">-</span><span class="nx">k</span><span class="o">*-</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">)}};</span></div><div class='line' id='LC83'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">.</span><span class="nx">slerp</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">w</span><span class="o">=-</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">e</span><span class="o">=-</span><span class="nx">e</span><span class="p">}</span><span class="k">else</span> <span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&lt;</span><span class="mf">0.0010</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">f</span><span class="p">)</span><span class="o">/</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="p">)</span><span class="o">/</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vertex</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.&quot;</span><span class="p">)};</span></div><div class='line' id='LC84'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroid</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></div><div class='line' id='LC85'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">,</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span></div><div class='line' id='LC86'><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroid</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></div><div class='line' id='LC87'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">,</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">d</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span></div><div class='line' id='LC88'><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">u</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">v</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lerpSelf</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">u</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">u</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">u</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">v</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">v</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">v</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">u</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v</span><span class="p">)}};</span></div><div class='line' id='LC89'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">colors</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">materials</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">faceUvs</span><span class="o">=</span><span class="p">[[]];</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="o">=</span><span class="p">[[]];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphColors</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">skinWeights</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">skinIndices</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">dynamic</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span></div><div class='line' id='LC90'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">applyMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">extractRotation</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">centroid</span><span class="p">)}},</span><span class="nx">computeCentroids</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC91'><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="mi">3</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">d</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="mi">4</span><span class="p">)}}},</span><span class="nx">computeFaceNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span></div><div class='line' id='LC92'><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">g</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">crossSelf</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">isZero</span><span class="p">()</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">)}},</span><span class="nx">computeVertexNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">];</span></div><div class='line' id='LC93'><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">]}}</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">d</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">)}}</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span></div><div class='line' id='LC94'><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">])}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">d</span><span class="p">])}}},</span><span class="nx">computeMorphNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalFaceNormal</span><span class="o">?</span></div><div class='line' id='LC95'><span class="nx">e</span><span class="p">.</span><span class="nx">__originalFaceNormal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalFaceNormal</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">clone</span><span class="p">()}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">]){</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">faceNormals</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="o">=</span></div><div class='line' id='LC96'><span class="p">[];</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">faceNormals</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">}</span><span class="o">:</span><span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">d</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">)}}</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">();</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span></div><div class='line' id='LC97'><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">faceNormals</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">j</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">l</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">l</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">])}</span><span class="k">else</span><span class="p">{</span><span class="nx">l</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">l</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="nx">l</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">l</span><span class="p">.</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">3</span><span class="p">])}}}</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalFaceNormal</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">}},</span><span class="nx">computeTangents</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">F</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span></div><div class='line' id='LC98'><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="nx">o</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">u</span><span class="o">-</span><span class="nx">k</span><span class="p">.</span><span class="nx">u</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">u</span><span class="o">-</span><span class="nx">k</span><span class="p">.</span><span class="nx">u</span><span class="p">;</span><span class="nx">w</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">v</span><span class="o">-</span><span class="nx">k</span><span class="p">.</span><span class="nx">v</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">v</span><span class="o">-</span><span class="nx">k</span><span class="p">.</span><span class="nx">v</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">y</span><span class="o">*</span><span class="nx">H</span><span class="o">-</span><span class="nx">s</span><span class="o">*</span><span class="nx">w</span><span class="p">);</span><span class="nx">J</span><span class="p">.</span><span class="nx">set</span><span class="p">((</span><span class="nx">H</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">w</span><span class="o">*</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">E</span><span class="p">,(</span><span class="nx">H</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">w</span><span class="o">*</span><span class="nx">r</span><span class="p">)</span><span class="o">*</span><span class="nx">E</span><span class="p">,(</span><span class="nx">H</span><span class="o">*</span><span class="nx">u</span><span class="o">-</span><span class="nx">w</span><span class="o">*</span><span class="nx">t</span><span class="p">)</span><span class="o">*</span><span class="nx">E</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">set</span><span class="p">((</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">s</span><span class="o">*</span><span class="nx">o</span><span class="p">)</span><span class="o">*</span><span class="nx">E</span><span class="p">,(</span><span class="nx">y</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">s</span><span class="o">*</span><span class="nx">n</span><span class="p">)</span><span class="o">*</span><span class="nx">E</span><span class="p">,(</span><span class="nx">y</span><span class="o">*</span><span class="nx">t</span><span class="o">-</span><span class="nx">s</span><span class="o">*</span><span class="nx">u</span><span class="p">)</span><span class="o">*</span><span class="nx">E</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">J</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">J</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">J</span><span class="p">);</span><span class="nx">A</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">K</span><span class="p">);</span><span class="nx">A</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">K</span><span class="p">);</span><span class="nx">A</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">K</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">E</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="p">[],</span><span class="nx">A</span><span class="o">=</span><span class="p">[],</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span></div><div class='line' id='LC99'><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">v</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">A</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">}</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">)</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)}}</span><span class="kd">var</span> <span class="nx">M</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;d&quot;</span><span class="p">];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">D</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">M</span><span class="p">[</span><span class="nx">d</span><span class="p">]];</span><span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">R</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span><span class="nx">R</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">z</span><span class="p">))).</span><span class="nx">normalize</span><span class="p">();</span></div><div class='line' id='LC100'><span class="nx">P</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">z</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">A</span><span class="p">[</span><span class="nx">e</span><span class="p">]);</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">e</span><span class="p">)}}</span><span class="k">this</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">=</span><span class="kc">true</span><span class="p">},</span><span class="nx">computeBoundingBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">=</span><span class="p">{</span><span class="nx">min</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">max</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">max</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span></div><div class='line' id='LC101'><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">}}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}},</span><span class="nx">computeBoundingSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="p">{</span><span class="nx">radius</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">length</span><span class="p">();</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">mergeVertices</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{},</span><span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span></div><div class='line' id='LC102'><span class="nx">e</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">e</span><span class="p">),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">e</span><span class="p">)].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]]}</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">c</span><span class="p">]}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="s2">&quot;abcd&quot;</span><span class="p">[</span><span class="nx">a</span><span class="p">]])</span><span class="o">!=</span><span class="nx">a</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)(</span><span class="nx">h</span><span class="o">=</span></div><div class='line' id='LC103'><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">f</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">break</span><span class="p">}}}</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span></div><div class='line' id='LC104'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Spline</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">initFromArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="nx">y</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">z</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="mi">2</span><span class="p">]}};</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span></div><div class='line' id='LC105'><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">p</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]];</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getControlPointsArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">]}</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">100</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span></div><div class='line' id='LC106'><span class="nx">a</span><span class="o">/</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!=</span><span class="nx">e</span><span class="p">){</span><span class="nx">h</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">}}</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">return</span><span class="p">{</span><span class="nx">chunks</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">total</span><span class="o">:</span><span class="nx">j</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">reparametrizeByArcLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getLength</span><span class="p">();</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">clone</span><span class="p">());</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">chunks</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">-</span><span class="nx">k</span><span class="p">.</span><span class="nx">chunks</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="o">/</span><span class="nx">k</span><span class="p">.</span><span class="nx">total</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span></div><div class='line' id='LC107'><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">).</span><span class="nx">clone</span><span class="p">())}</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">b</span><span class="p">]).</span><span class="nx">clone</span><span class="p">())}</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="nx">h</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrixInverse</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">lookAt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">up</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">getRotationFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)};</span></div><div class='line' id='LC108'><span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="nx">e</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mf">0.1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="nx">f</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">makeOrthographic</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">top</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bottom</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="p">)};</span></div><div class='line' id='LC109'><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aspect</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mf">0.1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="nx">d</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setLens</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan</span><span class="p">((</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">24</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="mi">180</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()};</span></div><div class='line' id='LC110'><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setViewOffset</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fullHeight</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()};</span></div><div class='line' id='LC111'><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullHeight</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">tan</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">360</span><span class="p">)</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">c</span><span class="o">=-</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="o">-</span><span class="nx">d</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">makeFrustum</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="p">,</span><span class="nx">d</span><span class="o">+</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="p">,</span><span class="nx">b</span><span class="o">-</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullHeight</span><span class="p">,</span><span class="nx">b</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullHeight</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="p">)}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">makePerspective</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">aspect</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="p">)};</span></div><div class='line' id='LC112'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">supr</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">;</span></div><div class='line' id='LC113'><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="o">=</span><span class="mi">5</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraLeft</span><span class="o">=-</span><span class="mi">500</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraTop</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraRight</span><span class="o">=</span><span class="mi">500</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraBottom</span><span class="o">=-</span><span class="mi">500</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowBias</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="o">=</span><span class="mf">0.5</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="o">=</span><span class="mi">512</span><span class="p">;</span></div><div class='line' id='LC114'><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascade</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeOffset</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="nx">E3</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeCount</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeBias</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeWidth</span><span class="o">=</span><span class="p">[</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeHeight</span><span class="o">=</span><span class="p">[</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeNearZ</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.99</span><span class="p">,</span><span class="mf">0.998</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeFarZ</span><span class="o">=</span><span class="p">[</span><span class="mf">0.99</span><span class="p">,</span><span class="mf">0.998</span><span class="p">,</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMap</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">;</span></div><div class='line' id='LC115'><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">;</span></div><div class='line' id='LC116'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">angle</span><span class="o">=</span><span class="nx">d</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">exponent</span><span class="o">=</span><span class="nx">e</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mi">10</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="o">=</span><span class="mi">5</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraFov</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowBias</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="o">=</span><span class="mf">0.5</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="o">=</span><span class="mi">512</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="o">=</span></div><div class='line' id='LC117'><span class="k">this</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMap</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">statusDomElement</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">showStatus</span><span class="o">=</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addStatusElement</span><span class="p">()</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadProgress</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="o">=</span><span class="kd">function</span><span class="p">(){}};</span></div><div class='line' id='LC118'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">,</span><span class="nx">crossOrigin</span><span class="o">:</span><span class="s2">&quot;anonymous&quot;</span><span class="p">,</span><span class="nx">addStatusElement</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="s2">&quot;absolute&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="s2">&quot;0px&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="s2">&quot;0px&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span><span class="o">=</span><span class="s2">&quot;0.8em&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">textAlign</span><span class="o">=</span><span class="s2">&quot;left&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span><span class="o">=</span><span class="s2">&quot;rgba(0,0,0,0.25)&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="s2">&quot;#fff&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="s2">&quot;120px&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">padding</span><span class="o">=</span><span class="s2">&quot;0.5em 0.5em 0.5em 0.5em&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">zIndex</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;Loading ...&quot;</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">updateProgress</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="s2">&quot;Loaded &quot;</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">total</span><span class="o">?</span><span class="nx">b</span><span class="o">+</span><span class="p">((</span><span class="mi">100</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">loaded</span><span class="o">/</span></div><div class='line' id='LC119'><span class="nx">a</span><span class="p">.</span><span class="nx">total</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;%&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="o">+</span><span class="p">((</span><span class="nx">a</span><span class="p">.</span><span class="nx">loaded</span><span class="o">/</span><span class="mi">1</span><span class="nx">E3</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot; KB&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">statusDomElement</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">extractUrlBase</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="s2">&quot;.&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">))</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="p">},</span><span class="nx">initMaterials</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">++</span><span class="nx">d</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createMaterial</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">c</span><span class="p">)},</span><span class="nx">hasNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">)</span><span class="k">return</span> <span class="kc">true</span><span class="p">}</span><span class="k">return</span> <span class="kc">false</span><span class="p">},</span><span class="nx">createMaterial</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span></div><div class='line' id='LC120'><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">LN2</span><span class="p">;</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">==</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">LN2</span><span class="p">;</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">Image</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span><span class="o">||!</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">drawImage</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="k">else</span> <span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="nx">e</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">sourceFile</span><span class="o">=</span></div><div class='line' id='LC121'><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!=</span><span class="mi">1</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">!=</span><span class="mi">1</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">}</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">offset</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="p">{</span><span class="nx">repeat</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">,</span><span class="nx">mirror</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MirroredRepeatWrapping</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">]]}</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">255</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="mi">255</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="mi">255</span><span class="p">}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="s2">&quot;MeshLambertMaterial&quot;</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">{</span><span class="nx">color</span><span class="o">:</span><span class="mi">15658734</span><span class="p">,</span><span class="nx">opacity</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">map</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">lightMap</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">normalMap</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">};</span></div><div class='line' id='LC122'><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span><span class="nx">k</span><span class="o">===</span><span class="s2">&quot;phong&quot;</span><span class="o">?</span><span class="nx">j</span><span class="o">=</span><span class="s2">&quot;MeshPhongMaterial&quot;</span><span class="o">:</span><span class="nx">k</span><span class="o">===</span><span class="s2">&quot;basic&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="s2">&quot;MeshBasicMaterial&quot;</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">blending</span><span class="o">=</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">==</span><span class="s2">&quot;face&quot;</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">;</span></div><div class='line' id='LC123'><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorDiffuse</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorDiffuse</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">DbgColor</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">DbgColor</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorSpecular</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">specular</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorSpecular</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorAmbient</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">ambient</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorAmbient</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparency</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparency</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">specularCoef</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">shininess</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">specularCoef</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuse</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="s2">&quot;map&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuse</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuseRepeat</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuseOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuseWrap</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLight</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="s2">&quot;lightMap&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLight</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLightRepeat</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLightOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLightWrap</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormal</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="s2">&quot;normalMap&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormal</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalRepeat</span><span class="p">,</span></div><div class='line' id='LC124'><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalWrap</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecular</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="s2">&quot;specularMap&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecular</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecularRepeat</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecularOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecularWrap</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormal</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderUtils</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">normal</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">tNormal</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalFactor</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uNormalScale</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalFactor</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">map</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">tDiffuse</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">enableDiffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">tSpecular</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">enableSpecular</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">tAO</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">;</span></div><div class='line' id='LC125'><span class="nx">k</span><span class="p">.</span><span class="nx">enableAO</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="nx">k</span><span class="p">.</span><span class="nx">uDiffuseColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">uSpecularColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">specular</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">uAmbientColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">ambient</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">uShininess</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">shininess</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">opacity</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uOpacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">k</span><span class="p">,</span><span class="nx">lights</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">fog</span><span class="o">:</span><span class="kc">true</span><span class="p">})}</span><span class="k">else</span> <span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">[</span><span class="nx">j</span><span class="p">](</span><span class="nx">l</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">DbgName</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">DbgName</span><span class="p">;</span><span class="k">return</span> <span class="nx">l</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span></div><div class='line' id='LC126'><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">load</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">extractUrlBase</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">extractUrlBase</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">showProgress</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateProgress</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">loadAjaxJSON</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)};</span></div><div class='line' id='LC127'><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">loadAjaxJSON</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">4</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">200</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">loadAjaxBuffers</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">)}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.BinaryLoader: Couldn&#39;t load [&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;] [&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">status</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">)};</span><span class="nx">g</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="p">(</span><span class="s2">&quot;text/plain; charset=x-user-defined&quot;</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s2">&quot;Content-Type&quot;</span><span class="p">,</span><span class="s2">&quot;text/plain&quot;</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">)};</span></div><div class='line' id='LC128'><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">loadAjaxBuffers</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">buffers</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">4</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">200</span><span class="o">||</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createBinModel</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">response</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">)</span><span class="o">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.BinaryLoader: Couldn&#39;t load [&quot;</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="s2">&quot;] [&quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">3</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="nx">h</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s2">&quot;Content-Length&quot;</span><span class="p">));</span><span class="nx">e</span><span class="p">({</span><span class="nx">total</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">loaded</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseText</span><span class="p">.</span><span class="nx">length</span><span class="p">})}}</span><span class="k">else</span> <span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s2">&quot;Content-Length&quot;</span><span class="p">))};</span></div><div class='line' id='LC129'><span class="nx">f</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseType</span><span class="o">=</span><span class="s2">&quot;arraybuffer&quot;</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">)};</span></div><div class='line' id='LC130'><span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createBinModel</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">;</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">%</span><span class="mi">4</span><span class="o">?</span><span class="mi">4</span><span class="o">-</span><span class="nx">a</span><span class="o">%</span><span class="mi">4</span><span class="o">:</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">]}</span><span class="kd">function</span> <span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">]}</span><span class="kd">function</span> <span class="nx">z</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">f</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">f</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">g</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">g</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="p">[];</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">));</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">));</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span></div><div class='line' id='LC131'><span class="nx">k</span><span class="p">));</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">v</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">4</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">4</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">f</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">f</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">g</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">g</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">h</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">h</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="p">[];</span><span class="nx">o</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">));</span><span class="nx">o</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">));</span><span class="nx">o</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">m</span><span class="p">));</span><span class="nx">o</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="p">));</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">o</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">A</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span></div><div class='line' id='LC132'><span class="nx">P</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">h</span><span class="p">))}}</span><span class="kd">function</span> <span class="nx">J</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">4</span><span class="o">*</span><span class="nx">b</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">4</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">P</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">i</span><span class="p">))}}</span><span class="kd">function</span> <span class="nx">K</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">3</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">3</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">k</span><span class="o">*</span><span class="mi">3</span><span class="p">],</span><span class="nx">o</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">k</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">k</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">l</span><span class="o">*</span><span class="mi">3</span><span class="p">],</span></div><div class='line' id='LC133'><span class="nx">q</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">l</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">l</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">P</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">M</span><span class="p">[</span><span class="nx">j</span><span class="o">*</span><span class="mi">3</span><span class="p">],</span><span class="nx">M</span><span class="p">[</span><span class="nx">j</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">M</span><span class="p">[</span><span class="nx">j</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">]),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">l</span><span class="p">)],</span><span class="kc">null</span><span class="p">,</span><span class="nx">i</span><span class="p">))}}</span><span class="kd">function</span> <span class="nx">R</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">4</span><span class="o">*</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="mi">4</span><span class="o">*</span><span class="nx">b</span><span class="p">),</span><span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">l</span><span class="o">*</span><span class="mi">3</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">l</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">l</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">m</span><span class="o">*</span><span class="mi">3</span><span class="p">],</span><span class="nx">s</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">m</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">m</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">3</span><span class="p">],</span><span class="nx">u</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">P</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span></div><div class='line' id='LC134'><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">M</span><span class="p">[</span><span class="nx">k</span><span class="o">*</span><span class="mi">3</span><span class="p">],</span><span class="nx">M</span><span class="p">[</span><span class="nx">k</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">M</span><span class="p">[</span><span class="nx">k</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">]),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">l</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">n</span><span class="p">)],</span><span class="kc">null</span><span class="p">,</span><span class="nx">j</span><span class="p">))}}</span><span class="kd">var</span> <span class="nx">P</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="p">[],</span><span class="nx">G</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">initMaterials</span><span class="p">(</span><span class="nx">P</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">);(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="nx">e</span><span class="p">]);</span><span class="k">return</span> <span class="nx">d</span><span class="p">})(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">12</span><span class="p">);</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">13</span><span class="p">);</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">14</span><span class="p">);</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">15</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">16</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">17</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">18</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">19</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">4</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">8</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">12</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span></div><div class='line' id='LC135'><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">16</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">20</span><span class="p">);</span><span class="nx">r</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">24</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">28</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">32</span><span class="p">);</span><span class="nx">y</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">36</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">40</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">D</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="nx">k</span><span class="p">;</span><span class="nx">U</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="nx">k</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="nx">q</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">r</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">u</span><span class="o">*</span><span class="nx">U</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">t</span><span class="o">*</span><span class="p">(</span><span class="nx">U</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">y</span><span class="o">*</span><span class="p">(</span><span class="nx">U</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">D</span><span class="o">+</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">p</span><span class="o">*</span><span class="mi">3</span><span class="p">),</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">*</span><span class="mi">3</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">P</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">))}</span><span class="k">return</span> <span class="nx">p</span><span class="o">*</span><span class="mi">3</span><span class="o">*</span><span class="nx">Float32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="p">}(</span><span class="nx">D</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">D</span><span class="o">+</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">Int8Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="o">*</span><span class="mi">3</span><span class="p">),</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">*</span><span class="mi">3</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">M</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="o">/</span></div><div class='line' id='LC136'><span class="mi">127</span><span class="p">,</span><span class="nx">e</span><span class="o">/</span><span class="mi">127</span><span class="p">,</span><span class="nx">f</span><span class="o">/</span><span class="mi">127</span><span class="p">)}}</span><span class="k">return</span> <span class="nx">m</span><span class="o">*</span><span class="mi">3</span><span class="o">*</span><span class="nx">Int8Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="p">}(</span><span class="nx">D</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">D</span><span class="o">+</span><span class="nx">w</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">D</span><span class="o">+</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">o</span><span class="o">*</span><span class="mi">2</span><span class="p">),</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">o</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">G</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)}}</span><span class="k">return</span> <span class="nx">o</span><span class="o">*</span><span class="mi">2</span><span class="o">*</span><span class="nx">Float32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="p">}(</span><span class="nx">D</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nx">D</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">T</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">T</span><span class="o">+</span><span class="nx">w</span><span class="p">(</span><span class="nx">q</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">T</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="nx">w</span><span class="p">(</span><span class="nx">n</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">k</span><span class="o">+</span><span class="nx">w</span><span class="p">(</span><span class="nx">r</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="nx">w</span><span class="p">(</span><span class="nx">u</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">j</span><span class="o">+</span><span class="nx">w</span><span class="p">(</span><span class="nx">t</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="nx">w</span><span class="p">(</span><span class="nx">y</span><span class="o">*</span><span class="mi">2</span><span class="p">);(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">A</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">z</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">b</span><span class="p">)}})(</span><span class="nx">T</span><span class="p">);(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span></div><div class='line' id='LC137'><span class="nx">r</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">K</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">z</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">c</span><span class="p">)}})(</span><span class="nx">e</span><span class="p">);(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">y</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span><span class="nx">J</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">y</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span><span class="nx">v</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">)}})(</span><span class="nx">j</span><span class="p">);(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">s</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="nx">s</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span><span class="nx">R</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">+</span><span class="nx">s</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span><span class="nx">v</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">c</span><span class="p">)}})(</span><span class="nx">l</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">D</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">3</span><span class="p">);(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">K</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span></div><div class='line' id='LC138'><span class="mi">3</span><span class="p">)}})(</span><span class="nx">i</span><span class="p">);</span><span class="nx">u</span><span class="o">&amp;&amp;</span><span class="nx">J</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">k</span><span class="o">+</span><span class="nx">u</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">4</span><span class="p">);(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span><span class="nx">R</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">Uint32Array</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="o">*</span><span class="mi">4</span><span class="p">)}})(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasNormals</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">computeTangents</span><span class="p">()};</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">(</span><span class="k">new</span> <span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">))};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">;</span></div><div class='line' id='LC139'><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">load</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">extractUrlBase</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">loadAjaxJSON</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span></div><div class='line' id='LC140'><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">loadAjaxJSON</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">DONE</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="o">===</span><span class="mi">200</span><span class="o">||</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseText</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">createModel</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.JSONLoader: [&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;] seems to be unreachable or file there is empty&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="p">()}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.JSONLoader: Couldn&#39;t load [&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;] [&quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">LOADING</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="nx">g</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s2">&quot;Content-Length&quot;</span><span class="p">));</span></div><div class='line' id='LC141'><span class="nx">e</span><span class="p">({</span><span class="nx">total</span><span class="o">:</span><span class="nx">g</span><span class="p">,</span><span class="nx">loaded</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseText</span><span class="p">.</span><span class="nx">length</span><span class="p">})}}</span><span class="k">else</span> <span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">HEADERS_RECEIVED</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s2">&quot;Content-Length&quot;</span><span class="p">))};</span><span class="nx">f</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="p">(</span><span class="s2">&quot;text/plain; charset=x-user-defined&quot;</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s2">&quot;Content-Type&quot;</span><span class="p">,</span><span class="s2">&quot;text/plain&quot;</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">)};</span></div><div class='line' id='LC142'><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createModel</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">initMaterials</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">,</span><span class="nx">c</span><span class="p">);(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="kd">var</span> <span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">normals</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">E</span><span class="o">++</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">E</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="nx">d</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">[]}</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;){</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;){</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">2</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span></div><div class='line' id='LC143'><span class="mi">4</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">8</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">16</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">32</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">64</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">128</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="mi">4</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="mi">3</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">j</span><span class="p">}</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">E</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">u</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">q</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">y</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">q</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">q</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">q</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="nx">q</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">E</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">u</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">t</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">q</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">y</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">q</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span><span class="nx">q</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">q</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="nx">q</span><span class="p">)}</span><span class="nx">d</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">o</span><span class="o">++</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">o</span><span class="o">++</span><span class="p">];</span></div><div class='line' id='LC144'><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">o</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">o</span><span class="o">++</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">o</span><span class="o">++</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">o</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">H</span><span class="p">[</span><span class="nx">m</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">m</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">l</span><span class="o">++</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">H</span><span class="p">[</span><span class="nx">m</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}</span><span class="nx">d</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">)}})(</span><span class="nx">e</span><span class="p">);(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))}}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span></div><div class='line' id='LC145'><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))}}</span><span class="nx">d</span><span class="p">.</span><span class="nx">bones</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">bones</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">animation</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">animation</span><span class="p">})();(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">name</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">vertices</span><span class="o">=</span><span class="p">[];</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="mi">3</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}}}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphColors</span><span class="o">!==</span></div><div class='line' id='LC146'><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">name</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">colors</span><span class="o">=</span><span class="p">[];</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">colors</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">colors</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">k</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">k</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">k</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">]);</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">)}}}})(</span><span class="nx">e</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">hasNormals</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">computeTangents</span><span class="p">();</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">)};</span></div><div class='line' id='LC147'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadProgress</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">callbackSync</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">callbackProgress</span><span class="o">=</span><span class="kd">function</span><span class="p">(){}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneLoader</span><span class="p">;</span></div><div class='line' id='LC148'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">load</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">4</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">200</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">createScene</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.SceneLoader: Couldn&#39;t load [&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;] [&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">status</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">)};</span><span class="nx">d</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="p">(</span><span class="s2">&quot;text/plain; charset=x-user-defined&quot;</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s2">&quot;Content-Type&quot;</span><span class="p">,</span><span class="s2">&quot;text/plain&quot;</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">)};</span></div><div class='line' id='LC149'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createScene</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">==</span><span class="s2">&quot;relativeToHTML&quot;</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">l</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">objects</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">C</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">m</span><span class="p">]){</span><span class="nx">u</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">m</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">geometry</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">J</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">u</span><span class="p">.</span><span class="nx">geometry</span><span class="p">]){</span><span class="nx">a</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">K</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">u</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="mi">0</span><span class="p">]];(</span><span class="nx">a</span><span class="o">=</span><span class="nx">K</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">J</span><span class="p">.</span><span class="nx">computeTangents</span><span class="p">();</span><span class="nx">w</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">scale</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">matrix</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">u</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">);</span><span class="nx">u</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">);</span></div><div class='line' id='LC150'><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">K</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">15</span><span class="p">])}</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">E</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">E</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">E</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">E</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">E</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">else</span> <span class="nx">a</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">H</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">H</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">H</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">z</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">z</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">z</span><span class="p">[</span><span class="mi">2</span><span class="p">])}</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">visible</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">doubleSided</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">}}</span><span class="k">else</span><span class="p">{</span><span class="nx">w</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">;</span></div><div class='line' id='LC151'><span class="nx">z</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">scale</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">E</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">E</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">E</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">E</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">E</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">else</span> <span class="nx">a</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">H</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">H</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">H</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">z</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">z</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">z</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">visible</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">u</span><span class="p">.</span><span class="nx">visible</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">empties</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">}}}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="p">();</span><span class="nx">G</span><span class="o">=</span><span class="nx">G</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="p">();</span><span class="nx">h</span><span class="p">()}}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(){</span><span class="nx">j</span><span class="p">.</span><span class="nx">callbackProgress</span><span class="p">({</span><span class="nx">totalModels</span><span class="o">:</span><span class="nx">T</span><span class="p">,</span><span class="nx">totalTextures</span><span class="o">:</span><span class="nx">U</span><span class="p">,</span><span class="nx">loadedModels</span><span class="o">:</span><span class="nx">T</span><span class="o">-</span></div><div class='line' id='LC152'><span class="nx">G</span><span class="p">,</span><span class="nx">loadedTextures</span><span class="o">:</span><span class="nx">U</span><span class="o">-</span><span class="nx">i</span><span class="p">},</span><span class="nx">C</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">onLoadProgress</span><span class="p">();</span><span class="nx">G</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">(</span><span class="nx">C</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extractUrlBase</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">E</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">R</span><span class="p">,</span><span class="nx">P</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">C</span><span class="p">;</span><span class="nx">D</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BinaryLoader</span><span class="p">;</span><span class="nx">M</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">G</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">C</span><span class="o">=</span><span class="p">{</span><span class="nx">scene</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">,</span><span class="nx">geometries</span><span class="o">:</span><span class="p">{},</span><span class="nx">materials</span><span class="o">:</span><span class="p">{},</span><span class="nx">textures</span><span class="o">:</span><span class="p">{},</span><span class="nx">objects</span><span class="o">:</span><span class="p">{},</span><span class="nx">cameras</span><span class="o">:</span><span class="p">{},</span><span class="nx">lights</span><span class="o">:</span><span class="p">{},</span><span class="nx">fogs</span><span class="o">:</span><span class="p">{},</span><span class="nx">empties</span><span class="o">:</span><span class="p">{}};</span><span class="k">if</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">transform</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">transform</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">transform</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">transform</span><span class="p">.</span><span class="nx">scale</span><span class="p">;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">y</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">y</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span></div><div class='line' id='LC153'><span class="nx">y</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">v</span><span class="o">&amp;&amp;</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="nx">y</span><span class="o">||</span><span class="nx">v</span><span class="p">){</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">()}}</span><span class="nx">a</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="p">();</span><span class="nx">j</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="p">()};</span><span class="k">for</span><span class="p">(</span><span class="nx">q</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">cameras</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">cameras</span><span class="p">[</span><span class="nx">q</span><span class="p">];</span><span class="nx">v</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;perspective&quot;</span><span class="o">?</span><span class="nx">R</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fov</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">aspect</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">far</span><span class="p">)</span><span class="o">:</span><span class="nx">v</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;ortho&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">R</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">top</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">bottom</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">far</span><span class="p">));</span><span class="nx">w</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">up</span><span class="p">;</span><span class="nx">R</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">R</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">y</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">y</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">y</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">v</span><span class="o">&amp;&amp;</span><span class="nx">R</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">C</span><span class="p">.</span><span class="nx">cameras</span><span class="p">[</span><span class="nx">q</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC154'><span class="nx">R</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">lights</span><span class="p">){</span><span class="nx">y</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">lights</span><span class="p">[</span><span class="nx">o</span><span class="p">];</span><span class="nx">q</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">color</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">y</span><span class="p">.</span><span class="nx">color</span><span class="o">:</span><span class="mi">16777215</span><span class="p">;</span><span class="nx">R</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">intensity</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">y</span><span class="p">.</span><span class="nx">intensity</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;directional&quot;</span><span class="p">){</span><span class="nx">w</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">direction</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">R</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;point&quot;</span><span class="p">){</span><span class="nx">w</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">R</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">2</span><span class="p">])}</span><span class="k">else</span> <span class="nx">y</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;ambient&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">(</span><span class="nx">q</span><span class="p">));</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">lights</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">fogs</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">fogs</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="nx">o</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;linear&quot;</span><span class="o">?</span><span class="nx">P</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span></div><div class='line' id='LC155'><span class="nx">o</span><span class="p">.</span><span class="nx">far</span><span class="p">)</span><span class="o">:</span><span class="nx">o</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;exp2&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">P</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">density</span><span class="p">));</span><span class="nx">v</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="nx">P</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">C</span><span class="p">.</span><span class="nx">fogs</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">cameras</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">camera</span><span class="p">)</span><span class="nx">C</span><span class="p">.</span><span class="nx">currentCamera</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">cameras</span><span class="p">[</span><span class="nx">D</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">camera</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">fogs</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">fog</span><span class="p">)</span><span class="nx">C</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">fogs</span><span class="p">[</span><span class="nx">D</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">fog</span><span class="p">];</span><span class="nx">v</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">bgcolor</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">bgColor</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">bgColor</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">C</span><span class="p">.</span><span class="nx">bgColorAlpha</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">bgalpha</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">geometries</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;bin_mesh&quot;</span><span class="o">||</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;ascii_mesh&quot;</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">G</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">()}}</span><span class="nx">T</span><span class="o">=</span><span class="nx">G</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">geometries</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span></div><div class='line' id='LC156'><span class="nx">D</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;cube&quot;</span><span class="p">){</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">depth</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsWidth</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsHeight</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsDepth</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">flipped</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">sides</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">=</span><span class="nx">J</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;plane&quot;</span><span class="p">){</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsWidth</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsHeight</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">=</span><span class="nx">J</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;sphere&quot;</span><span class="p">){</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsWidth</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsHeight</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">=</span><span class="nx">J</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;cylinder&quot;</span><span class="p">){</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">topRad</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">botRad</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">radSegs</span><span class="p">,</span></div><div class='line' id='LC157'><span class="nx">n</span><span class="p">.</span><span class="nx">heightSegs</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">=</span><span class="nx">J</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;torus&quot;</span><span class="p">){</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">tube</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">=</span><span class="nx">J</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;icosahedron&quot;</span><span class="p">){</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">subdivisions</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">=</span><span class="nx">J</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;bin_mesh&quot;</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">k</span><span class="p">));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;ascii_mesh&quot;</span><span class="p">)</span><span class="nx">M</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">k</span><span class="p">));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">type</span><span class="o">==</span><span class="s2">&quot;embedded_mesh&quot;</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">embeds</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span><span class="nx">n</span><span class="p">.</span><span class="nx">metadata</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">metadata</span><span class="p">;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">M</span><span class="p">.</span><span class="nx">createModel</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">g</span><span class="p">(</span><span class="nx">k</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="p">)}}</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">textures</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span></div><div class='line' id='LC158'><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">url</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">k</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">()}}</span><span class="nx">U</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">textures</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">mapping</span><span class="o">!=</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">mapping</span><span class="p">]</span><span class="o">!=</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">mapping</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">url</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">P</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">P</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">P</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">[</span><span class="nx">P</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">url</span><span class="p">[</span><span class="nx">P</span><span class="p">],</span><span class="nx">D</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTextureCube</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">mapping</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">n</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTexture</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">mapping</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">]</span><span class="o">!=</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">];</span></div><div class='line' id='LC159'><span class="k">if</span><span class="p">(</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">]</span><span class="o">!=</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">repeat</span><span class="p">){</span><span class="nx">n</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">repeat</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">k</span><span class="p">.</span><span class="nx">repeat</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">repeat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!=</span><span class="mi">1</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">repeat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">!=</span><span class="mi">1</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">}</span><span class="nx">k</span><span class="p">.</span><span class="nx">offset</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">offset</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">k</span><span class="p">.</span><span class="nx">offset</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">){</span><span class="nx">P</span><span class="o">=</span><span class="p">{</span><span class="nx">repeat</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">,</span><span class="nx">mirror</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MirroredRepeatWrapping</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="nx">P</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="k">if</span><span class="p">(</span><span class="nx">P</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">[</span><span class="mi">1</span><span class="p">]]}}</span><span class="nx">C</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span> <span class="k">in</span> <span class="nx">D</span><span class="p">.</span><span class="nx">materials</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">A</span> <span class="k">in</span> <span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="o">==</span></div><div class='line' id='LC160'><span class="s2">&quot;envMap&quot;</span><span class="o">||</span><span class="nx">A</span><span class="o">==</span><span class="s2">&quot;map&quot;</span><span class="o">||</span><span class="nx">A</span><span class="o">==</span><span class="s2">&quot;lightMap&quot;</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="o">==</span><span class="s2">&quot;shading&quot;</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">==</span><span class="s2">&quot;flat&quot;</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="o">==</span><span class="s2">&quot;blending&quot;</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">=</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]]</span><span class="o">?</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]]</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="o">==</span><span class="s2">&quot;combine&quot;</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">==</span><span class="s2">&quot;MixOperation&quot;</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MixOperation</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="o">==</span><span class="s2">&quot;vertexColors&quot;</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">==</span><span class="s2">&quot;face&quot;</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">])</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC161'><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">opacity</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderUtils</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">normal</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">specular</span><span class="p">;</span><span class="nx">P</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">ambient</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">shininess</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">tNormal</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalMapFactor</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">uNormalScale</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalMapFactor</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">map</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">tDiffuse</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">enableDiffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span></div><div class='line' id='LC162'><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">tAO</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">enableAO</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">tSpecular</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">enableSpecular</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">uDiffuseColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">uSpecularColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">uAmbientColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">P</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">uShininess</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">opacity</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">uOpacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span><span class="nx">K</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">lights</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">fog</span><span class="o">:</span><span class="kc">true</span><span class="p">})}</span><span class="k">else</span> <span class="nx">K</span><span class="o">=</span></div><div class='line' id='LC163'><span class="k">new</span> <span class="nx">THREE</span><span class="p">[</span><span class="nx">t</span><span class="p">.</span><span class="nx">type</span><span class="p">](</span><span class="nx">t</span><span class="p">.</span><span class="nx">parameters</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">=</span><span class="nx">K</span><span class="p">}</span><span class="nx">e</span><span class="p">();</span><span class="nx">j</span><span class="p">.</span><span class="nx">callbackSync</span><span class="p">(</span><span class="nx">C</span><span class="p">);</span><span class="nx">h</span><span class="p">()};</span></div><div class='line' id='LC164'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MaterialCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blending</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendSrc</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendSrc</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendSrc</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaFactor</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendDst</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendDst</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendDst</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcAlphaFactor</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendEquation</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendEquation</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendEquation</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AddEquation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span></div><div class='line' id='LC165'><span class="nx">a</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">overdraw</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">overdraw</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">overdraw</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MaterialCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoShading</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span></div><div class='line' id='LC166'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoBlending</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AdditiveBlending</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractiveBlending</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyBlending</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AdditiveAlphaBlending</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CustomBlending</span><span class="o">=</span><span class="mi">6</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AddEquation</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractEquation</span><span class="o">=</span><span class="mi">101</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ReverseSubtractEquation</span><span class="o">=</span><span class="mi">102</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ZeroFactor</span><span class="o">=</span><span class="mi">200</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneFactor</span><span class="o">=</span><span class="mi">201</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcColorFactor</span><span class="o">=</span><span class="mi">202</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcColorFactor</span><span class="o">=</span><span class="mi">203</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaFactor</span><span class="o">=</span><span class="mi">204</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcAlphaFactor</span><span class="o">=</span><span class="mi">205</span><span class="p">;</span></div><div class='line' id='LC167'><span class="nx">THREE</span><span class="p">.</span><span class="nx">DstAlphaFactor</span><span class="o">=</span><span class="mi">206</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusDstAlphaFactor</span><span class="o">=</span><span class="mi">207</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DstColorFactor</span><span class="o">=</span><span class="mi">208</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusDstColorFactor</span><span class="o">=</span><span class="mi">209</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaSaturateFactor</span><span class="o">=</span><span class="mi">210</span><span class="p">;</span></div><div class='line' id='LC168'><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">linecap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">linecap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">linecap</span><span class="o">:</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">linejoin</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">linejoin</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">linejoin</span><span class="o">:</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">:</span><span class="kc">true</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">;</span></div><div class='line' id='LC169'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">:</span><span class="mf">0.98</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">:</span></div><div class='line' id='LC170'><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">:</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">:</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">!==</span></div><div class='line' id='LC171'><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">:</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">;</span></div><div class='line' id='LC172'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">ambient</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">ambient</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ambient</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">emissive</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">emissive</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">emissive</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span></div><div class='line' id='LC173'><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">:</span><span class="mf">0.98</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span></div><div class='line' id='LC174'><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">:</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">:</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">:</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">;</span></div><div class='line' id='LC175'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">ambient</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">ambient</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ambient</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">emissive</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">emissive</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">emissive</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">specular</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">specular</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">specular</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">1118481</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">shininess</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shininess</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">shininess</span><span class="o">:</span><span class="mi">30</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">metal</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">metal</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">metal</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">=</span></div><div class='line' id='LC176'><span class="nx">a</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">:</span><span class="mf">0.98</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span></div><div class='line' id='LC177'><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">:</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">:</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span></div><div class='line' id='LC178'><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">:</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span></div><div class='line' id='LC179'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">;</span></div><div class='line' id='LC180'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">:</span><span class="kc">true</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span></div><div class='line' id='LC181'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">program</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="o">:</span><span class="kd">function</span><span class="p">(){}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="p">;</span></div><div class='line' id='LC182'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleDOMMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span></div><div class='line' id='LC183'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;void main() {}&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexShader</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;void main() {}&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span></div><div class='line' id='LC184'><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lights</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">lights</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">lights</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">:</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">;</span></div><div class='line' id='LC185'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextureCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UVMapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">d</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="nx">e</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="nx">f</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapLinearFilter</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">g</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">h</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedByteType</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=</span></div><div class='line' id='LC186'><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">premultiplyAlpha</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onUpdate</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">,</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">mapping</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextureCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MixOperation</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UVMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeReflectionMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeRefractionMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span></div><div class='line' id='LC187'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphericalReflectionMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphericalRefractionMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MirroredRepeatWrapping</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapNearestFilter</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapLinearFilter</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="o">=</span><span class="mi">6</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapNearestFilter</span><span class="o">=</span><span class="mi">7</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapLinearFilter</span><span class="o">=</span><span class="mi">8</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ByteType</span><span class="o">=</span><span class="mi">9</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedByteType</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShortType</span><span class="o">=</span><span class="mi">11</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShortType</span><span class="o">=</span><span class="mi">12</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">IntType</span><span class="o">=</span><span class="mi">13</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedIntType</span><span class="o">=</span><span class="mi">14</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FloatType</span><span class="o">=</span><span class="mi">15</span><span class="p">;</span></div><div class='line' id='LC188'><span class="nx">THREE</span><span class="p">.</span><span class="nx">AlphaFormat</span><span class="o">=</span><span class="mi">16</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBFormat</span><span class="o">=</span><span class="mi">17</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="o">=</span><span class="mi">18</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LuminanceFormat</span><span class="o">=</span><span class="mi">19</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LuminanceAlphaFormat</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">width</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">height</span><span class="o">:</span><span class="nx">c</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">;</span></div><div class='line' id='LC189'><span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">mapping</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">;</span></div><div class='line' id='LC190'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">16777215</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">sortParticles</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundRadius</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">;</span></div><div class='line' id='LC191'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">16777215</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineStrip</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">())};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineStrip</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">;</span></div><div class='line' id='LC192'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">16777215</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundRadius</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetForcedOrder</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetDictionary</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span></div><div class='line' id='LC193'><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetDictionary</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">}}}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">supr</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getMorphTargetIndexByName</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetDictionary</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">morphTargetDictionary</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.Mesh.getMorphTargetIndexByName: morph target &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; does not exist. Returning 0.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="p">};</span></div><div class='line' id='LC194'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">skin</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">supr</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span></div><div class='line' id='LC195'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">|</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="p">){</span><span class="nx">a</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">update</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span></div><div class='line' id='LC196'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">identityMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">bones</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">pos</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">rotq</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">scl</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">addBone</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">d</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span><span class="nx">d</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">h</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span></div><div class='line' id='LC197'><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="o">===-</span><span class="mi">1</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">pose</span><span class="p">()}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addBone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">(</span><span class="k">this</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span></div><div class='line' id='LC198'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">||</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">identityMatrix</span><span class="p">,</span><span class="kc">false</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="kc">true</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">flattenToArrayOffset</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span></div><div class='line' id='LC199'><span class="nx">a</span><span class="o">*</span><span class="mi">16</span><span class="p">)};</span></div><div class='line' id='LC200'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pose</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">flattenToArrayOffset</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="p">,</span><span class="nx">c</span><span class="o">*</span><span class="mi">16</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinVerticesA</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinVerticesA</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinVerticesB</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span></div><div class='line' id='LC201'><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinVerticesA</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinVerticesB</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">y</span><span class="o">!==</span><span class="mi">1</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">y</span><span class="p">))</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">y</span><span class="o">+</span><span class="nx">c</span><span class="p">}}}};</span></div><div class='line' id='LC202'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setFrameRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">;</span></div><div class='line' id='LC203'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setFrameRange</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">startKeyframe</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">endKeyframe</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">endKeyframe</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">startKeyframe</span><span class="o">+</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setDirectionForward</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setDirectionBackward</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span></div><div class='line' id='LC204'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">parseAnimations</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">animations</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">animations</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">animations</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="sr">/([a-z]+)(\d+)/</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">name</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="kc">Infinity</span><span class="p">,</span><span class="nx">end</span><span class="o">:-</span><span class="kc">Infinity</span><span class="p">});</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">start</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">end</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">)}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">firstAnimation</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span></div><div class='line' id='LC205'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationLabel</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">c</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">playAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">setFrameRange</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="o">*</span><span class="p">((</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;animation[&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;] undefined&quot;</span><span class="p">)};</span></div><div class='line' id='LC206'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">*-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">false</span><span class="p">}}}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">}</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">startKeyframe</span><span class="o">+</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">/</span></div><div class='line' id='LC207'><span class="nx">b</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">%</span><span class="nx">b</span><span class="o">/</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span></div><div class='line' id='LC208'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="o">=</span><span class="p">[]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">supr</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addLevel</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">visibleAtDistance</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="nx">visibleAtDistance</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">object3D</span><span class="o">:</span><span class="nx">a</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></div><div class='line' id='LC209'><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">;</span><span class="nx">a</span><span class="o">=-</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">object3D</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">visibleAtDistance</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">object3D</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">object3D</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">else</span> <span class="k">break</span><span class="p">;</span><span class="k">for</span><span class="p">(;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">LODs</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">object3D</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span></div><div class='line' id='LC210'><span class="kc">false</span><span class="p">}};</span></div><div class='line' id='LC211'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blending</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendSrc</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendSrc</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendSrc</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaFactor</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendDst</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendDst</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendDst</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcAlphaFactor</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendEquation</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendEquation</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendEquation</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AddEquation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span></div><div class='line' id='LC212'><span class="nx">a</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mergeWith3D</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mergeWith3D</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">mergeWith3D</span><span class="o">:!</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="o">:!</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">:!</span><span class="k">this</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">alignment</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">alignment</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">alignment</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">center</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation3d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uvOffset</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">uvScale</span><span class="o">=</span></div><div class='line' id='LC213'><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation3d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">setRotationFromEuler</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation3d</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">!==</span><span class="mi">1</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">!==</span><span class="mi">1</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">boundRadiusScale</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="o">=</span><span class="p">{};</span></div><div class='line' id='LC214'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">topLeft</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">topCenter</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">topRight</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">centerLeft</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">center</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">centerRight</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">bottomLeft</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">bottomCenter</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span></div><div class='line' id='LC215'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">bottomRight</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="o">=</span><span class="p">[]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">;</span></div><div class='line' id='LC216'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__addObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===-</span><span class="mi">1</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">__addObject</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">])};</span></div><div class='line' id='LC217'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__removeObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">)){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!==-</span><span class="mi">1</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">)}}</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">__removeObject</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">])};</span></div><div class='line' id='LC218'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">1</span><span class="nx">E3</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">density</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mf">2.5</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">};</span></div><div class='line' id='LC219'><span class="nx">THREE</span><span class="p">.</span><span class="nx">DOMRenderer</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.DOMRenderer&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">REVISION</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]]</span><span class="o">===</span><span class="s2">&quot;string&quot;</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="kc">null</span><span class="p">}([</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span><span class="s2">&quot;MozTransform&quot;</span><span class="p">,</span><span class="s2">&quot;WebkitTransform&quot;</span><span class="p">,</span><span class="s2">&quot;msTransform&quot;</span><span class="p">,</span><span class="s2">&quot;OTransform&quot;</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">projectScene</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span></div><div class='line' id='LC220'><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableParticle</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">material</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleDOMMaterial</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">domElement</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">f</span><span class="o">-</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">);</span><span class="nx">o</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">q</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">zIndex</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">far</span><span class="o">/</span><span class="nx">d</span><span class="p">.</span><span class="nx">near</span><span class="p">));</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;scale(&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">)}}}};</span></div><div class='line' id='LC221'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CanvasRenderer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">globalAlpha</span><span class="o">=</span><span class="nx">t</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="o">!=</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">globalCompositeOperation</span><span class="o">=</span><span class="s2">&quot;source-over&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AdditiveBlending</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">globalCompositeOperation</span><span class="o">=</span><span class="s2">&quot;lighter&quot;</span><span class="p">}</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">strokeStyle</span><span class="o">=</span><span class="nx">s</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.CanvasRenderer&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">REVISION</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{},</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">canvas</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">canvas</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">),</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span></div><div class='line' id='LC222'><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">u</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">ea</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">ia</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Z</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">$</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">ha</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Ma</span><span class="o">=</span><span class="p">[],</span><span class="nx">Ka</span><span class="o">=</span><span class="p">[],</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">La</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">Na</span><span class="p">,</span><span class="nx">Kb</span><span class="p">,</span><span class="nx">lb</span><span class="p">,</span><span class="nx">gb</span><span class="p">,</span><span class="nx">Lb</span><span class="p">,</span><span class="nx">hb</span><span class="p">,</span><span class="nx">Cb</span><span class="p">,</span><span class="nx">Wa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">,</span><span class="nx">Ba</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">,</span><span class="nx">xa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">,</span><span class="nx">$a</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">aa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Ta</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Qa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">oa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">ib</span><span class="p">,</span><span class="nx">Db</span><span class="p">,</span><span class="nx">Sc</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span><span class="nx">pc</span><span class="p">,</span><span class="nx">Bc</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">16</span><span class="p">;</span><span class="nx">ib</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span></div><div class='line' id='LC223'><span class="nx">ib</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">ib</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">Db</span><span class="o">=</span><span class="nx">ib</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span><span class="nx">Db</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;rgba(0,0,0,1)&quot;</span><span class="p">;</span><span class="nx">Db</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">Sc</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">ab</span><span class="o">=</span><span class="nx">Sc</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span><span class="nx">pc</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">pc</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">pc</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">Bc</span><span class="o">=</span><span class="nx">pc</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span><span class="nx">Bc</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="o">-</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">Bc</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">--</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">sortElements</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">info</span><span class="o">=</span><span class="p">{</span><span class="nx">render</span><span class="o">:</span><span class="p">{</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">faces</span><span class="o">:</span><span class="mi">0</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">setSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">p</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">m</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="nx">o</span><span class="p">,</span><span class="o">-</span><span class="nx">q</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="nx">o</span><span class="p">,</span><span class="o">-</span><span class="nx">q</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span></div><div class='line' id='LC224'><span class="mi">0</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="nx">E</span><span class="o">=</span><span class="nx">H</span><span class="o">=</span><span class="nx">w</span><span class="o">=</span><span class="nx">s</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="nx">o</span><span class="p">,</span><span class="o">-</span><span class="nx">q</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColorHex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="nx">o</span><span class="p">,</span><span class="o">-</span><span class="nx">q</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">n</span><span class="p">.</span><span class="nx">setTransform</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">()){</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">minSelf</span><span class="p">(</span><span class="nx">Wa</span><span class="p">);</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">inflate</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="nx">u</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">getX</span><span class="p">()),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">getY</span><span class="p">()),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">getWidth</span><span class="p">()),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">getHeight</span><span class="p">()));</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">c</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">(</span><span class="s2">&quot;rgba(&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span></div><div class='line' id='LC225'><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nx">u</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">getX</span><span class="p">()),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">getY</span><span class="p">()),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">getWidth</span><span class="p">()),</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">getHeight</span><span class="p">()))}</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">empty</span><span class="p">()}};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">aa</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">Ta</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">){</span><span class="nx">aa</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">aa</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">aa</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">){</span><span class="nx">Ta</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Ta</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Ta</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Ta</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Ta</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">Ta</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">){</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span></div><div class='line' id='LC226'><span class="nx">Qa</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">}}}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">();</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">j</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)){</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">j</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">();</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">b</span><span class="p">).</span><span class="nx">normalize</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">j</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)){</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">distance</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="nx">g</span><span class="p">.</span><span class="nx">distance</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span></div><div class='line' id='LC227'><span class="nx">i</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">j</span><span class="p">}}}}}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">blending</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">map</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">image</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">width</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">height</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">m</span><span class="p">;</span><span class="nx">xa</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">intersects</span><span class="p">(</span><span class="nx">xa</span><span class="p">)){</span><span class="nx">n</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="o">-</span><span class="nx">f</span><span class="p">.</span><span class="nx">rotation</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="o">-</span><span class="nx">j</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="o">-</span><span class="nx">l</span><span class="p">,</span><span class="o">-</span><span class="nx">m</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">restore</span><span class="p">()}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">xa</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">intersects</span><span class="p">(</span><span class="nx">xa</span><span class="p">)){</span><span class="nx">d</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">());</span></div><div class='line' id='LC228'><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">());</span><span class="nx">n</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="o">-</span><span class="nx">f</span><span class="p">.</span><span class="nx">rotation</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">program</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">restore</span><span class="p">()}}}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">blending</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">H</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineWidth</span><span class="o">=</span><span class="nx">H</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">linecap</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">E</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineCap</span><span class="o">=</span><span class="nx">E</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">linejoin</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineJoin</span><span class="o">=</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">());</span><span class="nx">n</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span><span class="nx">xa</span><span class="p">.</span><span class="nx">inflate</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">*</span></div><div class='line' id='LC229'><span class="mi">2</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+</span><span class="mi">3</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">++</span><span class="p">;</span><span class="nx">b</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">blending</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">M</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">G</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">U</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">w</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">map</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">mapping</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UVMapping</span><span class="p">){</span><span class="nx">Na</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">ad</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">u</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">v</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">u</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">v</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">u</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">v</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">map</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">envMap</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">envMap</span><span class="p">.</span><span class="nx">mapping</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphericalReflectionMapping</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span></div><div class='line' id='LC230'><span class="nx">k</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">;</span><span class="nx">oa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="nx">g</span><span class="p">]);</span><span class="nx">Kb</span><span class="o">=</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">lb</span><span class="o">=-</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">oa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="nx">h</span><span class="p">]);</span><span class="nx">gb</span><span class="o">=</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">Lb</span><span class="o">=-</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">oa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="nx">l</span><span class="p">]);</span><span class="nx">hb</span><span class="o">=</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">Cb</span><span class="o">=-</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span></div><div class='line' id='LC231'><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">oa</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">ad</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">Kb</span><span class="p">,</span><span class="nx">lb</span><span class="p">,</span><span class="nx">gb</span><span class="p">,</span><span class="nx">Lb</span><span class="p">,</span><span class="nx">hb</span><span class="p">,</span><span class="nx">Cb</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">envMap</span><span class="p">)}}</span><span class="k">else</span> <span class="nx">n</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">Mb</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">$a</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">shading</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">3</span><span class="p">){</span><span class="nx">Q</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">Q</span><span class="p">);</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">Z</span><span class="p">);</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span></div><div class='line' id='LC232'><span class="nx">$</span><span class="p">);</span><span class="nx">Q</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">Q</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Q</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">Q</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">ha</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">ha</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">ha</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">Cc</span><span class="p">(</span><span class="nx">Q</span><span class="p">,</span><span class="nx">Z</span><span class="p">,</span><span class="nx">$</span><span class="p">,</span><span class="nx">ha</span><span class="p">);</span><span class="nx">gc</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">Sa</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">O</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">O</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span></div><div class='line' id='LC233'><span class="nx">aa</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">O</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">,</span><span class="nx">O</span><span class="p">);</span><span class="nx">O</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">O</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">O</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">O</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">O</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">O</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">Mb</span><span class="p">(</span><span class="nx">O</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">O</span><span class="p">)}</span><span class="k">else</span> <span class="nx">n</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">Mb</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">){</span><span class="nx">Ra</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">near</span><span class="p">;</span><span class="nx">La</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">far</span><span class="p">;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">ac</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">La</span><span class="p">);</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">ac</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span></div><div class='line' id='LC234'><span class="nx">Ra</span><span class="p">,</span><span class="nx">La</span><span class="p">);</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">ac</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">La</span><span class="p">);</span><span class="nx">ha</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">ha</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">ha</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">Cc</span><span class="p">(</span><span class="nx">Q</span><span class="p">,</span><span class="nx">Z</span><span class="p">,</span><span class="nx">$</span><span class="p">,</span><span class="nx">ha</span><span class="p">);</span><span class="nx">gc</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">Sa</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">){</span><span class="nx">O</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">hc</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">O</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">hc</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">O</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">hc</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">Mb</span><span class="p">(</span><span class="nx">O</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">O</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+</span><span class="mi">4</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">++</span><span class="p">;</span><span class="nx">b</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">blending</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">map</span><span class="o">||</span><span class="nx">m</span><span class="p">.</span><span class="nx">envMap</span><span class="p">){</span><span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></div><div class='line' id='LC235'><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="nx">t</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">D</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">M</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">G</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">U</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">C</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Y</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ea</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">fa</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ia</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">){</span><span class="nx">y</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">Mb</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">$a</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC236'><span class="nx">m</span><span class="p">.</span><span class="nx">shading</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">4</span><span class="p">){</span><span class="nx">Q</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">Q</span><span class="p">);</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">Z</span><span class="p">);</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">v4</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">$</span><span class="p">);</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">ha</span><span class="p">);</span><span class="nx">Q</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">Q</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Q</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">Q</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span></div><div class='line' id='LC237'><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">ha</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">ha</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">ha</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">ha</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">ha</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">ha</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">Cc</span><span class="p">(</span><span class="nx">Q</span><span class="p">,</span><span class="nx">Z</span><span class="p">,</span><span class="nx">$</span><span class="p">,</span><span class="nx">ha</span><span class="p">);</span><span class="nx">w</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">);</span><span class="nx">gc</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">Sa</span><span class="p">);</span><span class="nx">w</span><span class="p">(</span><span class="nx">F</span><span class="p">,</span><span class="nx">ea</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">ia</span><span class="p">);</span><span class="nx">gc</span><span class="p">(</span><span class="nx">F</span><span class="p">,</span><span class="nx">ea</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">ia</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">Sa</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">O</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">O</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">O</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">p</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="p">,</span></div><div class='line' id='LC238'><span class="nx">n</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">,</span><span class="nx">O</span><span class="p">);</span><span class="nx">O</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">O</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">O</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">O</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">O</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">O</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">y</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">Mb</span><span class="p">(</span><span class="nx">O</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">O</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">y</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">Mb</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">){</span><span class="nx">O</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">hc</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">O</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">hc</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">O</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">hc</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">y</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span></div><div class='line' id='LC239'><span class="nx">Y</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">Mb</span><span class="p">(</span><span class="nx">O</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">O</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">){</span><span class="nx">Ra</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">near</span><span class="p">;</span><span class="nx">La</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">far</span><span class="p">;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">ac</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">La</span><span class="p">);</span><span class="nx">Z</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">ac</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">La</span><span class="p">);</span><span class="nx">$</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">ac</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">La</span><span class="p">);</span><span class="nx">ha</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">ac</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">La</span><span class="p">);</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">Cc</span><span class="p">(</span><span class="nx">Q</span><span class="p">,</span><span class="nx">Z</span><span class="p">,</span><span class="nx">$</span><span class="p">,</span><span class="nx">ha</span><span class="p">);</span><span class="nx">w</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">);</span><span class="nx">gc</span><span class="p">(</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">Sa</span><span class="p">);</span><span class="nx">w</span><span class="p">(</span><span class="nx">F</span><span class="p">,</span><span class="nx">ea</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">ia</span><span class="p">);</span><span class="nx">gc</span><span class="p">(</span><span class="nx">F</span><span class="p">,</span><span class="nx">ea</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">ia</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">Sa</span><span class="p">)}}}</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">n</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span></div><div class='line' id='LC240'><span class="nx">d</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">closePath</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">n</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">closePath</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">Mb</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">H</span><span class="o">!=</span><span class="nx">b</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineWidth</span><span class="o">=</span><span class="nx">H</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">E</span><span class="o">!=</span><span class="nx">c</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineCap</span><span class="o">=</span><span class="nx">E</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span><span class="o">!=</span><span class="nx">e</span><span class="p">)</span><span class="nx">n</span><span class="p">.</span><span class="nx">lineJoin</span><span class="o">=</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">());</span><span class="nx">n</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span><span class="nx">xa</span><span class="p">.</span><span class="nx">inflate</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="mi">2</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">Eb</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">());</span><span class="nx">n</span><span class="p">.</span><span class="nx">fill</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">ad</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">==</span><span class="kc">true</span><span class="o">||</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">==</span></div><div class='line' id='LC241'><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">;</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">createPattern</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="o">?</span><span class="s2">&quot;repeat&quot;</span><span class="o">:</span><span class="nx">o</span><span class="o">&amp;&amp;!</span><span class="nx">q</span><span class="o">?</span><span class="s2">&quot;repeat-x&quot;</span><span class="o">:!</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="o">?</span><span class="s2">&quot;repeat-y&quot;</span><span class="o">:</span><span class="s2">&quot;no-repeat&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="nx">e</span><span class="p">(</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">]);</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">p</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">p</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Db</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="nx">o</span><span class="p">)</span><span class="o">*</span><span class="nx">Db</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">r</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span><span class="nx">o</span><span class="p">)</span><span class="o">*</span><span class="nx">Db</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">(</span><span class="nx">k</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">(</span><span class="nx">l</span><span class="o">+</span><span class="nx">o</span><span class="p">)</span><span class="o">*</span><span class="nx">Db</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">m</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">k</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Ka</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span></div><div class='line' id='LC242'><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">Ka</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="p">).</span><span class="nx">data</span><span class="p">}</span><span class="nx">b</span><span class="o">=</span><span class="nx">Ka</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span><span class="nx">O</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">);</span><span class="nx">Eb</span><span class="p">(</span><span class="nx">O</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">o</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">o</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">f</span><span class="p">)</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">j</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">c</span><span class="p">)</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="nx">p</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">restore</span><span class="p">()}}}</span><span class="kd">function</span> <span class="nx">gc</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="p">,</span><span class="nx">o</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">-</span><span class="nx">b</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">i</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">o</span><span class="o">-</span><span class="nx">i</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">h</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">j</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="p">(</span><span class="nx">l</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="p">(</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">f</span><span class="p">)</span><span class="o">*</span></div><div class='line' id='LC243'><span class="nx">o</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">c</span><span class="p">)</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">k</span><span class="o">*</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="nx">p</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">clip</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">restore</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">Cc</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=~~</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">f</span><span class="o">=~~</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">a</span><span class="o">=~~</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">g</span><span class="o">=~~</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">i</span><span class="o">=~~</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">b</span><span class="o">=~~</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">h</span><span class="o">=~~</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">j</span><span class="o">=~~</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">c</span><span class="o">=~~</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">k</span><span class="o">=~~</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">l</span><span class="o">=~~</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">d</span><span class="o">=~~</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="mi">255</span><span class="p">);</span><span class="nx">ab</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">e</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">f</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">f</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">g</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">g</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">i</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">i</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">b</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">b</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">h</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">h</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span></div><div class='line' id='LC244'><span class="nx">j</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">j</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">c</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">c</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">k</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">k</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">l</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">l</span><span class="p">;</span><span class="nx">ab</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">d</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">d</span><span class="p">;</span><span class="nx">Db</span><span class="p">.</span><span class="nx">putImageData</span><span class="p">(</span><span class="nx">Sc</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">Bc</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">ib</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">pc</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ac</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">hc</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Nb</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">d</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">Dc</span><span class="p">,</span><span class="nx">bd</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">eb</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="p">()</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">setTransform</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span></div><div class='line' id='LC245'><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">projectScene</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sortElements</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">lights</span><span class="p">;(</span><span class="nx">$a</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">Dc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">bd</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Dc</span><span class="o">&lt;</span><span class="nx">bd</span><span class="p">;</span><span class="nx">Dc</span><span class="o">++</span><span class="p">){</span><span class="nx">Ha</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">Dc</span><span class="p">];</span><span class="nx">eb</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="nx">eb</span><span class="o">=</span><span class="nx">eb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="o">?</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">faceMaterial</span><span class="o">:</span><span class="nx">eb</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">eb</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">eb</span><span class="p">.</span><span class="nx">visible</span><span class="o">===</span><span class="kc">false</span><span class="p">)){</span><span class="nx">xa</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">Ha</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableParticle</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="nx">Ha</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">r</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">eb</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">Ha</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableLine</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v1</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v2</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span></div><div class='line' id='LC246'><span class="nx">o</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">xa</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">xa</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">intersects</span><span class="p">(</span><span class="nx">xa</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">eb</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">Ha</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace3</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v1</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v2</span><span class="p">;</span><span class="nx">J</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v3</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">eb</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">){</span><span class="nx">Nb</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span></div><div class='line' id='LC247'><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">Nb</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">Nb</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">)}</span><span class="nx">xa</span><span class="p">.</span><span class="nx">add3Points</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">intersects</span><span class="p">(</span><span class="nx">xa</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">eb</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">Ha</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace4</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v1</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v2</span><span class="p">;</span><span class="nx">J</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v3</span><span class="p">;</span><span class="nx">K</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">v4</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span></div><div class='line' id='LC248'><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">R</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">P</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">eb</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">){</span><span class="nx">Nb</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">Nb</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">Nb</span><span class="p">(</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">Nb</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">R</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">Nb</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">P</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">)}</span><span class="nx">xa</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">xa</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></div><div class='line' id='LC249'><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">xa</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">J</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">xa</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">intersects</span><span class="p">(</span><span class="nx">xa</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">R</span><span class="p">,</span><span class="nx">P</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">eb</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">addRectangle</span><span class="p">(</span><span class="nx">xa</span><span class="p">)}}</span><span class="nx">n</span><span class="p">.</span><span class="nx">setTransform</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}};</span></div><div class='line' id='LC250'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SVGRenderer</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">();</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">k</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)){</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">k</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">k</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">k</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">();</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">b</span><span class="p">).</span><span class="nx">normalize</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">k</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)){</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">distance</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="o">/</span><span class="nx">g</span><span class="p">.</span><span class="nx">distance</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">k</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">k</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span></div><div class='line' id='LC251'><span class="nx">k</span><span class="p">}}}}}</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">A</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span><span class="nx">A</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s2">&quot;http://www.w3.org/2000/svg&quot;</span><span class="p">,</span><span class="s2">&quot;path&quot;</span><span class="p">);</span><span class="nx">D</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;shape-rendering&quot;</span><span class="p">,</span><span class="s2">&quot;crispEdges&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="nx">A</span><span class="p">[</span><span class="nx">a</span><span class="p">]}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">}</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.SVGRenderer&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">REVISION</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s2">&quot;http://www.w3.org/2000/svg&quot;</span><span class="p">,</span><span class="s2">&quot;svg&quot;</span><span class="p">),</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Rectangle</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span></div><div class='line' id='LC252'><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="p">[],</span><span class="nx">J</span><span class="o">=</span><span class="p">[],</span><span class="nx">K</span><span class="p">,</span><span class="nx">R</span><span class="p">,</span><span class="nx">P</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">sortElements</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">info</span><span class="o">=</span><span class="p">{</span><span class="nx">render</span><span class="o">:</span><span class="p">{</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">faces</span><span class="o">:</span><span class="mi">0</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">setQuality</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;high&quot;</span><span class="o">:</span><span class="nx">D</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;low&quot;</span><span class="o">:</span><span class="nx">D</span><span class="o">=</span><span class="mi">0</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">setSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;viewBox&quot;</span><span class="p">,</span><span class="o">-</span><span class="nx">p</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+-</span><span class="nx">m</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">k</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="nx">u</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="nx">p</span><span class="p">,</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(;</span><span class="nx">j</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;)</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="mi">0</span><span class="p">])};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span></div><div class='line' id='LC253'><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">C</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">projectScene</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sortElements</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">lights</span><span class="p">;</span><span class="nx">P</span><span class="o">=</span><span class="nx">R</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">w</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">H</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">E</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="nx">C</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">A</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">){</span><span class="nx">w</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">w</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">){</span><span class="nx">H</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">H</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">H</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">){</span><span class="nx">E</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">E</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">E</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">A</span><span class="p">.</span><span class="nx">b</span><span class="p">}}}</span><span class="nx">i</span><span class="o">=</span></div><div class='line' id='LC254'><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="nx">A</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">C</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="nx">C</span><span class="o">=</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="o">?</span><span class="nx">A</span><span class="p">.</span><span class="nx">faceMaterial</span><span class="o">:</span><span class="nx">C</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">C</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">C</span><span class="p">.</span><span class="nx">visible</span><span class="o">===</span><span class="kc">false</span><span class="p">)){</span><span class="nx">t</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">A</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableParticle</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">A</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">A</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableLine</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v1</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v2</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></div><div class='line' id='LC255'><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">intersects</span><span class="p">(</span><span class="nx">t</span><span class="p">)){</span><span class="nx">A</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Y</span><span class="o">=</span><span class="nx">q</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">P</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">J</span><span class="p">[</span><span class="nx">F</span><span class="p">]</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span><span class="nx">J</span><span class="p">[</span><span class="nx">F</span><span class="p">]</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s2">&quot;http://www.w3.org/2000/svg&quot;</span><span class="p">,</span><span class="s2">&quot;line&quot;</span><span class="p">);</span><span class="nx">D</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">J</span><span class="p">[</span><span class="nx">F</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;shape-rendering&quot;</span><span class="p">,</span><span class="s2">&quot;crispEdges&quot;</span><span class="p">)}</span><span class="nx">K</span><span class="o">=</span><span class="nx">J</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;x1&quot;</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;y1&quot;</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;x2&quot;</span><span class="p">,</span><span class="nx">Y</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;y2&quot;</span><span class="p">,</span><span class="nx">Y</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">){</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;style&quot;</span><span class="p">,</span><span class="s2">&quot;fill: none; stroke: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;; stroke-width: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">+</span></div><div class='line' id='LC256'><span class="s2">&quot;; stroke-opacity: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">opacity</span><span class="o">+</span><span class="s2">&quot;; stroke-linecap: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">linecap</span><span class="o">+</span><span class="s2">&quot;; stroke-linejoin: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">linejoin</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">K</span><span class="p">)}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">A</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace3</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v1</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v2</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v3</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></div><div class='line' id='LC257'><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">intersects</span><span class="p">(</span><span class="nx">t</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">Y</span><span class="o">=</span><span class="nx">o</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">q</span><span class="p">,</span><span class="nx">ea</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+</span><span class="mi">3</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">++</span><span class="p">;</span><span class="nx">K</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">R</span><span class="o">++</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;d&quot;</span><span class="p">,</span><span class="s2">&quot;M &quot;</span><span class="o">+</span><span class="nx">Y</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">Y</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="s2">&quot; L &quot;</span><span class="o">+</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="s2">&quot; L &quot;</span><span class="o">+</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="s2">&quot;z&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">)</span><span class="nx">s</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span><span class="nx">s</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="p">,</span></div><div class='line' id='LC258'><span class="nx">A</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">s</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">s</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">s</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">))}</span><span class="k">else</span> <span class="nx">s</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">){</span><span class="nx">z</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">C</span><span class="p">.</span><span class="nx">__2near</span><span class="o">/</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">__farPlusNear</span><span class="o">-</span><span class="nx">A</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">__farMinusNear</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">z</span><span class="p">)}</span><span class="k">else</span> <span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">z</span><span class="p">));</span><span class="nx">C</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;style&quot;</span><span class="p">,</span><span class="s2">&quot;fill: none; stroke: &quot;</span><span class="o">+</span><span class="nx">s</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;; stroke-width: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">+</span></div><div class='line' id='LC259'><span class="s2">&quot;; stroke-opacity: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">opacity</span><span class="o">+</span><span class="s2">&quot;; stroke-linecap: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">+</span><span class="s2">&quot;; stroke-linejoin: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;style&quot;</span><span class="p">,</span><span class="s2">&quot;fill: &quot;</span><span class="o">+</span><span class="nx">s</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;; fill-opacity: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">K</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">A</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace4</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v1</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v2</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v3</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">v4</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span></div><div class='line' id='LC260'><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*-</span><span class="nx">m</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">addPoint</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">intersects</span><span class="p">(</span><span class="nx">t</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">Y</span><span class="o">=</span><span class="nx">o</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">q</span><span class="p">,</span><span class="nx">ea</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">fa</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+</span><span class="mi">4</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">++</span><span class="p">;</span><span class="nx">K</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">R</span><span class="o">++</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;d&quot;</span><span class="p">,</span><span class="s2">&quot;M &quot;</span><span class="o">+</span><span class="nx">Y</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">Y</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="s2">&quot; L &quot;</span><span class="o">+</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span></div><div class='line' id='LC261'><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">F</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="s2">&quot; L &quot;</span><span class="o">+</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="s2">&quot; L &quot;</span><span class="o">+</span><span class="nx">fa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nx">fa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="s2">&quot;z&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">)</span><span class="nx">s</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span><span class="nx">s</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">s</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">s</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">s</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">))}</span><span class="k">else</span> <span class="nx">s</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">){</span><span class="nx">z</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">C</span><span class="p">.</span><span class="nx">__2near</span><span class="o">/</span></div><div class='line' id='LC262'><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">__farPlusNear</span><span class="o">-</span><span class="nx">A</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">__farMinusNear</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">z</span><span class="p">)}</span><span class="k">else</span> <span class="nx">C</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">normalWorld</span><span class="p">.</span><span class="nx">z</span><span class="p">));</span><span class="nx">C</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;style&quot;</span><span class="p">,</span><span class="s2">&quot;fill: none; stroke: &quot;</span><span class="o">+</span><span class="nx">s</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;; stroke-width: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">+</span><span class="s2">&quot;; stroke-opacity: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">opacity</span><span class="o">+</span><span class="s2">&quot;; stroke-linecap: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">+</span><span class="s2">&quot;; stroke-linejoin: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">K</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;style&quot;</span><span class="p">,</span><span class="s2">&quot;fill: &quot;</span><span class="o">+</span><span class="nx">s</span><span class="p">.</span><span class="nx">getContextStyle</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;; fill-opacity: &quot;</span><span class="o">+</span><span class="nx">C</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">K</span><span class="p">)}}}}}};</span></div><div class='line' id='LC263'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="o">=</span><span class="p">{</span><span class="nx">fog_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif&quot;</span><span class="p">,</span><span class="nx">fog_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC264'><span class="nx">envmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#endif&quot;</span><span class="p">,</span><span class="nx">envmap_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_ENVMAP\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, reflectivity );\n} else {\ngl_FragColor.xyz = gl_FragColor.xyz * cubeColor.xyz;\n}\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC265'><span class="nx">envmap_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif&quot;</span><span class="p">,</span><span class="nx">envmap_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = mat3( objectMatrix[ 0 ].xyz, objectMatrix[ 1 ].xyz, objectMatrix[ 2 ].xyz ) * normal;\nif ( useRefract ) {\nvReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );\n} else {\nvReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );\n}\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC266'><span class="nx">map_particle_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\nuniform sampler2D map;\n#endif&quot;</span><span class="p">,</span><span class="nx">map_particle_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, gl_PointCoord );\n#endif&quot;</span><span class="p">,</span><span class="nx">map_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif&quot;</span><span class="p">,</span><span class="nx">map_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\nvarying vec2 vUv;\nuniform sampler2D map;\n#endif&quot;</span><span class="p">,</span><span class="nx">map_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif&quot;</span><span class="p">,</span><span class="nx">map_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( map, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( map, vUv );\n#endif\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC267'><span class="nx">lightmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif&quot;</span><span class="p">,</span><span class="nx">lightmap_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif&quot;</span><span class="p">,</span><span class="nx">lightmap_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif&quot;</span><span class="p">,</span><span class="nx">lightmap_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif&quot;</span><span class="p">,</span><span class="nx">lights_lambert_pars_vertex</span><span class="o">:</span><span class="s2">&quot;uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC268'><span class="nx">lights_lambert_vertex</span><span class="o">:</span><span class="s2">&quot;vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nlVector = normalize( lVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - mPosition.xyz ) );\nif ( spotEffect &gt; spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC269'><span class="nx">lights_phong_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nvarying vec3 vWorldPosition;\n#endif&quot;</span><span class="p">,</span><span class="nx">lights_phong_vertex</span><span class="o">:</span><span class="s2">&quot;#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nvWorldPosition = mPosition.xyz;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC270'><span class="nx">lights_phong_pars_fragment</span><span class="o">:</span><span class="s2">&quot;uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;&quot;</span><span class="p">,</span></div><div class='line' id='LC271'><span class="nx">lights_phong_fragment</span><span class="o">:</span><span class="s2">&quot;vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect &gt; spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS &gt; 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS &gt; 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC272'><span class="nx">color_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif&quot;</span><span class="p">,</span><span class="nx">color_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif&quot;</span><span class="p">,</span><span class="nx">color_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif&quot;</span><span class="p">,</span><span class="nx">color_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif&quot;</span><span class="p">,</span><span class="nx">skinning_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SKINNING\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n#endif&quot;</span><span class="p">,</span><span class="nx">skinning_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SKINNING\ngl_Position  = ( boneGlobalMatrices[ int( skinIndex.x ) ] * skinVertexA ) * skinWeight.x;\ngl_Position += ( boneGlobalMatrices[ int( skinIndex.y ) ] * skinVertexB ) * skinWeight.y;\ngl_Position  = projectionMatrix * modelViewMatrix * gl_Position;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC273'><span class="nx">morphtarget_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif&quot;</span><span class="p">,</span><span class="nx">morphtarget_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC274'><span class="nx">default_vertex</span><span class="o">:</span><span class="s2">&quot;#ifndef USE_MORPHTARGETS\n#ifndef USE_SKINNING\ngl_Position = projectionMatrix * mvPosition;\n#endif\n#endif&quot;</span><span class="p">,</span><span class="nx">morphnormal_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\nvec3 transformedNormal = normalMatrix * morphedNormal;\n#else\nvec3 transformedNormal = normalMatrix * normal;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC275'><span class="nx">shadowmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif&quot;</span><span class="p">,</span><span class="nx">shadowmap_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x &gt;= 0.0, shadowCoord.x &lt;= 1.0, shadowCoord.y &gt;= 0.0, shadowCoord.y &lt;= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z &lt;= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z &lt;= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#ifdef SHADOWMAP_SOFT\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth &lt; shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum &amp;&amp; inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC276'><span class="nx">shadowmap_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif&quot;</span><span class="p">,</span><span class="nx">shadowmap_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SHADOWMAP\nfor( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\n#ifdef USE_MORPHTARGETS\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( morphed, 1.0 );\n#else\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( position, 1.0 );\n#endif\n}\n#endif&quot;</span><span class="p">,</span><span class="nx">alphatest_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef ALPHATEST\nif ( gl_FragColor.a &lt; ALPHATEST ) discard;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC277'><span class="nx">linear_to_gamma_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif&quot;</span><span class="p">};</span></div><div class='line' id='LC278'><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">merge</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">d</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">]}</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]){</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">clone</span><span class="p">()</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span><span class="o">:</span><span class="nx">d</span><span class="p">}}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}};</span></div><div class='line' id='LC279'><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="o">=</span><span class="p">{</span><span class="nx">common</span><span class="o">:</span><span class="p">{</span><span class="nx">diffuse</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">15658734</span><span class="p">)},</span><span class="nx">opacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">map</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">offsetRepeat</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v4&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">lightMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">envMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">flipEnvMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:-</span><span class="mi">1</span><span class="p">},</span><span class="nx">useRefract</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">reflectivity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">refractionRatio</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">0.98</span><span class="p">},</span><span class="nx">combine</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">morphTargetInfluences</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">}},</span><span class="nx">fog</span><span class="o">:</span><span class="p">{</span><span class="nx">fogDensity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span></div><div class='line' id='LC280'><span class="nx">value</span><span class="o">:</span><span class="mf">2.5</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">},</span><span class="nx">fogNear</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">fogFar</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">},</span><span class="nx">fogColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)}},</span><span class="nx">lights</span><span class="o">:</span><span class="p">{</span><span class="nx">ambientLightColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">directionalLightDirection</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">directionalLightColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">pointLightColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">pointLightPosition</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">pointLightDistance</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightPosition</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightDirection</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightDistance</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span></div><div class='line' id='LC281'><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightAngle</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightExponent</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]}},</span><span class="nx">particle</span><span class="o">:</span><span class="p">{</span><span class="nx">psColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">15658734</span><span class="p">)},</span><span class="nx">opacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">size</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">scale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">map</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">fogDensity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">2.5</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">},</span><span class="nx">fogNear</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">fogFar</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">},</span><span class="nx">fogColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)}},</span><span class="nx">shadowmap</span><span class="o">:</span><span class="p">{</span><span class="nx">shadowMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;tv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">6</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="p">[]},</span><span class="nx">shadowMapSize</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v2v&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">shadowBias</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span></div><div class='line' id='LC282'><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">shadowDarkness</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">shadowMatrix</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;m4v&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]}}};</span></div><div class='line' id='LC283'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="o">=</span><span class="p">{</span><span class="nx">depth</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{</span><span class="nx">mNear</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">mFar</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">},</span><span class="nx">opacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">}},</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}&quot;</span><span class="p">,</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}&quot;</span><span class="p">},</span><span class="nx">normal</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{</span><span class="nx">opacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span></div><div class='line' id='LC284'><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">}},</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalMatrix * normal;\ngl_Position = projectionMatrix * mvPosition;\n}&quot;</span><span class="p">,</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}&quot;</span><span class="p">},</span><span class="nx">basic</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">common</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_vertex</span><span class="p">,</span></div><div class='line' id='LC285'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span></div><div class='line' id='LC286'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 diffuse;\nuniform float opacity;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( diffuse, opacity );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">alphatest_fragment</span><span class="p">,</span></div><div class='line' id='LC287'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">linear_to_gamma_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">lambert</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">common</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">lights</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">,{</span><span class="nx">ambient</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)},</span><span class="nx">emissive</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">)},</span><span class="nx">wrapRGB</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v3&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span></div><div class='line' id='LC288'><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)}}]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;varying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_lambert_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_vertex</span><span class="p">,</span></div><div class='line' id='LC289'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphnormal_vertex</span><span class="p">,</span><span class="s2">&quot;#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_lambert_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC290'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">alphatest_fragment</span><span class="p">,</span><span class="s2">&quot;#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC291'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">linear_to_gamma_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">phong</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">common</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">lights</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">,{</span><span class="nx">ambient</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)},</span><span class="nx">emissive</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">)},</span><span class="nx">specular</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">1118481</span><span class="p">)},</span></div><div class='line' id='LC292'><span class="nx">shininess</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">30</span><span class="p">},</span><span class="nx">wrapRGB</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v3&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)}}]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;varying vec3 vViewPosition;\nvarying vec3 vNormal;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_phong_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );&quot;</span><span class="p">,</span></div><div class='line' id='LC293'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span><span class="s2">&quot;#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif\nvViewPosition = -mvPosition.xyz;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphnormal_vertex</span><span class="p">,</span><span class="s2">&quot;vNormal = transformedNormal;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_phong_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span></div><div class='line' id='LC294'><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_phong_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );&quot;</span><span class="p">,</span></div><div class='line' id='LC295'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">alphatest_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_phong_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">linear_to_gamma_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">particle_basic</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">particle</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform float size;\nuniform float scale;&quot;</span><span class="p">,</span></div><div class='line' id='LC296'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span><span class="s2">&quot;vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 psColor;\nuniform float opacity;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span></div><div class='line' id='LC297'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_particle_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( psColor, opacity );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_particle_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">alphatest_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">depthRGBA</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{},</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );&quot;</span><span class="p">,</span></div><div class='line' id='LC298'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}&quot;</span><span class="p">}};</span></div><div class='line' id='LC299'><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span> <span class="k">in</span> <span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglInitialized</span><span class="o">||</span><span class="nx">f</span><span class="p">.</span><span class="nx">createUniqueBuffers</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglInitialized</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;v2&quot;</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="mi">2</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;v3&quot;</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="mi">3</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;v4&quot;</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="mi">4</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;c&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">3</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)}}}</span></div><div class='line' id='LC300'><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">]}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">?</span><span class="kc">false</span><span class="o">:</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="o">?</span><span class="kc">true</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span></div><div class='line' id='LC301'><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__sortArray</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">){</span><span class="nx">xa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">Ba</span><span class="p">);</span><span class="nx">xa</span><span class="p">.</span><span class="nx">multiplySelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">$a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">xa</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">$a</span><span class="p">);</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="nx">$a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">d</span><span class="p">]}</span><span class="nx">n</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]});</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">1</span><span class="p">]];</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">1</span><span class="p">]];</span><span class="nx">m</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">m</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">m</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span></div><div class='line' id='LC302'><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;vertices&quot;</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">g</span><span class="p">]}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">3</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;c&quot;</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">4</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span></div><div class='line' id='LC303'><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">4</span><span class="p">}}}}}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">m</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">m</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">m</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;vertices&quot;</span><span class="p">)){</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span></div><div class='line' id='LC304'><span class="mi">3</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;c&quot;</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">4</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">4</span><span class="p">}}}}}</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></div><div class='line' id='LC305'><span class="nx">m</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">b</span><span class="p">)}}}}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">ea</span><span class="o">=</span><span class="nx">U</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">Y</span><span class="o">=</span><span class="nx">F</span><span class="o">=</span><span class="nx">O</span><span class="o">=</span><span class="nx">ia</span><span class="o">=</span><span class="nx">Ka</span><span class="o">=</span><span class="nx">Ma</span><span class="o">=</span><span class="nx">Q</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">Ta</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">hb</span><span class="p">,</span><span class="nx">Cb</span><span class="p">);</span><span class="nx">ea</span><span class="o">=</span><span class="nx">U</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">Y</span><span class="o">=</span><span class="nx">F</span><span class="o">=</span><span class="nx">O</span><span class="o">=</span><span class="nx">ia</span><span class="o">=</span><span class="nx">Ka</span><span class="o">=</span><span class="nx">Ma</span><span class="o">=</span><span class="nx">Q</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">Ta</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="mi">1</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">m</span><span class="o">!==</span><span class="nx">b</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="nx">l</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">m</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">render</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span></div><div class='line' id='LC306'><span class="nx">i</span><span class="p">.</span><span class="nx">buffer</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">);</span><span class="nx">u</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="p">)}</span><span class="nx">G</span><span class="p">.</span><span class="nx">setObjectFaces</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">k</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="o">?</span><span class="nx">G</span><span class="p">.</span><span class="nx">renderBufferDirect</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="nx">G</span><span class="p">.</span><span class="nx">renderBuffer</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">j</span><span class="p">)}}}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">visible</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span></div><div class='line' id='LC307'><span class="nx">h</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">);</span><span class="nx">u</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="p">)}</span><span class="nx">G</span><span class="p">.</span><span class="nx">renderImmediateObject</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">)}}}</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">buffer</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">opaque</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">transparent</span><span class="o">:</span><span class="kc">null</span><span class="p">})}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">needsUpdate</span><span class="p">)</span><span class="k">return</span> <span class="kc">true</span><span class="p">;</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">object</span><span class="o">===</span></div><div class='line' id='LC308'><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">){</span><span class="nx">G</span><span class="p">.</span><span class="nx">initMaterial</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">&amp;&amp;!</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">!==</span><span class="nx">U</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">useProgram</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">U</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="o">!==</span><span class="nx">Y</span><span class="p">){</span><span class="nx">Y</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">||</span><span class="nx">a</span><span class="o">!==</span></div><div class='line' id='LC309'><span class="nx">ea</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="p">);</span><span class="nx">a</span><span class="o">!==</span><span class="nx">ea</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">ea</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">fog</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">fogColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">fogNear</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">near</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">fogFar</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">far</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">fogDensity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">density</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">lights</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Ta</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">Qa</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">positions</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">positions</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">distances</span><span class="p">,</span></div><div class='line' id='LC310'><span class="nx">z</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">positions</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">distances</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">directions</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">angles</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">exponents</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Q</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">k</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">l</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">k</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">){</span><span class="nx">q</span><span class="o">=</span><span class="nx">K</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="p">){</span><span class="nx">s</span><span class="p">[</span><span class="nx">q</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">s</span><span class="p">[</span><span class="nx">q</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">s</span><span class="p">[</span><span class="nx">q</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">s</span><span class="p">[</span><span class="nx">q</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">s</span><span class="p">[</span><span class="nx">q</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">s</span><span class="p">[</span><span class="nx">q</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">o</span><span class="p">}</span><span class="nx">aa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span></div><div class='line' id='LC311'><span class="nx">aa</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span><span class="nx">aa</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">t</span><span class="p">[</span><span class="nx">q</span><span class="p">]</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="nx">q</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="nx">q</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">K</span><span class="o">=</span><span class="nx">K</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">k</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">){</span><span class="nx">O</span><span class="o">=</span><span class="nx">Q</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="p">){</span><span class="nx">u</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">u</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">u</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">u</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">u</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">u</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">o</span><span class="p">}</span><span class="nx">p</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">();</span><span class="nx">v</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">v</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">v</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">w</span><span class="p">[</span><span class="nx">Q</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">Q</span><span class="o">=</span><span class="nx">Q</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">k</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">){</span><span class="nx">O</span><span class="o">=</span><span class="nx">M</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="p">){</span><span class="nx">z</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">z</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">z</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">o</span><span class="o">*</span><span class="nx">o</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">z</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">z</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">o</span><span class="p">;</span><span class="nx">z</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">o</span><span class="p">}</span><span class="nx">p</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">();</span></div><div class='line' id='LC312'><span class="nx">A</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">A</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">A</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">C</span><span class="p">[</span><span class="nx">M</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">aa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="nx">aa</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span><span class="nx">aa</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">D</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">D</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">D</span><span class="p">[</span><span class="nx">O</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="nx">M</span><span class="p">]</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">angle</span><span class="p">);</span><span class="nx">J</span><span class="p">[</span><span class="nx">M</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">exponent</span><span class="p">;</span><span class="nx">M</span><span class="o">=</span><span class="nx">M</span><span class="o">+</span><span class="mi">1</span><span class="p">}}}</span><span class="nx">c</span><span class="o">=</span><span class="nx">K</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">s</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">Q</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">u</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">M</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">z</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">K</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">Q</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">M</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">ambient</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">ambient</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">ambient</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">Ta</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="nx">c</span><span class="o">=</span><span class="nx">Qa</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">ambientLightColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">ambient</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">directionalLightColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">colors</span><span class="p">;</span></div><div class='line' id='LC313'><span class="nx">j</span><span class="p">.</span><span class="nx">directionalLightDirection</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">positions</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">pointLightColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">colors</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">pointLightPosition</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">positions</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">pointLightDistance</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">distances</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">spotLightColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">colors</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">spotLightPosition</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">positions</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">spotLightDistance</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">distances</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">spotLightDirection</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">directions</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">spotLightAngle</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">angles</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">spotLightExponent</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">exponents</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span></div><div class='line' id='LC314'><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">diffuse</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">diffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">;(</span><span class="nx">j</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">offsetRepeat</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">envMap</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">flipEnvMap</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="o">?</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">reflectivity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">reflectivity</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">combine</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">combine</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">useRefract</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span></div><div class='line' id='LC315'><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span><span class="p">.</span><span class="nx">mapping</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeRefractionMapping</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">diffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">psColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">size</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">height</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">texture</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">shininess</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">shininess</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">ambient</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">emissive</span><span class="p">);</span></div><div class='line' id='LC316'><span class="nx">j</span><span class="p">.</span><span class="nx">specular</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">specular</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">j</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">ambient</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">emissive</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">specular</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">specular</span><span class="p">}</span><span class="nx">d</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">ambient</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">emissive</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">j</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">ambient</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">emissive</span><span class="p">}</span><span class="nx">d</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">mNear</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span></div><div class='line' id='LC317'><span class="nx">a</span><span class="p">.</span><span class="nx">near</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">mFar</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">far</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="o">&amp;&amp;!</span><span class="nx">d</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">||</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">&amp;&amp;!</span><span class="nx">l</span><span class="p">.</span><span class="nx">shadowCascade</span><span class="p">)){</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowMap</span><span class="p">.</span><span class="nx">texture</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">shadowMap</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowBias</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">shadowBias</span><span class="p">;</span></div><div class='line' id='LC318'><span class="nx">c</span><span class="o">++</span><span class="p">}}}</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">uniformsList</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]]){</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">m</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;i&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;f&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;v2&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;v3&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;v4&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform4f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;c&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;fv1&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform1fv</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;fv&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform3fv</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;v2v&quot;</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span></div><div class='line' id='LC319'><span class="nx">n</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">y</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform2fv</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;v3v&quot;</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">z</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform3fv</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;v4v&quot;</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">z</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">w</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform4fv</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;m4&quot;</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span></div><div class='line' id='LC320'><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">flattenToArray</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;m4v&quot;</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)</span><span class="nx">k</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">flattenToArrayOffset</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">,</span><span class="nx">m</span><span class="o">*</span><span class="mi">16</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;t&quot;</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">texture</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">image</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">6</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">6</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span></div><div class='line' id='LC321'><span class="nx">k</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">autoScaleCubemaps</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">image</span><span class="p">[</span><span class="nx">l</span><span class="p">];</span><span class="nx">t</span><span class="o">=</span><span class="nx">ib</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">width</span><span class="o">&lt;=</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">height</span><span class="o">&lt;=</span><span class="nx">t</span><span class="p">)){</span><span class="nx">u</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">width</span><span class="o">*</span><span class="nx">t</span><span class="o">/</span><span class="nx">u</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">height</span><span class="o">*</span><span class="nx">t</span><span class="o">/</span><span class="nx">u</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">u</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="nx">u</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">u</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">r</span><span class="o">=</span><span class="nx">u</span><span class="p">}}</span><span class="k">else</span> <span class="nx">r</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">image</span><span class="p">[</span><span class="nx">l</span><span class="p">];</span><span class="nx">m</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">}</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">width</span><span class="o">&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">height</span><span class="o">&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">format</span><span class="p">);</span><span class="nx">r</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="nx">y</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span></div><div class='line' id='LC322'><span class="nx">h</span><span class="p">,</span><span class="nx">m</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="o">+</span><span class="nx">l</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">k</span><span class="p">[</span><span class="nx">l</span><span class="p">]);</span><span class="nx">h</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">onUpdate</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">onUpdate</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="nx">i</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">k</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">k</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">)}</span><span class="k">else</span> <span class="nx">G</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;tv&quot;</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="p">[];</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">texture</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span></div><div class='line' id='LC323'><span class="nx">n</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">+</span><span class="nx">m</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform1iv</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">texture</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)(</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">texture</span><span class="p">[</span><span class="nx">m</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">m</span><span class="p">])}}</span><span class="k">if</span><span class="p">((</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">cameraPosition</span><span class="o">!==</span><span class="kc">null</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">cameraPosition</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">)}(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinning</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">viewMatrix</span><span class="o">!==</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">viewMatrix</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="p">);</span></div><div class='line' id='LC324'><span class="nx">d</span><span class="p">.</span><span class="nx">skinning</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">boneGlobalMatrices</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="p">)}</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">modelViewMatrix</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniformMatrix3fv</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">objectMatrix</span><span class="o">!==</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">objectMatrix</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="p">.</span><span class="nx">transpose</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Ra</span><span class="o">!==</span></div><div class='line' id='LC325'><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">POLYGON_OFFSET_FILL</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">POLYGON_OFFSET_FILL</span><span class="p">);</span><span class="nx">Ra</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">La</span><span class="o">!==</span><span class="nx">b</span><span class="o">||</span><span class="nx">Sa</span><span class="o">!==</span><span class="nx">c</span><span class="p">)){</span><span class="nx">i</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">La</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">c</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;fragment&quot;</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;vertex&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">));</span><span class="nx">i</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">.</span><span class="nx">getShaderParameter</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">COMPILE_STATUS</span><span class="p">)){</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">getShaderInfoLog</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_S</span><span class="p">,</span><span class="nx">H</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">wrapS</span><span class="p">));</span><span class="nx">i</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></div><div class='line' id='LC326'><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_T</span><span class="p">,</span><span class="nx">H</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">wrapT</span><span class="p">));</span><span class="nx">i</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_MAG_FILTER</span><span class="p">,</span><span class="nx">H</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">));</span><span class="nx">i</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_MIN_FILTER</span><span class="p">,</span><span class="nx">H</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">))}</span><span class="k">else</span><span class="p">{</span><span class="nx">i</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_S</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_T</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_MAG_FILTER</span><span class="p">,</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">));</span><span class="nx">i</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_MIN_FILTER</span><span class="p">,</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">))}}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindRenderbuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">renderbufferStorage</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">DEPTH_COMPONENT16</span><span class="p">,</span></div><div class='line' id='LC327'><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">framebufferRenderbuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">DEPTH_ATTACHMENT</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">renderbufferStorage</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">DEPTH_STENCIL</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">framebufferRenderbuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">DEPTH_STENCIL_ATTACHMENT</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span> <span class="nx">i</span><span class="p">.</span><span class="nx">renderbufferStorage</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">RGBA4</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="o">:</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapNearestFilter</span><span class="o">:</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapLinearFilter</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">LINEAR</span><span class="p">}}</span></div><div class='line' id='LC328'><span class="kd">function</span> <span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">REPEAT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MirroredRepeatWrapping</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">MIRRORED_REPEAT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapNearestFilter</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">NEAREST_MIPMAP_NEAREST</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapLinearFilter</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">NEAREST_MIPMAP_LINEAR</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">LINEAR</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapNearestFilter</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">LINEAR_MIPMAP_NEAREST</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapLinearFilter</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">LINEAR_MIPMAP_LINEAR</span><span class="p">;</span></div><div class='line' id='LC329'><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ByteType</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">BYTE</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedByteType</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">UNSIGNED_BYTE</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShortType</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">SHORT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShortType</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">IntType</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">INT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedIntType</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">UNSIGNED_INT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FloatType</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AlphaFormat</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">ALPHA</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBFormat</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">RGB</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LuminanceFormat</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">LUMINANCE</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LuminanceAlphaFormat</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">LUMINANCE_ALPHA</span><span class="p">;</span></div><div class='line' id='LC330'><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AddEquation</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractEquation</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_SUBTRACT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ReverseSubtractEquation</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_REVERSE_SUBTRACT</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ZeroFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">ZERO</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OneFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">ONE</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcColorFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">SRC_COLOR</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcColorFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_COLOR</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">SRC_ALPHA</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcAlphaFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_ALPHA</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DstAlphaFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">DST_ALPHA</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusDstAlphaFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">ONE_MINUS_DST_ALPHA</span><span class="p">;</span></div><div class='line' id='LC331'><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DstColorFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">DST_COLOR</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusDstColorFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">ONE_MINUS_DST_COLOR</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaSaturateFactor</span><span class="o">:</span><span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">SRC_ALPHA_SATURATE</span><span class="p">}</span><span class="k">return</span> <span class="mi">0</span><span class="p">}</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">REVISION</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{},</span><span class="nx">E</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">canvas</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">canvas</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">),</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">precision</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">precision</span><span class="o">:</span><span class="s2">&quot;highp&quot;</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">alpha</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">alpha</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">premultipliedAlpha</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">premultipliedAlpha</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">antialias</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">antialias</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencil</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencil</span><span class="o">:</span></div><div class='line' id='LC332'><span class="kc">true</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">preserveDrawingBuffer</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">preserveDrawingBuffer</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">D</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearAlpha</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearAlpha</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">maxLights</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">maxLights</span><span class="o">:</span><span class="mi">4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">E</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoUpdateScene</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoUpdateObjects</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearStencil</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearDepth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearColor</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">physicallyBasedShading</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">gammaOutput</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapCullFrontFaces</span><span class="o">=</span></div><div class='line' id='LC333'><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapSoft</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapAutoUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapCascade</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapDebug</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="o">=</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphNormals</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoScaleCubemaps</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPre</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPost</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">info</span><span class="o">=</span><span class="p">{</span><span class="nx">memory</span><span class="o">:</span><span class="p">{</span><span class="nx">programs</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">geometries</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">textures</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">render</span><span class="o">:</span><span class="p">{</span><span class="nx">calls</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">faces</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">points</span><span class="o">:</span><span class="mi">0</span><span class="p">}};</span><span class="kd">var</span> <span class="nx">G</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="o">=</span><span class="p">[],</span><span class="nx">U</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Y</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">ea</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">fa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">ia</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">O</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">Q</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">Z</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">$</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">ha</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">Ma</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">Ka</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">Ra</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">La</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Sa</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Na</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Kb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">lb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">gb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Lb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">hb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Cb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Wa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span></div><div class='line' id='LC334'><span class="nx">Ba</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">xa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="nx">aa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">Ta</span><span class="o">=</span><span class="kc">true</span><span class="p">,</span><span class="nx">Qa</span><span class="o">=</span><span class="p">{</span><span class="nx">ambient</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nx">directional</span><span class="o">:</span><span class="p">{</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">colors</span><span class="o">:</span><span class="p">[],</span><span class="nx">positions</span><span class="o">:</span><span class="p">[]},</span><span class="nx">point</span><span class="o">:</span><span class="p">{</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">colors</span><span class="o">:</span><span class="p">[],</span><span class="nx">positions</span><span class="o">:</span><span class="p">[],</span><span class="nx">distances</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spot</span><span class="o">:</span><span class="p">{</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">colors</span><span class="o">:</span><span class="p">[],</span><span class="nx">positions</span><span class="o">:</span><span class="p">[],</span><span class="nx">distances</span><span class="o">:</span><span class="p">[],</span><span class="nx">directions</span><span class="o">:</span><span class="p">[],</span><span class="nx">angles</span><span class="o">:</span><span class="p">[],</span><span class="nx">exponents</span><span class="o">:</span><span class="p">[]}};</span><span class="nx">i</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;experimental-webgl&quot;</span><span class="p">,{</span><span class="nx">alpha</span><span class="o">:</span><span class="nx">v</span><span class="p">,</span><span class="nx">premultipliedAlpha</span><span class="o">:</span><span class="nx">A</span><span class="p">,</span><span class="nx">antialias</span><span class="o">:</span><span class="nx">J</span><span class="p">,</span><span class="nx">stencil</span><span class="o">:</span><span class="nx">K</span><span class="p">,</span><span class="nx">preserveDrawingBuffer</span><span class="o">:</span><span class="nx">R</span><span class="p">})))</span><span class="k">throw</span><span class="s2">&quot;Error creating WebGL context.&quot;</span><span class="p">;}</span><span class="k">catch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="nx">a</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;OES_texture_float&quot;</span><span class="p">)</span><span class="o">||</span></div><div class='line' id='LC335'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer: Float textures not supported.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">}();</span><span class="nx">i</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">clearDepth</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">clearStencil</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">depthFunc</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">LEQUAL</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CCW</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BACK</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">SRC_ALPHA</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_ALPHA</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">P</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">P</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">P</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">D</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="kd">var</span> <span class="nx">oa</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">MAX_VERTEX_TEXTURE_IMAGE_UNITS</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">MAX_TEXTURE_SIZE</span><span class="p">);</span><span class="kd">var</span> <span class="nx">ib</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">MAX_CUBE_MAP_TEXTURE_SIZE</span><span class="p">);</span></div><div class='line' id='LC336'><span class="k">this</span><span class="p">.</span><span class="nx">getContext</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">i</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">supportsVertexTextures</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">oa</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">setSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">E</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">E</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">E</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">E</span><span class="p">.</span><span class="nx">height</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setViewport</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">Kb</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">lb</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">gb</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">Lb</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">viewport</span><span class="p">(</span><span class="nx">Kb</span><span class="p">,</span><span class="nx">lb</span><span class="p">,</span><span class="nx">gb</span><span class="p">,</span><span class="nx">Lb</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setScissor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">scissor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">enableScissorTest</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">SCISSOR_TEST</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">SCISSOR_TEST</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColorHex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">P</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">P</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">P</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">P</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">D</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></div><div class='line' id='LC337'><span class="nx">b</span><span class="p">){</span><span class="nx">P</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">P</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">P</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">P</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">D</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">getClearColor</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">P</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getClearAlpha</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">D</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">a</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">|</span><span class="nx">i</span><span class="p">.</span><span class="nx">COLOR_BUFFER_BIT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">b</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">|</span><span class="nx">i</span><span class="p">.</span><span class="nx">DEPTH_BUFFER_BIT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">c</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">|</span><span class="nx">i</span><span class="p">.</span><span class="nx">STENCIL_BUFFER_BIT</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">clear</span><span class="p">(</span><span class="nx">d</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">clearTarget</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">addPostPlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPost</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">addPrePlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPre</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></div><div class='line' id='LC338'><span class="k">this</span><span class="p">.</span><span class="nx">deallocateObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">delete</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">;</span><span class="k">delete</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="p">;</span><span class="k">delete</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_normalMatrixArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_modelViewMatrixArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_objectMatrixArray</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="p">);</span></div><div class='line' id='LC339'><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglSkinVertexABuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglSkinVertexBBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">d</span><span class="p">])}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">[</span><span class="nx">d</span><span class="p">])}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span></div><div class='line' id='LC340'><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span> <span class="k">in</span> <span class="nx">c</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">buffer</span><span class="p">)}</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">--</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">--</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">--</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span></div><div class='line' id='LC341'><span class="nx">i</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">--</span><span class="p">}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">deallocateTexture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteTexture</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">textures</span><span class="o">--</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">deallocateRenderTarget</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteTexture</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteFramebuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteRenderbuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">[</span><span class="nx">b</span><span class="p">])}</span><span class="k">else</span><span class="p">{</span><span class="nx">i</span><span class="p">.</span><span class="nx">deleteFramebuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">);</span></div><div class='line' id='LC342'><span class="nx">i</span><span class="p">.</span><span class="nx">deleteRenderbuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">)}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">updateShadowMap</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">U</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">Y</span><span class="o">=</span><span class="nx">F</span><span class="o">=</span><span class="nx">Ka</span><span class="o">=</span><span class="nx">Ma</span><span class="o">=</span><span class="nx">Q</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">Ta</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">O</span><span class="o">=</span><span class="nx">ia</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapPlugin</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">renderBufferImmediate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasPos</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionArray</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span></div><div class='line' id='LC343'><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasNormal</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">count</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="mi">9</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalArray</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">4</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">5</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">6</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">7</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">8</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">j</span><span class="o">+</span><span class="nx">k</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="nx">m</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">}}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalArray</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span></div><div class='line' id='LC344'><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="nx">i</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">count</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">renderBufferDirect</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">visible</span><span class="o">!==</span><span class="kc">false</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">id</span><span class="o">*</span><span class="mi">16777215</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">!==</span><span class="nx">F</span><span class="p">){</span><span class="nx">F</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">offsets</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="o">++</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexPositionBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexPositionBuffer</span><span class="p">.</span><span class="nx">itemSize</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">index</span><span class="o">*</span><span class="mi">12</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormalBuffer</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></div><div class='line' id='LC345'><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormalBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormalBuffer</span><span class="p">.</span><span class="nx">itemSize</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">index</span><span class="o">*</span><span class="mi">12</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexUvBuffer</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexUvBuffer</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexUvBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexUvBuffer</span><span class="p">.</span><span class="nx">itemSize</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">index</span><span class="o">*</span><span class="mi">8</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="p">)}</span><span class="k">else</span> <span class="nx">i</span><span class="p">.</span><span class="nx">disableVertexAttribArray</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColorBuffer</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColorBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColorBuffer</span><span class="p">.</span><span class="nx">itemSize</span><span class="p">,</span></div><div class='line' id='LC346'><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">index</span><span class="o">*</span><span class="mi">16</span><span class="p">)}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexIndexBuffer</span><span class="p">)}</span><span class="nx">i</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">count</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">start</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">count</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">+</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">count</span><span class="o">/</span><span class="mi">3</span><span class="p">}}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">renderBuffer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">visible</span><span class="o">!==</span><span class="kc">false</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">id</span><span class="o">*</span><span class="mi">16777215</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">!==</span><span class="nx">F</span><span class="p">){</span><span class="nx">F</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">position</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></div><div class='line' id='LC347'><span class="nx">e</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="o">!==-</span><span class="mi">1</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetForcedOrder</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetForcedOrder</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span></div><div class='line' id='LC348'><span class="nx">d</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">g</span><span class="p">]]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">g</span><span class="p">]]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">g</span><span class="p">]];</span><span class="nx">g</span><span class="o">++</span><span class="p">}}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="p">]</span><span class="o">=</span><span class="kc">true</span><span class="p">);</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="p">;){</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span></div><div class='line' id='LC349'><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">j</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">&gt;</span><span class="nx">k</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">l</span><span class="p">]}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">l</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">[</span><span class="nx">l</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">k</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">}}</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="o">!==</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">uniform1fv</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span></div><div class='line' id='LC350'><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">color</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">normal</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">tangent</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></div><div class='line' id='LC351'><span class="nx">e</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">tangent</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv</span><span class="p">)}</span><span class="k">else</span> <span class="nx">i</span><span class="p">.</span><span class="nx">disableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv2</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv2</span><span class="p">)}</span><span class="k">else</span> <span class="nx">i</span><span class="p">.</span><span class="nx">disableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv2</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinning</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinVertexA</span><span class="o">&gt;=</span></div><div class='line' id='LC352'><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinVertexB</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinIndex</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinWeight</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglSkinVertexABuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinVertexA</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglSkinVertexBBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinVertexB</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinIndex</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinWeight</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span></div><div class='line' id='LC353'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">!==</span><span class="nx">Na</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">lineWidth</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">Na</span><span class="o">=</span><span class="nx">d</span><span class="p">}</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">LINES</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglLineCount</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglFaceCount</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglFaceCount</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglFaceCount</span><span class="o">/</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span></div><div class='line' id='LC354'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineStrip</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">LINE_STRIP</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">LINES</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">!==</span><span class="nx">Na</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">lineWidth</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">Na</span><span class="o">=</span><span class="nx">d</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglLineCount</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">POINTS</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglParticleCount</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">points</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglParticleCount</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TRIANGLE_STRIP</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglVertexCount</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span></div><div class='line' id='LC355'><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="nx">Y</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">Ta</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Camera hasn&#39;t been added to a Scene. Adding it...&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">autoUpdateScene</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">flattenToArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">flattenToArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="p">);</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span></div><div class='line' id='LC356'><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="p">(</span><span class="nx">Ba</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">autoUpdateObjects</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">initWebGLObjects</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">h</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPre</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="p">(</span><span class="nx">c</span><span class="p">);(</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">||</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearColor</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearDepth</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearStencil</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">k</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">||</span><span class="nx">k</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">)</span><span class="o">||!</span><span class="nx">k</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">||</span></div><div class='line' id='LC357'><span class="nx">Wa</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">k</span><span class="p">))){</span><span class="nx">r</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">t</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">transparent</span><span class="p">){</span><span class="nx">o</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">o</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="kc">null</span><span class="p">}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">transparent</span><span class="p">){</span><span class="nx">o</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">o</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="nx">f</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">renderDepth</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">renderDepth</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">$a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">$a</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">$a</span><span class="p">.</span><span class="nx">z</span><span class="p">}}}</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC358'><span class="nx">m</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">visible</span><span class="p">){</span><span class="nx">r</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">transparent</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="kc">null</span><span class="p">}}}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">);</span><span class="nx">u</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="p">);</span><span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="kc">true</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">,</span></div><div class='line' id='LC359'><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">);</span><span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="kc">true</span><span class="p">,</span><span class="s2">&quot;opaque&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="kc">false</span><span class="p">);</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">,</span><span class="s2">&quot;opaque&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="kc">false</span><span class="p">);</span><span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="s2">&quot;transparent&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">,</span><span class="s2">&quot;transparent&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="kc">true</span><span class="p">)}</span><span class="nx">h</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPost</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">);</span></div><div class='line' id='LC360'><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="kc">null</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="kc">null</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="kc">true</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">renderImmediateObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">F</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">G</span><span class="p">.</span><span class="nx">setObjectFaces</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">immediateRenderCallback</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">immediateRenderCallback</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">Wa</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">G</span><span class="p">.</span><span class="nx">renderBufferImmediate</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">shading</span><span class="p">)})};</span><span class="k">this</span><span class="p">.</span><span class="nx">initWebGLObjects</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="o">=</span></div><div class='line' id='LC361'><span class="p">[];</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglSprites</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFlares</span><span class="o">=</span><span class="p">[]}</span><span class="k">for</span><span class="p">(;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">length</span><span class="p">;){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglInit</span><span class="p">){</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="p">{},</span><span class="nx">C</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="o">=</span><span class="p">{};</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span></div><div class='line' id='LC362'><span class="nx">t</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="nx">u</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">s</span><span class="p">];</span><span class="nx">v</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">v</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span><span class="nx">A</span><span class="p">[</span><span class="nx">z</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">A</span><span class="p">[</span><span class="nx">z</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">hash</span><span class="o">:</span><span class="nx">z</span><span class="p">,</span><span class="nx">counter</span><span class="o">:</span><span class="mi">0</span><span class="p">});</span><span class="nx">y</span><span class="o">=</span><span class="nx">A</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">hash</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nx">A</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">counter</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">faces3</span><span class="o">:</span><span class="p">[],</span><span class="nx">faces4</span><span class="o">:</span><span class="p">[],</span><span class="nx">materialIndex</span><span class="o">:</span><span class="nx">v</span><span class="p">,</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">numMorphTargets</span><span class="o">:</span><span class="nx">C</span><span class="p">,</span><span class="nx">numMorphNormals</span><span class="o">:</span><span class="nx">D</span><span class="p">});</span><span class="nx">w</span><span class="o">=</span><span class="nx">u</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="mi">3</span><span class="o">:</span><span class="mi">4</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">vertices</span><span class="o">+</span><span class="nx">w</span><span class="o">&gt;</span><span class="mi">65535</span><span class="p">){</span><span class="nx">A</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">counter</span><span class="o">=</span><span class="nx">A</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">counter</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">A</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">hash</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nx">A</span><span class="p">[</span><span class="nx">z</span><span class="p">].</span><span class="nx">counter</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">faces3</span><span class="o">:</span><span class="p">[],</span><span class="nx">faces4</span><span class="o">:</span><span class="p">[],</span><span class="nx">materialIndex</span><span class="o">:</span><span class="nx">v</span><span class="p">,</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">numMorphTargets</span><span class="o">:</span><span class="nx">C</span><span class="p">,</span></div><div class='line' id='LC363'><span class="nx">numMorphNormals</span><span class="o">:</span><span class="nx">D</span><span class="p">})}</span><span class="nx">u</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">faces3</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">faces4</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">vertices</span><span class="o">+</span><span class="nx">w</span><span class="p">}</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroupsList</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">E</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">E</span> <span class="k">in</span> <span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">E</span><span class="p">].</span><span class="nx">id</span><span class="o">=</span><span class="nx">fa</span><span class="o">++</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroupsList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">E</span><span class="p">])}}</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">l</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">){</span><span class="kd">var</span> <span class="nx">F</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span></div><div class='line' id='LC364'><span class="nx">F</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglSkinVertexABuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglSkinVertexBBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="kd">var</span> <span class="nx">H</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">){</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="o">=</span><span class="p">[];</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">;</span><span class="nx">H</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">H</span><span class="o">++</span><span class="p">)</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">())}</span><span class="k">if</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">){</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="o">=</span></div><div class='line' id='LC365'><span class="p">[];</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">;</span><span class="nx">H</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">H</span><span class="o">++</span><span class="p">)</span><span class="nx">F</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">())}</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">++</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Q</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">faces3</span><span class="p">,</span><span class="nx">$</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">faces4</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span><span class="nx">Z</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="mi">1</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="nx">Y</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="nx">$</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">Q</span><span class="p">),</span><span class="nx">T</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">R</span><span class="p">),</span><span class="nx">ea</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">R</span><span class="p">),</span><span class="nx">ia</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="nx">R</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:</span><span class="kc">false</span><span class="p">;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">ea</span><span class="p">)</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__normalArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">O</span><span class="p">.</span><span class="nx">hasTangents</span><span class="p">)</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__tangentArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">ia</span><span class="p">)</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__colorArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">T</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">O</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span></div><div class='line' id='LC366'><span class="mi">0</span><span class="o">||</span><span class="nx">O</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__uvArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">O</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">||</span><span class="nx">O</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__uv2Array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">2</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">J</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__skinVertexAArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__skinVertexBArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__skinIndexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__skinWeightArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">4</span><span class="p">)}</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__faceArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="nx">Z</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__lineArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="nx">Y</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="kd">var</span> <span class="nx">U</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ha</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Q</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">){</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__morphTargetsArrays</span><span class="o">=</span></div><div class='line' id='LC367'><span class="p">[];</span><span class="nx">U</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ha</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">;</span><span class="nx">U</span><span class="o">&lt;</span><span class="nx">ha</span><span class="p">;</span><span class="nx">U</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__morphTargetsArrays</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">3</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">Q</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">){</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__morphNormalsArrays</span><span class="o">=</span><span class="p">[];</span><span class="nx">U</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ha</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">;</span><span class="nx">U</span><span class="o">&lt;</span><span class="nx">ha</span><span class="p">;</span><span class="nx">U</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__morphNormalsArrays</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="mi">3</span><span class="p">))}</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__webglFaceCount</span><span class="o">=</span><span class="nx">Z</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__webglLineCount</span><span class="o">=</span><span class="nx">Y</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">R</span><span class="p">.</span><span class="nx">attributes</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">Ra</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">Ra</span> <span class="k">in</span> <span class="nx">R</span><span class="p">.</span><span class="nx">attributes</span><span class="p">){</span><span class="kd">var</span> <span class="nx">Ma</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">Ra</span><span class="p">],</span><span class="nx">aa</span><span class="o">=</span><span class="p">{},</span><span class="nx">Ka</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">Ka</span> <span class="k">in</span> <span class="nx">Ma</span><span class="p">)</span><span class="nx">aa</span><span class="p">[</span><span class="nx">Ka</span><span class="p">]</span><span class="o">=</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Ka</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">aa</span><span class="p">.</span><span class="nx">__webglInitialized</span><span class="o">||</span><span class="nx">aa</span><span class="p">.</span><span class="nx">createUniqueBuffers</span><span class="p">){</span><span class="nx">aa</span><span class="p">.</span><span class="nx">__webglInitialized</span><span class="o">=</span></div><div class='line' id='LC368'><span class="kc">true</span><span class="p">;</span><span class="kd">var</span> <span class="nx">La</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">aa</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;v2&quot;</span><span class="o">?</span><span class="nx">La</span><span class="o">=</span><span class="mi">2</span><span class="o">:</span><span class="nx">aa</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;v3&quot;</span><span class="o">?</span><span class="nx">La</span><span class="o">=</span><span class="mi">3</span><span class="o">:</span><span class="nx">aa</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;v4&quot;</span><span class="o">?</span><span class="nx">La</span><span class="o">=</span><span class="mi">4</span><span class="o">:</span><span class="nx">aa</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;c&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">La</span><span class="o">=</span><span class="mi">3</span><span class="p">);</span><span class="nx">aa</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">La</span><span class="p">;</span><span class="nx">aa</span><span class="p">.</span><span class="nx">array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">P</span><span class="o">*</span><span class="nx">La</span><span class="p">);</span><span class="nx">aa</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">aa</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="o">=</span><span class="nx">Ra</span><span class="p">;</span><span class="nx">Ma</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">aa</span><span class="p">.</span><span class="nx">__original</span><span class="o">=</span><span class="nx">Ma</span><span class="p">}</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">aa</span><span class="p">)}}</span><span class="nx">Q</span><span class="p">.</span><span class="nx">__inittedArrays</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">morphTargetsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">tangetsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span></div><div class='line' id='LC369'><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">){</span><span class="kd">var</span> <span class="nx">Sa</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">Sa</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">Sa</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">++</span><span class="p">;</span><span class="kd">var</span> <span class="nx">oa</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">xa</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">oa</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">xa</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">oa</span><span class="p">.</span><span class="nx">__colorArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">xa</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">oa</span><span class="p">.</span><span class="nx">__webglVertexCount</span><span class="o">=</span><span class="nx">xa</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">){</span><span class="kd">var</span> <span class="nx">Ba</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">Ba</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">++</span><span class="p">;</span></div><div class='line' id='LC370'><span class="kd">var</span> <span class="nx">Na</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">Ta</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">Wa</span><span class="o">=</span><span class="nx">Na</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Na</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">Wa</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">Na</span><span class="p">.</span><span class="nx">__colorArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">Wa</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">Na</span><span class="p">.</span><span class="nx">__webglLineCount</span><span class="o">=</span><span class="nx">Wa</span><span class="p">;</span><span class="nx">b</span><span class="p">(</span><span class="nx">Na</span><span class="p">,</span><span class="nx">Ta</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">){</span><span class="kd">var</span> <span class="nx">$a</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">$a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">$a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">geometries</span><span class="o">++</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Qa</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">Kb</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">lb</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">lb</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">__colorArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">lb</span><span class="o">*</span></div><div class='line' id='LC371'><span class="mi">3</span><span class="p">);</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">__sortArray</span><span class="o">=</span><span class="p">[];</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">__webglParticleCount</span><span class="o">=</span><span class="nx">lb</span><span class="p">;</span><span class="nx">b</span><span class="p">(</span><span class="nx">Qa</span><span class="p">,</span><span class="nx">Kb</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglActive</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">)</span><span class="nx">k</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">l</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">k</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">g</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="o">||</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">||</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="nx">k</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">)}</span><span class="k">else</span> <span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">immediateRenderCallback</span><span class="o">?</span></div><div class='line' id='LC372'><span class="nx">h</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">object</span><span class="o">:</span><span class="nx">g</span><span class="p">,</span><span class="nx">opaque</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">transparent</span><span class="o">:</span><span class="kc">null</span><span class="p">})</span><span class="o">:</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">__webglSprites</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">__webglFlares</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglActive</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">for</span><span class="p">(;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">length</span><span class="p">;){</span><span class="kd">var</span> <span class="nx">bb</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">gb</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">bb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">||</span><span class="nx">bb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="o">||</span><span class="nx">bb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="o">||</span><span class="nx">bb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">?</span><span class="nx">o</span><span class="p">(</span><span class="nx">gb</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="nx">bb</span><span class="p">)</span><span class="o">:</span><span class="nx">bb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="o">?</span><span class="nx">q</span><span class="p">(</span><span class="nx">gb</span><span class="p">.</span><span class="nx">__webglSprites</span><span class="p">,</span><span class="nx">bb</span><span class="p">)</span><span class="o">:</span><span class="nx">bb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="o">?</span></div><div class='line' id='LC373'><span class="nx">q</span><span class="p">(</span><span class="nx">gb</span><span class="p">.</span><span class="nx">__webglFlares</span><span class="p">,</span><span class="nx">bb</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">bb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="o">||</span><span class="nx">bb</span><span class="p">.</span><span class="nx">immediateRenderCallback</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="p">(</span><span class="nx">gb</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">,</span><span class="nx">bb</span><span class="p">);</span><span class="nx">bb</span><span class="p">.</span><span class="nx">__webglActive</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">ib</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Lb</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">ib</span><span class="o">&lt;</span><span class="nx">Lb</span><span class="p">;</span><span class="nx">ib</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">jb</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">[</span><span class="nx">ib</span><span class="p">].</span><span class="nx">object</span><span class="p">,</span><span class="nx">ga</span><span class="o">=</span><span class="nx">jb</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">hb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ic</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ua</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">jb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">ga</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">){</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span></div><div class='line' id='LC374'><span class="kc">false</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">Cb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">nd</span><span class="o">=</span><span class="nx">ga</span><span class="p">.</span><span class="nx">geometryGroupsList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Cb</span><span class="o">&lt;</span><span class="nx">nd</span><span class="p">;</span><span class="nx">Cb</span><span class="o">++</span><span class="p">){</span><span class="nx">hb</span><span class="o">=</span><span class="nx">ga</span><span class="p">.</span><span class="nx">geometryGroupsList</span><span class="p">[</span><span class="nx">Cb</span><span class="p">];</span><span class="nx">Ua</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">jb</span><span class="p">,</span><span class="nx">hb</span><span class="p">);</span><span class="nx">ic</span><span class="o">=</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">(</span><span class="nx">Ua</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">morphTargetsNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">tangetsNeedUpdate</span><span class="o">||</span><span class="nx">ic</span><span class="p">){</span><span class="kd">var</span> <span class="nx">ca</span><span class="o">=</span><span class="nx">hb</span><span class="p">,</span><span class="nx">od</span><span class="o">=</span><span class="nx">jb</span><span class="p">,</span><span class="nx">Xa</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span><span class="nx">pd</span><span class="o">=!</span><span class="nx">ga</span><span class="p">.</span><span class="nx">dynamic</span><span class="p">,</span><span class="nx">bc</span><span class="o">=</span><span class="nx">Ua</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__inittedArrays</span><span class="p">){</span><span class="kd">var</span> <span class="nx">cd</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">bc</span><span class="p">),</span><span class="nx">Tc</span><span class="o">=</span><span class="nx">bc</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="nx">bc</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">dd</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">bc</span><span class="p">),</span><span class="nx">Ec</span><span class="o">=</span><span class="nx">cd</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">,</span><span class="nx">I</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">S</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">fb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC375'><span class="nx">jc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ob</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">kb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Fc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Fb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">kc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">lc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">V</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">W</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ma</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">mb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">nb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ob</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">qc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">pb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">qb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">rb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">rc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">sb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">tb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ub</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">sc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">vb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">wb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">xb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">tc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">yb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">zb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ab</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">uc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Pb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Qb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Rb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Gc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Sb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Tb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ub</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Hc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ja</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ed</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Vb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">mc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">nc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ea</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">fd</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ca</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Da</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Wb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Gb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">wa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC376'><span class="nx">Aa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Hb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ib</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">cb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ja</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">na</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Oa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">ya</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">L</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">ba</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ya</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Fa</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="nx">vc</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__uvArray</span><span class="p">,</span><span class="nx">wc</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__uv2Array</span><span class="p">,</span><span class="nx">db</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__normalArray</span><span class="p">,</span><span class="nx">qa</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__tangentArray</span><span class="p">,</span><span class="nx">Ga</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span><span class="nx">ra</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__skinVertexAArray</span><span class="p">,</span><span class="nx">sa</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__skinVertexBArray</span><span class="p">,</span><span class="nx">ta</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__skinIndexArray</span><span class="p">,</span><span class="nx">ua</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__skinWeightArray</span><span class="p">,</span><span class="nx">Uc</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__morphTargetsArrays</span><span class="p">,</span><span class="nx">Vc</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__morphNormalsArrays</span><span class="p">,</span><span class="nx">Wc</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Bb</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__faceArray</span><span class="p">,</span><span class="nx">Za</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__lineArray</span><span class="p">,</span><span class="nx">Pa</span><span class="o">=</span><span class="nx">od</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">qd</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="p">,</span><span class="nx">gd</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="p">,</span><span class="nx">rd</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="p">,</span><span class="nx">sd</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">tangetsNeedUpdate</span><span class="p">,</span></div><div class='line' id='LC377'><span class="nx">td</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">,</span><span class="nx">ud</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">morphTargetsNeedUpdate</span><span class="p">,</span><span class="nx">cc</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">ka</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">faces3</span><span class="p">,</span><span class="nx">la</span><span class="o">=</span><span class="nx">ca</span><span class="p">.</span><span class="nx">faces4</span><span class="p">,</span><span class="nx">za</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">Xc</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">Yc</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">dc</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">skinVerticesA</span><span class="p">,</span><span class="nx">ec</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">skinVerticesB</span><span class="p">,</span><span class="nx">fc</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">,</span><span class="nx">Xb</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">,</span><span class="nx">Yb</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">,</span><span class="nx">Ic</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">V</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">9</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span></div><div class='line' id='LC378'><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">V</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ma</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">Aa</span><span class="o">+</span><span class="mi">12</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Fa</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">ud</span><span class="p">){</span><span class="nx">Ea</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">fd</span><span class="o">=</span><span class="nx">Yb</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Ea</span><span class="o">&lt;</span><span class="nx">fd</span><span class="p">;</span><span class="nx">Ea</span><span class="o">++</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="nx">ba</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">Wb</span><span class="o">=</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">];</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">Wb</span><span class="p">];</span><span class="nx">V</span><span class="o">=</span><span class="nx">Yb</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">Yb</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">Yb</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">Ca</span><span class="o">=</span><span class="nx">Uc</span><span class="p">[</span><span class="nx">Ea</span><span class="p">];</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span></div><div class='line' id='LC379'><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">bc</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Ec</span><span class="p">){</span><span class="nx">Gb</span><span class="o">=</span><span class="nx">Ic</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">Wb</span><span class="p">];</span><span class="nx">pb</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span><span class="nx">qb</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">rb</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">c</span><span class="p">}</span><span class="k">else</span> <span class="nx">rb</span><span class="o">=</span><span class="nx">qb</span><span class="o">=</span><span class="nx">pb</span><span class="o">=</span><span class="nx">Ic</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">faceNormals</span><span class="p">[</span><span class="nx">Wb</span><span class="p">];</span><span class="nx">Da</span><span class="o">=</span><span class="nx">Vc</span><span class="p">[</span><span class="nx">Ea</span><span class="p">];</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="nx">ba</span><span class="o">=</span><span class="nx">ba</span><span class="o">+</span><span class="mi">9</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">Wb</span><span class="o">=</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">];</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">Wb</span><span class="p">];</span><span class="nx">V</span><span class="o">=</span><span class="nx">Yb</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">Yb</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">Yb</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ma</span><span class="o">=</span><span class="nx">Yb</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">Ca</span><span class="o">=</span><span class="nx">Uc</span><span class="p">[</span><span class="nx">Ea</span><span class="p">];</span></div><div class='line' id='LC380'><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Ca</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">bc</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Ec</span><span class="p">){</span><span class="nx">Gb</span><span class="o">=</span><span class="nx">Ic</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">Wb</span><span class="p">];</span><span class="nx">pb</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span><span class="nx">qb</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">rb</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">c</span><span class="p">;</span><span class="nx">rc</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">d</span><span class="p">}</span><span class="k">else</span> <span class="nx">rc</span><span class="o">=</span><span class="nx">rb</span><span class="o">=</span><span class="nx">qb</span><span class="o">=</span><span class="nx">pb</span><span class="o">=</span><span class="nx">Ic</span><span class="p">[</span><span class="nx">Ea</span><span class="p">].</span><span class="nx">faceNormals</span><span class="p">[</span><span class="nx">Wb</span><span class="p">];</span><span class="nx">Da</span><span class="o">=</span><span class="nx">Vc</span><span class="p">[</span><span class="nx">Ea</span><span class="p">];</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">rc</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">rc</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Da</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">rc</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="nx">ba</span><span class="o">=</span><span class="nx">ba</span><span class="o">+</span><span class="mi">12</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></div><div class='line' id='LC381'><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">Ea</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Uc</span><span class="p">[</span><span class="nx">Ea</span><span class="p">],</span><span class="nx">Xa</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">bc</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">[</span><span class="nx">Ea</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Vc</span><span class="p">[</span><span class="nx">Ea</span><span class="p">],</span><span class="nx">Xa</span><span class="p">)}}}</span><span class="k">if</span><span class="p">(</span><span class="nx">Xb</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">vb</span><span class="o">=</span><span class="nx">Xb</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">wb</span><span class="o">=</span><span class="nx">Xb</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">xb</span><span class="o">=</span><span class="nx">Xb</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">wb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">wb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">wb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">wb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">xb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">xb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">xb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">xb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">yb</span><span class="o">=</span><span class="nx">fc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">zb</span><span class="o">=</span><span class="nx">fc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">Ab</span><span class="o">=</span><span class="nx">fc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">yb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">yb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span></div><div class='line' id='LC382'><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">yb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">yb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">Ab</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">Ab</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">Ab</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">Ab</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">Pb</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">Qb</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">Rb</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Qb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Qb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">Qb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">Rb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">Rb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">Rb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">Sb</span><span class="o">=</span><span class="nx">ec</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">Tb</span><span class="o">=</span><span class="nx">ec</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">Ub</span><span class="o">=</span><span class="nx">ec</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">L</span><span class="o">=</span><span class="nx">L</span><span class="o">+</span><span class="mi">12</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span></div><div class='line' id='LC383'><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">vb</span><span class="o">=</span><span class="nx">Xb</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">wb</span><span class="o">=</span><span class="nx">Xb</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">xb</span><span class="o">=</span><span class="nx">Xb</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">tc</span><span class="o">=</span><span class="nx">Xb</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">wb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">wb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">wb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">wb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">xb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">xb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">xb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">xb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">tc</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">tc</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">tc</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ua</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">tc</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">yb</span><span class="o">=</span><span class="nx">fc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">zb</span><span class="o">=</span><span class="nx">fc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">Ab</span><span class="o">=</span><span class="nx">fc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">uc</span><span class="o">=</span><span class="nx">fc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">yb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">yb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">yb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">yb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">Ab</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">Ab</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">Ab</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">Ab</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">uc</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span></div><div class='line' id='LC384'><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">uc</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">uc</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ta</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">uc</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">Pb</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">Qb</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">Rb</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">Gc</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Qb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Qb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">Qb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">Rb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">Rb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">Rb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">Gc</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">Gc</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">Gc</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">ra</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">Sb</span><span class="o">=</span><span class="nx">ec</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">Tb</span><span class="o">=</span><span class="nx">ec</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">Ub</span><span class="o">=</span><span class="nx">ec</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">Hc</span><span class="o">=</span><span class="nx">ec</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">Hc</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">Hc</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span></div><div class='line' id='LC385'><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">Hc</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">sa</span><span class="p">[</span><span class="nx">L</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">L</span><span class="o">=</span><span class="nx">L</span><span class="o">+</span><span class="mi">16</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">L</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglSkinVertexABuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ra</span><span class="p">,</span><span class="nx">Xa</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglSkinVertexBBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">sa</span><span class="p">,</span><span class="nx">Xa</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ta</span><span class="p">,</span><span class="nx">Xa</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ua</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">td</span><span class="o">&amp;&amp;</span><span class="nx">Tc</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">kb</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">Fc</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">kb</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span></div><div class='line' id='LC386'><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="nx">Tc</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">){</span><span class="nx">sb</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">tb</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">ub</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="mi">2</span><span class="p">]}</span><span class="k">else</span> <span class="nx">ub</span><span class="o">=</span><span class="nx">tb</span><span class="o">=</span><span class="nx">sb</span><span class="o">=</span><span class="nx">Fc</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">tb</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">tb</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">tb</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">ub</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">ub</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ub</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">ya</span><span class="o">=</span><span class="nx">ya</span><span class="o">+</span><span class="mi">9</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">kb</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">Fc</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">kb</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">4</span><span class="o">&amp;&amp;</span><span class="nx">Tc</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">){</span><span class="nx">sb</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">tb</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">ub</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">sc</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="mi">3</span><span class="p">]}</span><span class="k">else</span> <span class="nx">sc</span><span class="o">=</span><span class="nx">ub</span><span class="o">=</span><span class="nx">tb</span><span class="o">=</span><span class="nx">sb</span><span class="o">=</span><span class="nx">Fc</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">tb</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">tb</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">tb</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">ub</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">ub</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ub</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span></div><div class='line' id='LC387'><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">sc</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">sc</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">ya</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">sc</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">ya</span><span class="o">=</span><span class="nx">ya</span><span class="o">+</span><span class="mi">12</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">ya</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Ga</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">sd</span><span class="o">&amp;&amp;</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">hasTangents</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">Fb</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">;</span><span class="nx">mb</span><span class="o">=</span><span class="nx">Fb</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">nb</span><span class="o">=</span><span class="nx">Fb</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">ob</span><span class="o">=</span><span class="nx">Fb</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="p">]</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ob</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ob</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ob</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ob</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">na</span><span class="o">=</span><span class="nx">na</span><span class="o">+</span><span class="mi">12</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">Fb</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">;</span><span class="nx">mb</span><span class="o">=</span><span class="nx">Fb</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span></div><div class='line' id='LC388'><span class="nx">nb</span><span class="o">=</span><span class="nx">Fb</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">ob</span><span class="o">=</span><span class="nx">Fb</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">qc</span><span class="o">=</span><span class="nx">Fb</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="p">]</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ob</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ob</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ob</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ob</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">qc</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">qc</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">qc</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">qa</span><span class="p">[</span><span class="nx">na</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">qc</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">na</span><span class="o">=</span><span class="nx">na</span><span class="o">+</span><span class="mi">16</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">qa</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">rd</span><span class="o">&amp;&amp;</span><span class="nx">cd</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">jc</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">;</span><span class="nx">Ob</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">normal</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">jc</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="nx">Ec</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">Vb</span><span class="o">=</span><span class="nx">jc</span><span class="p">[</span><span class="nx">ja</span><span class="p">];</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="p">]</span><span class="o">=</span><span class="nx">Vb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="o">+</span></div><div class='line' id='LC389'><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Vb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Vb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ja</span><span class="o">=</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="p">]</span><span class="o">=</span><span class="nx">Ob</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ob</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ob</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ja</span><span class="o">=</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">3</span><span class="p">}}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">jc</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">;</span><span class="nx">Ob</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">normal</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">jc</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">4</span><span class="o">&amp;&amp;</span><span class="nx">Ec</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">Vb</span><span class="o">=</span><span class="nx">jc</span><span class="p">[</span><span class="nx">ja</span><span class="p">];</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="p">]</span><span class="o">=</span><span class="nx">Vb</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Vb</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Vb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ja</span><span class="o">=</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="p">]</span><span class="o">=</span><span class="nx">Ob</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ob</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">db</span><span class="p">[</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ob</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">Ja</span><span class="o">=</span><span class="nx">Ja</span><span class="o">+</span><span class="mi">3</span><span class="p">}}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">db</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">gd</span><span class="o">&amp;&amp;</span><span class="nx">Xc</span><span class="o">&amp;&amp;</span><span class="nx">dd</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">fb</span><span class="o">=</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">];</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">fb</span><span class="p">];</span><span class="nx">kc</span><span class="o">=</span></div><div class='line' id='LC390'><span class="nx">Xc</span><span class="p">[</span><span class="nx">fb</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">kc</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">mc</span><span class="o">=</span><span class="nx">kc</span><span class="p">[</span><span class="nx">ja</span><span class="p">];</span><span class="nx">vc</span><span class="p">[</span><span class="nx">Hb</span><span class="p">]</span><span class="o">=</span><span class="nx">mc</span><span class="p">.</span><span class="nx">u</span><span class="p">;</span><span class="nx">vc</span><span class="p">[</span><span class="nx">Hb</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">mc</span><span class="p">.</span><span class="nx">v</span><span class="p">;</span><span class="nx">Hb</span><span class="o">=</span><span class="nx">Hb</span><span class="o">+</span><span class="mi">2</span><span class="p">}}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">fb</span><span class="o">=</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">];</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">fb</span><span class="p">];</span><span class="nx">kc</span><span class="o">=</span><span class="nx">Xc</span><span class="p">[</span><span class="nx">fb</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">kc</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">mc</span><span class="o">=</span><span class="nx">kc</span><span class="p">[</span><span class="nx">ja</span><span class="p">];</span><span class="nx">vc</span><span class="p">[</span><span class="nx">Hb</span><span class="p">]</span><span class="o">=</span><span class="nx">mc</span><span class="p">.</span><span class="nx">u</span><span class="p">;</span><span class="nx">vc</span><span class="p">[</span><span class="nx">Hb</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">mc</span><span class="p">.</span><span class="nx">v</span><span class="p">;</span><span class="nx">Hb</span><span class="o">=</span><span class="nx">Hb</span><span class="o">+</span><span class="mi">2</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">Hb</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">vc</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">gd</span><span class="o">&amp;&amp;</span><span class="nx">Yc</span><span class="o">&amp;&amp;</span><span class="nx">dd</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">fb</span><span class="o">=</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">];</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">fb</span><span class="p">];</span><span class="nx">lc</span><span class="o">=</span><span class="nx">Yc</span><span class="p">[</span><span class="nx">fb</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">lc</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">nc</span><span class="o">=</span><span class="nx">lc</span><span class="p">[</span><span class="nx">ja</span><span class="p">];</span><span class="nx">wc</span><span class="p">[</span><span class="nx">Ib</span><span class="p">]</span><span class="o">=</span><span class="nx">nc</span><span class="p">.</span><span class="nx">u</span><span class="p">;</span><span class="nx">wc</span><span class="p">[</span><span class="nx">Ib</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">nc</span><span class="p">.</span><span class="nx">v</span><span class="p">;</span><span class="nx">Ib</span><span class="o">=</span><span class="nx">Ib</span><span class="o">+</span><span class="mi">2</span><span class="p">}}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">fb</span><span class="o">=</span></div><div class='line' id='LC391'><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">];</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">fb</span><span class="p">];</span><span class="nx">lc</span><span class="o">=</span><span class="nx">Yc</span><span class="p">[</span><span class="nx">fb</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">lc</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">nc</span><span class="o">=</span><span class="nx">lc</span><span class="p">[</span><span class="nx">ja</span><span class="p">];</span><span class="nx">wc</span><span class="p">[</span><span class="nx">Ib</span><span class="p">]</span><span class="o">=</span><span class="nx">nc</span><span class="p">.</span><span class="nx">u</span><span class="p">;</span><span class="nx">wc</span><span class="p">[</span><span class="nx">Ib</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">nc</span><span class="p">.</span><span class="nx">v</span><span class="p">;</span><span class="nx">Ib</span><span class="o">=</span><span class="nx">Ib</span><span class="o">+</span><span class="mi">2</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">Ib</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">wc</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">qd</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">;</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">cb</span><span class="o">=</span><span class="nx">cb</span><span class="o">+</span><span class="mi">3</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">Oa</span><span class="o">=</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">6</span><span class="p">;</span><span class="nx">wa</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">;</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">3</span><span class="p">;</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">cb</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC392'><span class="nx">wa</span><span class="o">+</span><span class="mi">3</span><span class="p">;</span><span class="nx">cb</span><span class="o">=</span><span class="nx">cb</span><span class="o">+</span><span class="mi">6</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">3</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">Za</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">3</span><span class="p">;</span><span class="nx">Oa</span><span class="o">=</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">8</span><span class="p">;</span><span class="nx">wa</span><span class="o">=</span><span class="nx">wa</span><span class="o">+</span><span class="mi">4</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Bb</span><span class="p">,</span><span class="nx">Xa</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ca</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Za</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Wc</span><span class="p">){</span><span class="nx">ja</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ed</span><span class="o">=</span><span class="nx">Wc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">ja</span><span class="o">&lt;</span><span class="nx">ed</span><span class="p">;</span><span class="nx">ja</span><span class="o">++</span><span class="p">){</span><span class="nx">x</span><span class="o">=</span><span class="nx">Wc</span><span class="p">[</span><span class="nx">ja</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">__original</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">){</span><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;vertices&quot;</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span></div><div class='line' id='LC393'><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">}}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;faces&quot;</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">Ya</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ya</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ya</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">Ya</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ya</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ya</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Ya</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span></div><div class='line' id='LC394'><span class="mi">2</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;vertices&quot;</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">V</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">V</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ma</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">}}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span></div><div class='line' id='LC395'><span class="s2">&quot;faces&quot;</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">X</span><span class="o">=</span><span class="nx">W</span><span class="o">=</span><span class="nx">V</span><span class="o">=</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">ma</span><span class="o">=</span><span class="nx">X</span><span class="o">=</span><span class="nx">W</span><span class="o">=</span><span class="nx">V</span><span class="o">=</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="kd">var</span> <span class="nx">da</span><span class="p">;</span><span class="nx">da</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;c&quot;</span><span class="o">?</span><span class="p">[</span><span class="s2">&quot;r&quot;</span><span class="p">,</span><span class="s2">&quot;g&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="p">]</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="s2">&quot;z&quot;</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;vertices&quot;</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span></div><div class='line' id='LC396'><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">V</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">9</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">V</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ma</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span></div><div class='line' id='LC397'><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">12</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;faces&quot;</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">X</span><span class="o">=</span><span class="nx">W</span><span class="o">=</span><span class="nx">V</span><span class="o">=</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">9</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">ma</span><span class="o">=</span><span class="nx">X</span><span class="o">=</span><span class="nx">W</span><span class="o">=</span><span class="nx">V</span><span class="o">=</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span></div><div class='line' id='LC398'><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">[</span><span class="nx">da</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">12</span><span class="p">}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">4</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;vertices&quot;</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">V</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span></div><div class='line' id='LC399'><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">12</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">N</span><span class="o">=</span><span class="nx">za</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">V</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">W</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">X</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">ma</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">N</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">16</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span></div><div class='line' id='LC400'><span class="s2">&quot;faces&quot;</span><span class="p">){</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">X</span><span class="o">=</span><span class="nx">W</span><span class="o">=</span><span class="nx">V</span><span class="o">=</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ka</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">12</span><span class="p">}</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">S</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">){</span><span class="nx">ma</span><span class="o">=</span><span class="nx">X</span><span class="o">=</span><span class="nx">W</span><span class="o">=</span><span class="nx">V</span><span class="o">=</span><span class="nx">Ya</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">la</span><span class="p">[</span><span class="nx">I</span><span class="p">]];</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">W</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span></div><div class='line' id='LC401'><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">ma</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">B</span><span class="o">+</span><span class="mi">16</span><span class="p">}}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">x</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">x</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)}}}</span><span class="k">if</span><span class="p">(</span><span class="nx">pd</span><span class="p">){</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__inittedArrays</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__normalArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__tangentArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__uvArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__uv2Array</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__faceArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__lineArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__skinVertexAArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__skinVertexBArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__skinIndexArray</span><span class="p">;</span><span class="k">delete</span> <span class="nx">ca</span><span class="p">.</span><span class="nx">__skinWeightArray</span><span class="p">}}}}</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span></div><div class='line' id='LC402'><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">morphTargetsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">tangetsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">(</span><span class="nx">Ua</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">jb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">){</span><span class="kd">var</span> <span class="nx">Zb</span><span class="o">=</span><span class="nx">ga</span><span class="p">,</span><span class="nx">hd</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span><span class="nx">xc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">yc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Jc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">$b</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Kc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">id</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">jd</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">vd</span><span class="o">=</span><span class="nx">id</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">wd</span><span class="o">=</span><span class="nx">jd</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">Lc</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="nx">Mc</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span><span class="nx">xd</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">xc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">xc</span><span class="o">&lt;</span></div><div class='line' id='LC403'><span class="nx">vd</span><span class="p">;</span><span class="nx">xc</span><span class="o">++</span><span class="p">){</span><span class="nx">Jc</span><span class="o">=</span><span class="nx">id</span><span class="p">[</span><span class="nx">xc</span><span class="p">];</span><span class="nx">$b</span><span class="o">=</span><span class="nx">xc</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">Lc</span><span class="p">[</span><span class="nx">$b</span><span class="p">]</span><span class="o">=</span><span class="nx">Jc</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Lc</span><span class="p">[</span><span class="nx">$b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Jc</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Lc</span><span class="p">[</span><span class="nx">$b</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Jc</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Lc</span><span class="p">,</span><span class="nx">hd</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">xd</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">yc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">yc</span><span class="o">&lt;</span><span class="nx">wd</span><span class="p">;</span><span class="nx">yc</span><span class="o">++</span><span class="p">){</span><span class="nx">Kc</span><span class="o">=</span><span class="nx">jd</span><span class="p">[</span><span class="nx">yc</span><span class="p">];</span><span class="nx">$b</span><span class="o">=</span><span class="nx">yc</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">Mc</span><span class="p">[</span><span class="nx">$b</span><span class="p">]</span><span class="o">=</span><span class="nx">Kc</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Mc</span><span class="p">[</span><span class="nx">$b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Kc</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Mc</span><span class="p">[</span><span class="nx">$b</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Kc</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Mc</span><span class="p">,</span><span class="nx">hd</span><span class="p">)}}</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">jb</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">){</span><span class="nx">Ua</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">jb</span><span class="p">,</span><span class="nx">hb</span><span class="p">);</span><span class="nx">ic</span><span class="o">=</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">(</span><span class="nx">Ua</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">||</span><span class="nx">ic</span><span class="p">){</span><span class="kd">var</span> <span class="nx">Jb</span><span class="o">=</span></div><div class='line' id='LC404'><span class="nx">ga</span><span class="p">,</span><span class="nx">Zc</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span><span class="nx">zc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ac</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Nc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">va</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Oc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">kd</span><span class="o">=</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">ld</span><span class="o">=</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">yd</span><span class="o">=</span><span class="nx">kd</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">zd</span><span class="o">=</span><span class="nx">ld</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">Pc</span><span class="o">=</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="nx">Qc</span><span class="o">=</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span><span class="nx">Ad</span><span class="o">=</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">,</span><span class="nx">$c</span><span class="o">=</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">,</span><span class="nx">Rc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">md</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ia</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">oc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Va</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">pa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">zc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">zc</span><span class="o">&lt;</span><span class="nx">yd</span><span class="p">;</span><span class="nx">zc</span><span class="o">++</span><span class="p">){</span><span class="nx">Nc</span><span class="o">=</span><span class="nx">kd</span><span class="p">[</span><span class="nx">zc</span><span class="p">];</span><span class="nx">va</span><span class="o">=</span><span class="nx">zc</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">Pc</span><span class="p">[</span><span class="nx">va</span><span class="p">]</span><span class="o">=</span><span class="nx">Nc</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Pc</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Nc</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">Pc</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Nc</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Pc</span><span class="p">,</span><span class="nx">Zc</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Ad</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">Ac</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ac</span><span class="o">&lt;</span><span class="nx">zd</span><span class="p">;</span><span class="nx">Ac</span><span class="o">++</span><span class="p">){</span><span class="nx">Oc</span><span class="o">=</span></div><div class='line' id='LC405'><span class="nx">ld</span><span class="p">[</span><span class="nx">Ac</span><span class="p">];</span><span class="nx">va</span><span class="o">=</span><span class="nx">Ac</span><span class="o">*</span><span class="mi">3</span><span class="p">;</span><span class="nx">Qc</span><span class="p">[</span><span class="nx">va</span><span class="p">]</span><span class="o">=</span><span class="nx">Oc</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">Qc</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Oc</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">Qc</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Oc</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Jb</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Qc</span><span class="p">,</span><span class="nx">Zc</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">$c</span><span class="p">){</span><span class="nx">Rc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">md</span><span class="o">=</span><span class="nx">$c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Rc</span><span class="o">&lt;</span><span class="nx">md</span><span class="p">;</span><span class="nx">Rc</span><span class="o">++</span><span class="p">){</span><span class="nx">pa</span><span class="o">=</span><span class="nx">$c</span><span class="p">[</span><span class="nx">Rc</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">pa</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">pa</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">||</span><span class="nx">pa</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">===</span><span class="s2">&quot;vertices&quot;</span><span class="p">)){</span><span class="nx">va</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">oc</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">pa</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">Ia</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ia</span><span class="o">&lt;</span><span class="nx">oc</span><span class="p">;</span><span class="nx">Ia</span><span class="o">++</span><span class="p">)</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ia</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Ia</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">pa</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">Ia</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ia</span><span class="o">&lt;</span><span class="nx">oc</span><span class="p">;</span><span class="nx">Ia</span><span class="o">++</span><span class="p">){</span><span class="nx">Va</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Ia</span><span class="p">];</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">va</span><span class="o">=</span><span class="nx">va</span><span class="o">+</span><span class="mi">2</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">pa</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">3</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">pa</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="s2">&quot;c&quot;</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">Ia</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ia</span><span class="o">&lt;</span><span class="nx">oc</span><span class="p">;</span><span class="nx">Ia</span><span class="o">++</span><span class="p">){</span><span class="nx">Va</span><span class="o">=</span></div><div class='line' id='LC406'><span class="nx">pa</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Ia</span><span class="p">];</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">va</span><span class="o">=</span><span class="nx">va</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">Ia</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ia</span><span class="o">&lt;</span><span class="nx">oc</span><span class="p">;</span><span class="nx">Ia</span><span class="o">++</span><span class="p">){</span><span class="nx">Va</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Ia</span><span class="p">];</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">va</span><span class="o">=</span><span class="nx">va</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">pa</span><span class="p">.</span><span class="nx">size</span><span class="o">===</span><span class="mi">4</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">Ia</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ia</span><span class="o">&lt;</span><span class="nx">oc</span><span class="p">;</span><span class="nx">Ia</span><span class="o">++</span><span class="p">){</span><span class="nx">Va</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Ia</span><span class="p">];</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">va</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Va</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">va</span><span class="o">=</span><span class="nx">va</span><span class="o">+</span><span class="mi">4</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">pa</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">pa</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">Zc</span><span class="p">)}}}}</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">(</span><span class="nx">Ua</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">jb</span> <span class="k">instanceof</span></div><div class='line' id='LC407'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">){</span><span class="nx">Ua</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">jb</span><span class="p">,</span><span class="nx">hb</span><span class="p">);</span><span class="nx">ic</span><span class="o">=</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">(</span><span class="nx">Ua</span><span class="p">);(</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">||</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">||</span><span class="nx">jb</span><span class="p">.</span><span class="nx">sortParticles</span><span class="o">||</span><span class="nx">ic</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">(</span><span class="nx">ga</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span><span class="nx">jb</span><span class="p">);</span><span class="nx">ga</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">ga</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">(</span><span class="nx">Ua</span><span class="p">)}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">initMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;depth&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;normal&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;basic&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;lambert&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">?</span></div><div class='line' id='LC408'><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;phong&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;basic&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;particle_basic&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">}</span><span class="kd">var</span> <span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">m</span><span class="o">=</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="p">){</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="o">++</span><span class="p">;</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">++</span><span class="p">;</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="o">++</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="nx">h</span><span class="o">+</span><span class="nx">m</span><span class="o">&lt;=</span><span class="nx">M</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">k</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">M</span><span class="o">*</span><span class="nx">m</span><span class="o">/</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="nx">m</span><span class="p">));</span></div><div class='line' id='LC409'><span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="o">=</span><span class="nx">M</span><span class="o">-</span><span class="nx">k</span><span class="p">}</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">){</span><span class="nx">j</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">++</span><span class="p">;</span><span class="nx">j</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">&amp;&amp;!</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowCascade</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">++</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">)</span><span class="nx">o</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="kd">var</span> <span class="nx">q</span><span class="p">;</span><span class="nx">a</span><span class="o">:</span><span class="p">{</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">{</span><span class="nx">map</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="nx">envMap</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="p">,</span><span class="nx">lightMap</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">,</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">,</span><span class="nx">fog</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">useFog</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">sizeAttenuation</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="p">,</span><span class="nx">skinning</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="p">,</span><span class="nx">maxBones</span><span class="o">:</span><span class="nx">o</span><span class="p">,</span><span class="nx">morphTargets</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">,</span></div><div class='line' id='LC410'><span class="nx">morphNormals</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">,</span><span class="nx">maxMorphTargets</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">,</span><span class="nx">maxMorphNormals</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphNormals</span><span class="p">,</span><span class="nx">maxDirLights</span><span class="o">:</span><span class="nx">k</span><span class="p">,</span><span class="nx">maxPointLights</span><span class="o">:</span><span class="nx">l</span><span class="p">,</span><span class="nx">maxSpotLights</span><span class="o">:</span><span class="nx">m</span><span class="p">,</span><span class="nx">maxShadows</span><span class="o">:</span><span class="nx">p</span><span class="p">,</span><span class="nx">shadowMapEnabled</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="p">,</span><span class="nx">shadowMapSoft</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapSoft</span><span class="p">,</span><span class="nx">shadowMapDebug</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapDebug</span><span class="p">,</span><span class="nx">shadowMapCascade</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapCascade</span><span class="p">,</span><span class="nx">alphaTest</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">alphaTest</span><span class="p">,</span><span class="nx">metal</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">metal</span><span class="p">,</span><span class="nx">perPixel</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">perPixel</span><span class="p">,</span><span class="nx">wrapAround</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapAround</span><span class="p">,</span><span class="nx">doubleSided</span><span class="o">:</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">doubleSided</span><span class="p">},</span><span class="nx">r</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span> <span class="k">in</span> <span class="nx">c</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span></div><div class='line' id='LC411'><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">r</span><span class="p">])}</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">join</span><span class="p">();</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">T</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">code</span><span class="o">===</span><span class="nx">g</span><span class="p">){</span><span class="nx">q</span><span class="o">=</span><span class="nx">T</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">program</span><span class="p">;</span><span class="k">break</span> <span class="nx">a</span><span class="p">}</span><span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createProgram</span><span class="p">();</span><span class="nx">d</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;precision &quot;</span><span class="o">+</span><span class="nx">z</span><span class="o">+</span><span class="s2">&quot; float;&quot;</span><span class="p">,</span><span class="nx">oa</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="s2">&quot;#define VERTEX_TEXTURES&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="s2">&quot;#define GAMMA_INPUT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaOutput</span><span class="o">?</span><span class="s2">&quot;#define GAMMA_OUTPUT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">physicallyBasedShading</span><span class="o">?</span><span class="s2">&quot;#define PHYSICALLY_BASED_SHADING&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;#define MAX_DIR_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxDirLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_POINT_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxPointLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_SPOT_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxSpotLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_SHADOWS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxShadows</span><span class="p">,</span><span class="s2">&quot;#define MAX_BONES &quot;</span><span class="o">+</span></div><div class='line' id='LC412'><span class="nx">c</span><span class="p">.</span><span class="nx">maxBones</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">map</span><span class="o">?</span><span class="s2">&quot;#define USE_MAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">envMap</span><span class="o">?</span><span class="s2">&quot;#define USE_ENVMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">?</span><span class="s2">&quot;#define USE_LIGHTMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="s2">&quot;#define USE_COLOR&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">skinning</span><span class="o">?</span><span class="s2">&quot;#define USE_SKINNING&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">?</span><span class="s2">&quot;#define USE_MORPHTARGETS&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">?</span><span class="s2">&quot;#define USE_MORPHNORMALS&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">?</span><span class="s2">&quot;#define PHONG_PER_PIXEL&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">?</span><span class="s2">&quot;#define WRAP_AROUND&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">?</span><span class="s2">&quot;#define DOUBLE_SIDED&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">?</span><span class="s2">&quot;#define USE_SHADOWMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapSoft</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_SOFT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapDebug</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_DEBUG&quot;</span><span class="o">:</span></div><div class='line' id='LC413'><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapCascade</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_CASCADE&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">?</span><span class="s2">&quot;#define USE_SIZEATTENUATION&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;uniform mat4 objectMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinVertexA;\nattribute vec4 skinVertexB;\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span></div><div class='line' id='LC414'><span class="nx">k</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;precision &quot;</span><span class="o">+</span><span class="nx">z</span><span class="o">+</span><span class="s2">&quot; float;&quot;</span><span class="p">,</span><span class="s2">&quot;#define MAX_DIR_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxDirLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_POINT_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxPointLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_SPOT_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxSpotLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_SHADOWS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxShadows</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">?</span><span class="s2">&quot;#define ALPHATEST &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="s2">&quot;#define GAMMA_INPUT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">gammaOutput</span><span class="o">?</span><span class="s2">&quot;#define GAMMA_OUTPUT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">physicallyBasedShading</span><span class="o">?</span><span class="s2">&quot;#define PHYSICALLY_BASED_SHADING&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">useFog</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">fog</span><span class="o">?</span><span class="s2">&quot;#define USE_FOG&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">useFog</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">fog</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="o">?</span><span class="s2">&quot;#define FOG_EXP2&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">map</span><span class="o">?</span><span class="s2">&quot;#define USE_MAP&quot;</span><span class="o">:</span></div><div class='line' id='LC415'><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">envMap</span><span class="o">?</span><span class="s2">&quot;#define USE_ENVMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">?</span><span class="s2">&quot;#define USE_LIGHTMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="s2">&quot;#define USE_COLOR&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">metal</span><span class="o">?</span><span class="s2">&quot;#define METAL&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">?</span><span class="s2">&quot;#define PHONG_PER_PIXEL&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">?</span><span class="s2">&quot;#define WRAP_AROUND&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">?</span><span class="s2">&quot;#define DOUBLE_SIDED&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">?</span><span class="s2">&quot;#define USE_SHADOWMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapSoft</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_SOFT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapDebug</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_DEBUG&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapCascade</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_CASCADE&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span></div><div class='line' id='LC416'><span class="nx">i</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;fragment&quot;</span><span class="p">,</span><span class="nx">k</span><span class="o">+</span><span class="nx">n</span><span class="p">));</span><span class="nx">i</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;vertex&quot;</span><span class="p">,</span><span class="nx">d</span><span class="o">+</span><span class="nx">j</span><span class="p">));</span><span class="nx">i</span><span class="p">.</span><span class="nx">linkProgram</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">getProgramParameter</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">LINK_STATUS</span><span class="p">)</span><span class="o">||</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Could not initialise shader\nVALIDATE_STATUS: &quot;</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">getProgramParameter</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">VALIDATE_STATUS</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;, gl error [&quot;</span><span class="o">+</span><span class="nx">i</span><span class="p">.</span><span class="nx">getError</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">=</span><span class="p">{};</span><span class="nx">r</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="p">{};</span><span class="kd">var</span> <span class="nx">s</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;viewMatrix&quot;</span><span class="p">,</span><span class="s2">&quot;modelViewMatrix&quot;</span><span class="p">,</span><span class="s2">&quot;projectionMatrix&quot;</span><span class="p">,</span><span class="s2">&quot;normalMatrix&quot;</span><span class="p">,</span><span class="s2">&quot;objectMatrix&quot;</span><span class="p">,</span><span class="s2">&quot;cameraPosition&quot;</span><span class="p">,</span><span class="s2">&quot;boneGlobalMatrices&quot;</span><span class="p">,</span><span class="s2">&quot;morphTargetInfluences&quot;</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span> <span class="k">in</span> <span class="nx">h</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span></div><div class='line' id='LC417'><span class="nx">s</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)}</span><span class="nx">d</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;position&quot;</span><span class="p">,</span><span class="s2">&quot;normal&quot;</span><span class="p">,</span><span class="s2">&quot;uv&quot;</span><span class="p">,</span><span class="s2">&quot;uv2&quot;</span><span class="p">,</span><span class="s2">&quot;tangent&quot;</span><span class="p">,</span><span class="s2">&quot;color&quot;</span><span class="p">,</span><span class="s2">&quot;skinVertexA&quot;</span><span class="p">,</span><span class="s2">&quot;skinVertexB&quot;</span><span class="p">,</span><span class="s2">&quot;skinIndex&quot;</span><span class="p">,</span><span class="s2">&quot;skinWeight&quot;</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">s</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxMorphNormals</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">s</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">q</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">c</span><span class="p">)}</span><span class="nx">r</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">T</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">program</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">code</span><span class="o">:</span><span class="nx">g</span><span class="p">});</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">programs</span><span class="o">=</span><span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">r</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">position</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span></div><div class='line' id='LC418'><span class="nx">q</span><span class="p">.</span><span class="nx">color</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">normal</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">tangent</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">tangent</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">skinVertexA</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">skinVertexB</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">skinIndex</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">skinWeight</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">skinVertexA</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">skinVertexB</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">skinIndex</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">skinWeight</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span><span class="nx">q</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="o">=</span></div><div class='line' id='LC419'><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="s2">&quot;morphTarget&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="o">++</span><span class="p">}}}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">numSupportedMorphNormals</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="s2">&quot;morphNormal&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphNormals</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">numSupportedMorphNormals</span><span class="o">++</span><span class="p">}}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniformsList</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniformsList</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">e</span><span class="p">])};</span><span class="k">this</span><span class="p">.</span><span class="nx">setFaceCulling</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="o">!</span><span class="nx">b</span><span class="o">||</span><span class="nx">b</span><span class="o">===</span><span class="s2">&quot;ccw&quot;</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CCW</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CW</span><span class="p">);</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;back&quot;</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BACK</span><span class="p">)</span><span class="o">:</span></div><div class='line' id='LC420'><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;front&quot;</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRONT</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRONT_AND_BACK</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">)}</span><span class="k">else</span> <span class="nx">i</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setObjectFaces</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">ia</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">doubleSided</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">ia</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">doubleSided</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">O</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">flipSided</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CW</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">CCW</span><span class="p">);</span><span class="nx">O</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">flipSided</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Ma</span><span class="o">!==</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">Ma</span><span class="o">=</span><span class="nx">a</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Ka</span><span class="o">!==</span><span class="nx">a</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">depthMask</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">Ka</span><span class="o">=</span><span class="nx">a</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">setBlending</span><span class="o">=</span></div><div class='line' id='LC421'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="nx">Q</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NoBlending</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AdditiveBlending</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">SRC_ALPHA</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">ONE</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractiveBlending</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ZERO</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_COLOR</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyBlending</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ZERO</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">SRC_COLOR</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CustomBlending</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span></div><div class='line' id='LC422'><span class="nx">i</span><span class="p">.</span><span class="nx">blendEquationSeparate</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendFuncSeparate</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">SRC_ALPHA</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_ALPHA</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">ONE</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_ALPHA</span><span class="p">)}</span><span class="nx">Q</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CustomBlending</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!==</span><span class="nx">Z</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">H</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span><span class="nx">Z</span><span class="o">=</span><span class="nx">b</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">!==</span><span class="nx">$</span><span class="o">||</span><span class="nx">d</span><span class="o">!==</span><span class="nx">ha</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">H</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">H</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="nx">$</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">ha</span><span class="o">=</span><span class="nx">d</span><span class="p">}}</span><span class="k">else</span> <span class="nx">ha</span><span class="o">=</span><span class="nx">$</span><span class="o">=</span><span class="nx">Z</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">setTexture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">();</span><span class="nx">G</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">textures</span><span class="o">++</span><span class="p">}</span><span class="nx">i</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">b</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">pixelStorei</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">UNPACK_PREMULTIPLY_ALPHA_WEBGL</span><span class="p">,</span></div><div class='line' id='LC423'><span class="nx">a</span><span class="p">.</span><span class="nx">premultiplyAlpha</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="nx">y</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">onUpdate</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">onUpdate</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="nx">i</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">b</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">)}};</span><span class="k">this</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span> <span class="k">instanceof</span></div><div class='line' id='LC424'><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">();</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="o">=</span><span class="p">[];</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="nx">y</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createFramebuffer</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createRenderbuffer</span><span class="p">();</span></div><div class='line' id='LC425'><span class="nx">i</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindFramebuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">framebufferTexture2D</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">COLOR_ATTACHMENT0</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">a</span><span class="p">)}</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createFramebuffer</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">createRenderbuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="nx">y</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span></div><div class='line' id='LC426'><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindFramebuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">framebufferTexture2D</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">COLOR_ATTACHMENT0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">)}</span><span class="nx">b</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindRenderbuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindFramebuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="kc">null</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="p">]</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">b</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span></div><div class='line' id='LC427'><span class="nx">c</span><span class="o">=</span><span class="nx">gb</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">Lb</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">Kb</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">lb</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!==</span><span class="nx">C</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">bindFramebuffer</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">viewport</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">C</span><span class="o">=</span><span class="nx">b</span><span class="p">}</span><span class="nx">hb</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">Cb</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapPlugin</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShadowMapPlugin</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">addPrePlugin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapPlugin</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">addPostPlugin</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpritePlugin</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">addPostPlugin</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlarePlugin</span><span class="p">)};</span></div><div class='line' id='LC428'><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapLinearFilter</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">format</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">format</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">:</span></div><div class='line' id='LC429'><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedByteType</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span></div><div class='line' id='LC430'><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span></div><div class='line' id='LC431'><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">positionWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">copy</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">)};</span></div><div class='line' id='LC432'><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace3</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroidScreen</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">faceMaterial</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uvs</span><span class="o">=</span><span class="p">[[]];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span></div><div class='line' id='LC433'><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace4</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v4</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroidWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroidScreen</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalsWorld</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">faceMaterial</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uvs</span><span class="o">=</span><span class="p">[[]];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span></div><div class='line' id='LC434'><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableParticle</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableLine</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span></div><div class='line' id='LC435'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ColorUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">adjustHSV</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ColorUtils</span><span class="p">.</span><span class="nx">__hsv</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ColorUtils</span><span class="p">.</span><span class="nx">rgbToHsv</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">h</span><span class="o">+</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">v</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">setHSV</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">v</span><span class="p">)},</span><span class="nx">rgbToHsv</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">e</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">===</span><span class="nx">f</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="o">-</span><span class="nx">g</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="o">===</span><span class="nx">f</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="nx">h</span><span class="o">:</span><span class="nx">d</span><span class="o">===</span><span class="nx">f</span><span class="o">?</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="nx">h</span><span class="o">:</span><span class="mi">4</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">/</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="mi">6</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="nx">c</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="nx">b</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="nx">h</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="o">:</span><span class="mi">0</span><span class="p">});</span><span class="nx">b</span><span class="p">.</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">}};</span></div><div class='line' id='LC436'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ColorUtils</span><span class="p">.</span><span class="nx">__hsv</span><span class="o">=</span><span class="p">{</span><span class="nx">h</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span></div><div class='line' id='LC437'><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">merge</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="p">{},</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">)</span><span class="nx">m</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">o</span><span class="p">].</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">extractRotation</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">scale</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">q</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">o</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)}</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">q</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span></div><div class='line' id='LC438'><span class="nx">l</span><span class="p">[</span><span class="nx">o</span><span class="p">],</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">c</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">c</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="p">));</span><span class="nx">r</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">u</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">u</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">u</span><span class="p">)}</span><span class="nx">r</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">u</span><span class="o">=</span><span class="nx">y</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">clone</span><span class="p">())}</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">y</span><span class="o">=</span></div><div class='line' id='LC439'><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">y</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">)}</span><span class="nx">r</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">y</span><span class="p">}</span><span class="nx">r</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">)}</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">q</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">o</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">u</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">v</span><span class="p">));</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">)}},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">materials</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">clone</span><span class="p">());</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">clone</span><span class="p">());</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span></div><div class='line' id='LC440'><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">u</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">v</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">randomPointInTriangle</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">__v1</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">}</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">d</span><span class="o">-</span><span class="nx">e</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">},</span><span class="nx">randomPointInFace</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span></div><div class='line' id='LC441'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">randomPointInTriangle</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">g</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area2</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area1</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area2</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area1</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area2</span><span class="o">=</span><span class="nx">g</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span></div><div class='line' id='LC442'><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="nx">g</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">randomPointInTriangle</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">randomPointInTriangle</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">)}},</span><span class="nx">randomPointsInGeometry</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="k">return</span> <span class="nx">l</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">l</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span></div><div class='line' id='LC443'><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area1</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area2</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area1</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area2</span><span class="p">}</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">}</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">randomPointInFace</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">a</span><span class="p">,</span><span class="kc">true</span><span class="p">)}</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">triangleArea</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">__v1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">))},</span><span class="nx">center</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeBoundingBox</span><span class="p">();</span></div><div class='line' id='LC444'><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">).</span><span class="nx">makeTranslation</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeBoundingBox</span><span class="p">();</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">normalizeUVs</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">u</span><span class="o">!==</span><span class="mi">1</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">u</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">u</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">u</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">v</span><span class="o">!==</span><span class="mi">1</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">v</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">v</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">v</span><span class="p">)}},</span><span class="nx">triangulateQuads</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span></div><div class='line' id='LC445'><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">4</span><span class="p">){</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span></div><div class='line' id='LC446'><span class="nx">m</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">clone</span><span class="p">()}</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">length</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="nx">b</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="p">[</span><span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">j</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">()];</span><span class="nx">j</span><span class="o">=</span><span class="p">[</span><span class="nx">j</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">()];</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">j</span><span class="p">)}</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">length</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="nx">b</span><span class="p">];</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">j</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span></div><div class='line' id='LC447'><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">])}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeTangents</span><span class="p">()},</span><span class="nx">explode</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span></div><div class='line' id='LC448'><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="mi">2</span><span class="p">}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">delete</span> <span class="nx">a</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="p">},</span><span class="nx">tessellate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="p">[],</span><span class="nx">H</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">H</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">c</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&gt;</span></div><div class='line' id='LC449'><span class="nx">b</span><span class="o">||</span><span class="nx">q</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">||</span><span class="nx">m</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&gt;=</span><span class="nx">q</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="o">&gt;=</span><span class="nx">m</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">l</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="o">&gt;=</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="o">&gt;=</span><span class="nx">m</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">l</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span></div><div class='line' id='LC450'><span class="nx">j</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">])}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">])}</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">l</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span></div><div class='line' id='LC451'><span class="nx">l</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="nx">e</span><span class="o">=</span><span class="mi">2</span><span class="p">}</span><span class="nx">w</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">length</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">f</span><span class="p">][</span><span class="nx">c</span><span class="p">];</span><span class="nx">s</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">y</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span></div><div class='line' id='LC452'><span class="mi">0</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">clone</span><span class="p">()];</span><span class="nx">h</span><span class="o">=</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">clone</span><span class="p">()]}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">()];</span><span class="nx">h</span><span class="o">=</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">()]}</span><span class="k">else</span><span class="p">{</span><span class="nx">k</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">()];</span><span class="nx">h</span><span class="o">=</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">clone</span><span class="p">()]}</span><span class="nx">H</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="nx">w</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">H</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">f</span><span class="p">][</span><span class="nx">c</span><span class="p">])}}</span><span class="k">else</span><span class="p">{</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">c</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">d</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span></div><div class='line' id='LC453'><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">||</span><span class="nx">q</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">||</span><span class="nx">n</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">||</span><span class="nx">r</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">){</span><span class="nx">u</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="o">&gt;=</span><span class="nx">q</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="o">&gt;=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="o">&gt;=</span><span class="nx">r</span><span class="o">||</span><span class="nx">n</span><span class="o">&gt;=</span><span class="nx">q</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&gt;=</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&gt;=</span><span class="nx">r</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">o</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">u</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">u</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">4</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span></div><div class='line' id='LC454'><span class="nx">y</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">4</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">o</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">o</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">u</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">u</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">4</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span></div><div class='line' id='LC455'><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">4</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="p">}</span><span class="nx">w</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span></div><div class='line' id='LC456'><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">length</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">f</span><span class="p">][</span><span class="nx">c</span><span class="p">];</span><span class="nx">s</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">y</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">p</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">p</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">()];</span><span class="nx">h</span><span class="o">=</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">p</span><span class="p">.</span><span class="nx">clone</span><span class="p">()]}</span><span class="k">else</span><span class="p">{</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">p</span><span class="p">.</span><span class="nx">lerpSelf</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">p</span><span class="p">.</span><span class="nx">clone</span><span class="p">()];</span><span class="nx">h</span><span class="o">=</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">()]}</span><span class="nx">H</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">h</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="nx">w</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">H</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">f</span><span class="p">][</span><span class="nx">c</span><span class="p">])}}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span></div><div class='line' id='LC457'><span class="nx">w</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="o">=</span><span class="nx">H</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">random</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random16</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">__v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span></div><div class='line' id='LC458'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">crossOrigin</span><span class="o">:</span><span class="s2">&quot;anonymous&quot;</span><span class="p">,</span><span class="nx">loadTexture</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">Image</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span><span class="nx">d</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">loadTextureCube</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">){</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">Image</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">onload</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">===</span><span class="mi">6</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">src</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]}</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">getNormalMap</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></div><div class='line' id='LC459'><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="k">return</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="nx">b</span><span class="p">]},</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">|</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">).</span><span class="nx">data</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">createImageData</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">p</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">p</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="o">+</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[],</span><span class="nx">u</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">k</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC460'><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">k</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">n</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">n</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">o</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">n</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">o</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">k</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">[(</span><span class="nx">o</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">m</span><span class="o">=</span><span class="p">[];</span><span class="nx">q</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">q</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">o</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">[(</span><span class="nx">o</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">q</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">u</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">u</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">u</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">u</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">u</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">u</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">([</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">t</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">n</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">t</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]]))}</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">m</span><span class="p">[</span><span class="nx">o</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">m</span><span class="p">[</span><span class="nx">o</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">m</span><span class="p">[</span><span class="nx">o</span><span class="p">][</span><span class="mi">2</span><span class="p">]}</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC461'><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span><span class="p">(</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">k</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">u</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">*</span><span class="mi">255</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">u</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mi">255</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">u</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="mi">255</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">u</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="p">}</span><span class="nx">g</span><span class="p">.</span><span class="nx">putImageData</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">generateDataTexture</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">d</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="mi">255</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="o">*</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBFormat</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span></div><div class='line' id='LC462'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">showHierarchy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneUtils</span><span class="p">.</span><span class="nx">traverseHierarchy</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">b</span><span class="p">})},</span><span class="nx">traverseHierarchy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneUtils</span><span class="p">.</span><span class="nx">traverseHierarchy</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)}},</span><span class="nx">createMultiMaterialObject</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span><span class="nx">e</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">cloneObject</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span></div><div class='line' id='LC463'><span class="nx">b</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">direction</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span></div><div class='line' id='LC464'><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">sortParticles</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">({});</span><span class="nx">b</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">blending</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">mergeWith3D</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mergeWith3D</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">alignment</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">alignment</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">rotation3d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">rotation3d</span><span class="p">);</span></div><div class='line' id='LC465'><span class="nx">b</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MarchingCubes</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MarchingCubes</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">resolution</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">field</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">field</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">isolation</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">isolation</span><span class="p">}</span><span class="k">else</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">up</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">rotation</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">rotation</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">eulerOrder</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">eulerOrder</span><span class="p">;</span></div><div class='line' id='LC466'><span class="nx">b</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">dynamic</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">dynamic</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">doubleSided</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">flipSided</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderDepth</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">renderDepth</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixRotationWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixRotationWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">boundRadius</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">boundRadius</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">boundRadiusScale</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">boundRadiusScale</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="p">;</span></div><div class='line' id='LC467'><span class="nx">b</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneUtils</span><span class="p">.</span><span class="nx">cloneObject</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span><span class="nx">b</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">b</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">LODs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">LODs</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">visibleAtDistance</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">LODs</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">visibleAtDistance</span><span class="p">,</span><span class="nx">object3D</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">]};</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">detach</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">attach</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span></div><div class='line' id='LC468'><span class="nx">b</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">)}};</span></div><div class='line' id='LC469'><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderer</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">lib</span><span class="o">:</span><span class="p">{</span><span class="nx">fresnel</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{</span><span class="nx">mRefractionRatio</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">1.02</span><span class="p">},</span><span class="nx">mFresnelBias</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">0.1</span><span class="p">},</span><span class="nx">mFresnelPower</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="p">},</span><span class="nx">mFresnelScale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">tCube</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">}},</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform samplerCube tCube;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\nvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\nrefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\nrefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\nrefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\nrefractedColor.a = 1.0;\ngl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n}&quot;</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;uniform float mRefractionRatio;\nuniform float mFresnelBias;\nuniform float mFresnelScale;\nuniform float mFresnelPower;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = normalize ( mat3( objectMatrix[0].xyz, objectMatrix[1].xyz, objectMatrix[2].xyz ) * normal );\nvec3 I = mPosition.xyz - cameraPosition;\nvReflect = reflect( I, nWorld );\nvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\nvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\nvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\nvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\ngl_Position = projectionMatrix * mvPosition;\n}&quot;</span><span class="p">},</span></div><div class='line' id='LC470'><span class="nx">normal</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">lights</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">,{</span><span class="nx">enableAO</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">enableDiffuse</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">enableSpecular</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">enableReflection</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">tDiffuse</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tCube</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tNormal</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tSpecular</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tAO</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tDisplacement</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">5</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">uNormalScale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span></div><div class='line' id='LC471'><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">uDisplacementBias</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">uDisplacementScale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">uDiffuseColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)},</span><span class="nx">uSpecularColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">1118481</span><span class="p">)},</span><span class="nx">uAmbientColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)},</span><span class="nx">uShininess</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">30</span><span class="p">},</span><span class="nx">uOpacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">uReflectivity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">0.5</span><span class="p">},</span><span class="nx">uOffset</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v2&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)},</span><span class="nx">uRepeat</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v2&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">wrapRGB</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v3&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)}}]),</span></div><div class='line' id='LC472'><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform float uNormalScale;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;&quot;</span><span class="p">,</span></div><div class='line' id='LC473'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS &gt; 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\nvec3 pointVector = normalize( vPointLight[ i ].xyz );\nfloat pointDistance = vPointLight[ i ].w;\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_DIR_LIGHTS &gt; 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS &gt; 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor) + totalSpecular;\nif ( enableReflection ) {\nvec3 wPos = cameraPosition - vViewPosition;\nvec3 vReflect = reflect( normalize( wPos ), normal );\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}&quot;</span><span class="p">,</span></div><div class='line' id='LC474'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">linear_to_gamma_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\nvarying vec3 vViewPosition;&quot;</span><span class="p">,</span></div><div class='line' id='LC475'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvViewPosition = -mvPosition.xyz;\nvNormal = normalMatrix * normal;\nvTangent = normalMatrix * tangent.xyz;\nvBinormal = cross( vNormal, vTangent ) * tangent.w;\nvUv = uv * uRepeat + uOffset;\n#if MAX_POINT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_POINT_LIGHTS; i++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#ifdef VERTEX_TEXTURES\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\nvec4 displacedPosition = vec4( normalize( vNormal.xyz ) * df, 0.0 ) + mvPosition;\ngl_Position = projectionMatrix * displacedPosition;\n#else\ngl_Position = projectionMatrix * mvPosition;\n#endif&quot;</span><span class="p">,</span></div><div class='line' id='LC476'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">cube</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{</span><span class="nx">tCube</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">texture</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tFlip</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:-</span><span class="mi">1</span><span class="p">}},</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;varying vec3 vViewPosition;\nvoid main() {\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvViewPosition = cameraPosition - mPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}&quot;</span><span class="p">,</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vViewPosition;\nvoid main() {\nvec3 wPos = cameraPosition - vViewPosition;\ngl_FragColor = textureCube( tCube, vec3( tFlip * wPos.x, wPos.yz ) );\n}&quot;</span><span class="p">}}});</span></div><div class='line' id='LC477'><span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColorArray</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexUvArray</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalArray</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexPositionArray</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexIndexArray</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColorBuffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexUvBuffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalBuffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexPositionBuffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexIndexBuffer</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">dynamic</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="p">[]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">,</span><span class="nx">computeBoundingBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">computeBoundingSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(){}};</span></div><div class='line' id='LC478'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Warning, getPoint() not implemented!&quot;</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPointAt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getUtoTmapping</span><span class="p">(</span><span class="nx">a</span><span class="p">))};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">5</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="nx">a</span><span class="p">));</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">5</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getPointAt</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="nx">a</span><span class="p">));</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span></div><div class='line' id='LC479'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getLengths</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLengths</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__arcLengthDivisions</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">__arcLengthDivisions</span><span class="o">:</span><span class="mi">200</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheArcLengths</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheArcLengths</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheArcLengths</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">e</span><span class="o">/</span><span class="nx">a</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheArcLengths</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span></div><div class='line' id='LC480'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateArcLengths</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">getLengths</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getUtoTmapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getLengths</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;=</span><span class="nx">h</span><span class="p">;){</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">break</span><span class="p">}}</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">==</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">return</span> <span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">g</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getNormalVector</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getTangent</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">)};</span></div><div class='line' id='LC481'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">clone</span><span class="p">().</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">normalize</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangentAt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getTangent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getUtoTmapping</span><span class="p">(</span><span class="nx">a</span><span class="p">))};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">;</span></div><div class='line' id='LC482'><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">subSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPointAt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangent</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">subSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">).</span><span class="nx">normalize</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">;</span></div><div class='line' id='LC483'><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">tangentQuadraticBezier</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">tangentQuadraticBezier</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span></div><div class='line' id='LC484'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="o">=</span><span class="nx">d</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span></div><div class='line' id='LC485'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">tangentCubicBezier</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">tangentCubicBezier</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="nx">a</span><span class="o">==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="p">[]</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">;</span></div><div class='line' id='LC486'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span></div><div class='line' id='LC487'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">aX</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aY</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aRadius</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aStartAngle</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aEndAngle</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aClockwise</span><span class="o">=</span><span class="nx">f</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">aEndAngle</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">aStartAngle</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aClockwise</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">aStartAngle</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">aX</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">aRadius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">aY</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">aRadius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span></div><div class='line' id='LC488'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="o">=</span><span class="p">{</span><span class="nx">tangentQuadraticBezier</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">)},</span><span class="nx">tangentCubicBezier</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="p">},</span><span class="nx">tangentSpline</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="mi">4</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">)},</span><span class="nx">interpolate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">b</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">}};</span></div><div class='line' id='LC489'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">});</span></div><div class='line' id='LC490'><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">c</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)});</span></div><div class='line' id='LC491'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="o">=</span><span class="nx">d</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)});</span></div><div class='line' id='LC492'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="nx">a</span><span class="o">==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="p">[]</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">e</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]];</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">});</span></div><div class='line' id='LC493'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClosedSplineCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="nx">a</span><span class="o">==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="p">[]</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">z</span><span class="p">,</span></div><div class='line' id='LC494'><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">z</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">z</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">z</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">});</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClose</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">add</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">checkConnection</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span></div><div class='line' id='LC495'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">closePath</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getPoint</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">getPoint</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">))};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">getLength</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurveLengths</span><span class="p">(),</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">-</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">getLength</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">getPointAt</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="nx">a</span><span class="o">++</span><span class="p">}</span><span class="k">return</span> <span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurveLengths</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]};</span></div><div class='line' id='LC496'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getCurveLengths</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheLengths</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheLengths</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheLengths</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">getLength</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheLengths</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span></div><div class='line' id='LC497'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getBoundingBox</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">(),</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="nb">Number</span><span class="p">.</span><span class="nx">NEGATIVE_INFINITY</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="nb">Number</span><span class="p">.</span><span class="nx">POSITIVE_INFINITY</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">)}</span><span class="k">return</span><span class="p">{</span><span class="nx">minX</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">minY</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">maxX</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">maxY</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">centroid</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="nx">h</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createPointsGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">createGeometry</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kc">true</span><span class="p">))};</span></div><div class='line' id='LC498'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createSpacedPointsGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">createGeometry</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kc">true</span><span class="p">))};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addWrapPath</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></div><div class='line' id='LC499'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTransformedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getWrapPoints</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTransformedSpacedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getWrapPoints</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span></div><div class='line' id='LC500'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getWrapPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getBoundingBox</span><span class="p">(),</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxX</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUtoTmapping</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getNormalVector</span><span class="p">(</span><span class="nx">j</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span></div><div class='line' id='LC501'><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventTarget</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">addEventListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">])</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">][</span><span class="nx">c</span><span class="p">](</span><span class="nx">b</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">d</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">;</span></div><div class='line' id='LC502'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">||</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">decompose</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">translationWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleWorld</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">decompose</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">translationObject</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationObject</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleObject</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">translationWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationObject</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleWorld</span><span class="p">)}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span></div><div class='line' id='LC503'><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">translationWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">translationObject</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">rotationWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">rotationObject</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">scaleWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">scaleObject</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span></div><div class='line' id='LC504'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fromPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="o">=</span><span class="p">{</span><span class="nx">MOVE_TO</span><span class="o">:</span><span class="s2">&quot;moveTo&quot;</span><span class="p">,</span><span class="nx">LINE_TO</span><span class="o">:</span><span class="s2">&quot;lineTo&quot;</span><span class="p">,</span><span class="nx">QUADRATIC_CURVE_TO</span><span class="o">:</span><span class="s2">&quot;quadraticCurveTo&quot;</span><span class="p">,</span><span class="nx">BEZIER_CURVE_TO</span><span class="o">:</span><span class="s2">&quot;bezierCurveTo&quot;</span><span class="p">,</span><span class="nx">CSPLINE_THRU</span><span class="o">:</span><span class="s2">&quot;splineThru&quot;</span><span class="p">,</span><span class="nx">ARC</span><span class="o">:</span><span class="s2">&quot;arc&quot;</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">fromPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">y</span><span class="p">)};</span></div><div class='line' id='LC505'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">moveTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">MOVE_TO</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">c</span><span class="p">})};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">lineTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)));</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">LINE_TO</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">c</span><span class="p">})};</span></div><div class='line' id='LC506'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">quadraticCurveTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)));</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">QUADRATIC_CURVE_TO</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">e</span><span class="p">})};</span></div><div class='line' id='LC507'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bezierCurveTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)));</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">BEZIER_CURVE_TO</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">g</span><span class="p">})};</span></div><div class='line' id='LC508'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splineThru</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">])];</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">CSPLINE_THRU</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">b</span><span class="p">})};</span></div><div class='line' id='LC509'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">arc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">f</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">ARC</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">g</span><span class="p">})};</span></div><div class='line' id='LC510'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">absarc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">f</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">ARC</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">g</span><span class="p">})};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">40</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">c</span><span class="o">/</span><span class="nx">a</span><span class="p">));</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span></div><div class='line' id='LC511'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">useSpacedPoints</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;tata&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">12</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">action</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">args</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">MOVE_TO</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">LINE_TO</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">QUADRATIC_CURVE_TO</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span></div><div class='line' id='LC512'><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">];</span><span class="nx">q</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]}</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">n</span><span class="p">))}</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">BEZIER_CURVE_TO</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">];</span><span class="nx">q</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]}</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span></div><div class='line' id='LC513'><span class="nx">n</span><span class="p">))}</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">CSPLINE_THRU</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">])];</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">getPointAt</span><span class="p">(</span><span class="nx">f</span><span class="o">/</span><span class="nx">g</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">ARC</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">m</span><span class="o">=!!</span><span class="nx">f</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="nx">p</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">o</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">o</span><span class="p">;</span><span class="nx">m</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">n</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">p</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">k</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">n</span><span class="p">))}}}</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">)</span><span class="o">&lt;</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">10</span><span class="o">&amp;&amp;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y</span><span class="p">)</span><span class="o">&lt;</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">10</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span></div><div class='line' id='LC514'><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">transform</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">getBoundingBox</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getWrapPoints</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">nltransform</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">(),</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">k</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">k</span><span class="o">+</span><span class="nx">f</span><span class="p">}</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span></div><div class='line' id='LC515'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">debug</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getBoundingBox</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">maxX</span><span class="o">+</span><span class="mi">100</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">maxY</span><span class="o">+</span><span class="mi">100</span><span class="p">);</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;white&quot;</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">strokeStyle</span><span class="o">=</span><span class="s2">&quot;black&quot;</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">args</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">action</span><span class="p">;</span><span class="nx">d</span><span class="o">!=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">CSPLINE_THRU</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="nx">b</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">closePath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">strokeStyle</span><span class="o">=</span><span class="s2">&quot;red&quot;</span><span class="p">;</span></div><div class='line' id='LC516'><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">();</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">b</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="mf">1.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="kc">false</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">closePath</span><span class="p">()}};</span></div><div class='line' id='LC517'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toShapes</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">args</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">action</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">MOVE_TO</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">}</span><span class="nx">f</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="nx">f</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">!=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="o">=!</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getPoints</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">actions</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">actions</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">curves</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">curves</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span></div><div class='line' id='LC518'><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">())){</span><span class="nx">g</span><span class="p">.</span><span class="nx">actions</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">actions</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">curves</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">curves</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">}</span><span class="k">else</span> <span class="nx">g</span><span class="p">.</span><span class="nx">holes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">())){</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">actions</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">actions</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">curves</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">curves</span><span class="p">}</span><span class="k">else</span> <span class="nx">g</span><span class="p">.</span><span class="nx">holes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="o">=</span><span class="p">[]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">;</span></div><div class='line' id='LC519'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extrude</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPointsHoles</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">getTransformedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSpacedPointsHoles</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">getTransformedSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span></div><div class='line' id='LC520'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extractAllPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="nx">shape</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getTransformedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">holes</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getPointsHoles</span><span class="p">(</span><span class="nx">a</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extractPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">useSpacedPoints</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">extractAllSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">extractAllPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extractAllSpacedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="nx">shape</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getTransformedSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">holes</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getSpacedPointsHoles</span><span class="p">(</span><span class="nx">a</span><span class="p">)}};</span></div><div class='line' id='LC521'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="o">=</span><span class="p">{</span><span class="nx">removeHoles</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">concat</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">concat</span><span class="p">(),</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nb">Number</span><span class="p">.</span><span class="nx">POSITIVE_INFINITY</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">o</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span><span class="nx">k</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">o</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">p</span><span class="p">}}}</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]];</span><span class="nx">p</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]];</span><span class="nx">m</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">+</span></div><div class='line' id='LC522'><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">%</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">+</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">%</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]];</span><span class="nx">n</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]];</span><span class="nx">r</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">+</span><span class="nx">m</span><span class="o">&gt;</span><span class="nx">n</span><span class="o">+</span><span class="nx">r</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="o">%</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">+</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">%</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">l</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]];</span><span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">l</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]]);</span><span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">o</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">k</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">)}</span><span class="k">return</span><span class="p">{</span><span class="nx">shape</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span></div><div class='line' id='LC523'><span class="nx">isolatedPts</span><span class="o">:</span><span class="nx">q</span><span class="p">,</span><span class="nx">allpoints</span><span class="o">:</span><span class="nx">d</span><span class="p">}},</span><span class="nx">triangulateShape</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">removeHoles</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">allpoints</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">isolatedPts</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">shape</span><span class="p">,</span><span class="kc">false</span><span class="p">),</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">{};</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Duplicate point&quot;</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">}</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">j</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">)}}</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">j</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">)}}</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span></div><div class='line' id='LC524'><span class="nx">isClockWise</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">},</span><span class="nx">b2p0</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b2p1</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b2p2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">b2p0</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b2p1</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b2p2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)},</span><span class="nx">b3p0</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b3p1</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="mi">3</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b3p2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b3p3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">b3p0</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b3p1</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b3p2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">+</span></div><div class='line' id='LC525'><span class="k">this</span><span class="p">.</span><span class="nx">b3p3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextPath</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">parameters</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextPath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">set</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">parameters</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">text</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">curveSegments</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">curveSegments</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">font</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">font</span><span class="o">:</span><span class="s2">&quot;helvetiker&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">weight</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">weight</span><span class="o">:</span><span class="s2">&quot;normal&quot;</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">style</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">style</span><span class="o">:</span><span class="s2">&quot;normal&quot;</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="o">:</span><span class="mi">100</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">divisions</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">face</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">weight</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">style</span><span class="o">=</span><span class="nx">f</span><span class="p">};</span></div><div class='line' id='LC526'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextPath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toShapes</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">drawText</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">text</span><span class="p">).</span><span class="nx">paths</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">toShapes</span><span class="p">());</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span></div><div class='line' id='LC527'><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="p">{</span><span class="nx">update</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">update</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="nx">addToUpdate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">===-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="nx">removeFromUpdate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.AnimationHandler.add: Warning! &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot; already exists in library. Overwriting.&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">initialized</span><span class="o">!==</span><span class="kc">true</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">time</span><span class="o">&lt;</span></div><div class='line' id='LC528'><span class="mi">0</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">rot</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">rot</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">rot</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">rot</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="mi">3</span><span class="p">])}}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">morphTargets</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">h</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">usedMorphTargets</span><span class="o">=</span></div><div class='line' id='LC529'><span class="nx">h</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span> <span class="k">in</span> <span class="nx">h</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">===</span><span class="nx">l</span><span class="p">){</span><span class="nx">k</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargetsInfluences</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="k">break</span><span class="p">}</span><span class="nx">j</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">)}</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargetsInfluences</span><span class="o">=</span><span class="nx">k</span><span class="p">}}</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">time</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">time</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="o">--</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">index</span><span class="o">=</span></div><div class='line' id='LC530'><span class="nx">d</span><span class="p">}</span><span class="nx">d</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">fps</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">JIT</span><span class="o">=</span><span class="p">{};</span><span class="nx">a</span><span class="p">.</span><span class="nx">JIT</span><span class="p">.</span><span class="nx">hierarchy</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">JIT</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">Array</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">initialized</span><span class="o">=</span><span class="kc">true</span><span class="p">}},</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">===</span><span class="s2">&quot;string&quot;</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.AnimationHandler.get: Couldn&#39;t find animation &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="p">}},</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span><span class="k">else</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">}},</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span></div><div class='line' id='LC531'><span class="nx">b</span><span class="p">)};</span><span class="nx">c</span><span class="p">.</span><span class="nx">LINEAR</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">CATMULLROM</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">timeScale</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">LINEAR</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">=</span><span class="nx">d</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></div><div class='line' id='LC532'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">play</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="o">=</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">=</span><span class="p">{};</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">prevKey</span><span class="o">=</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">rot</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">scl</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">nextKey</span><span class="o">=</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">rot</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">scl</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="o">=</span></div><div class='line' id='LC533'><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrix</span><span class="p">}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">prevKey</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">nextKey</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">pos</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">f</span><span class="p">.</span><span class="nx">rot</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">f</span><span class="p">.</span><span class="nx">scl</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">pos</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="s2">&quot;pos&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">rot</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="s2">&quot;rot&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">scl</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="s2">&quot;scl&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">addToUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span></div><div class='line' id='LC534'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pause</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">addToUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">removeFromUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="p">};</span></div><div class='line' id='LC535'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stop</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">removeFromUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">animationCache</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">matrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="p">;</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">animationCache</span><span class="p">}};</span></div><div class='line' id='LC536'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;pos&quot;</span><span class="p">,</span><span class="s2">&quot;rot&quot;</span><span class="p">,</span><span class="s2">&quot;scl&quot;</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">JIT</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">timeScale</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">p</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fps</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fps</span><span class="p">),</span><span class="mi">10</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">q</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">o</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">[</span><span class="nx">o</span><span class="p">][</span><span class="nx">l</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">o</span><span class="p">][</span><span class="nx">l</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span></div><div class='line' id='LC537'><span class="kc">false</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">o</span><span class="p">][</span><span class="nx">l</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="p">)</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">prevKey</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">nextKey</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;=</span><span class="nx">m</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">o</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;){</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span><span class="k">return</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">do</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span></div><div class='line' id='LC538'><span class="nx">o</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span><span class="k">while</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">)}</span><span class="nx">j</span><span class="p">.</span><span class="nx">prevKey</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">nextKey</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">p</span><span class="o">-</span><span class="nx">g</span><span class="p">.</span><span class="nx">time</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">time</span><span class="o">-</span><span class="nx">g</span><span class="p">.</span><span class="nx">time</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">d</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.Animation.update: Warning! Scale out of bounds:&quot;</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="s2">&quot; on bone &quot;</span><span class="o">+</span><span class="nx">o</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">===</span><span class="s2">&quot;pos&quot;</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">LINEAR</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span></div><div class='line' id='LC539'><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPrevKeyWith</span><span class="p">(</span><span class="s2">&quot;pos&quot;</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">index</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">pos</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="s2">&quot;pos&quot;</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">pos</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="mf">0.33</span><span class="o">+</span><span class="mf">0.33</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolateCatmullRom</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolateCatmullRom</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">d</span><span class="o">*</span><span class="mf">1.01</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></div><div class='line' id='LC540'><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">===</span><span class="s2">&quot;rot&quot;</span><span class="p">)</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">.</span><span class="nx">slerp</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">===</span><span class="s2">&quot;scl&quot;</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">}}}}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">l</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">)</span><span class="nx">k</span><span class="p">[</span><span class="nx">o</span><span class="p">][</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">o</span><span class="p">].</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">clone</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">o</span><span class="p">].</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">clone</span><span class="p">()}}};</span></div><div class='line' id='LC541'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">interpolateCatmullRom</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]];</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">l</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span></div><div class='line' id='LC542'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">interpolate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="o">?</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">a</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]};</span></div><div class='line' id='LC543'><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPrevKeyWith</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="o">?</span><span class="nx">c</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">a</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]};</span></div><div class='line' id='LC544'><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">timeScale</span><span class="o">=</span><span class="mf">0.0010</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">sids</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span></div><div class='line' id='LC545'><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">node</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}}};</span></div><div class='line' id='LC546'><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">play</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="o">=</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">startTimeMs</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="o">=</span><span class="mi">1</span><span class="nx">E7</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">endTime</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">=</span><span class="p">{};</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">prevKey</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">nextKey</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span></div><div class='line' id='LC547'><span class="nx">e</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrix</span><span class="p">}</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">prevKey</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">nextKey</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">time</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">endTime</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">time</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">endTime</span><span class="p">)}}</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">addToUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pause</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">addToUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">removeFromUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="p">};</span></div><div class='line' id='LC548'><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stop</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">removeFromUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="nx">d</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="nx">d</span><span class="p">}</span><span class="k">delete</span> <span class="nx">c</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">}}};</span></div><div class='line' id='LC549'><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">JIT</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">timeScale</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">startTimeMs</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">startTimeMs</span><span class="o">+</span><span class="nx">g</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">g</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fps</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fps</span><span class="p">),</span><span class="mi">10</span><span class="p">);</span><span class="k">if</span><span class="p">((</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">keys</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">sids</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span></div><div class='line' id='LC550'><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">k</span><span class="p">];(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPrevKeyWith</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">node</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="k">this</span><span class="p">.</span><span class="nx">stop</span><span class="p">()}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">g</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="p">)){</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">keys</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">e</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">e</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">e</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span></div><div class='line' id='LC551'><span class="kc">true</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">)</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">prevKey</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">nextKey</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;=</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;){</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">j</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="o">!==</span><span class="nx">m</span><span class="p">;){</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]}</span><span class="nx">p</span><span class="p">.</span><span class="nx">prevKey</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">nextKey</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;=</span><span class="nx">g</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">node</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">e</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span></div><div class='line' id='LC552'><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">clone</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">clone</span><span class="p">()}}}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">%</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">hasTarget</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]};</span></div><div class='line' id='LC553'><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPrevKeyWith</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">hasTarget</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]};</span></div><div class='line' id='LC554'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span></div><div class='line' id='LC555'><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">renderTarget</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">,{</span><span class="nx">format</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBFormat</span><span class="p">,</span><span class="nx">magFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">,</span><span class="nx">minFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">updateCubeMap</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">renderTarget</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span></div><div class='line' id='LC556'><span class="mi">2</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">c</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeCamera</span><span class="p">;</span></div><div class='line' id='LC557'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="o">=-</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=-</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">(</span><span class="nx">a</span><span class="o">/-</span><span class="mi">2</span><span class="p">,</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="o">/-</span><span class="mi">2</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">;</span></div><div class='line' id='LC558'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toPerspective</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">near</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">far</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inPersepectiveMode</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inOrthographicMode</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span></div><div class='line' id='LC559'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toOrthographic</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">aspect</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">near</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">far</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">tan</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">left</span><span class="o">=-</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=-</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">near</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">far</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inPersepectiveMode</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inOrthographicMode</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span></div><div class='line' id='LC560'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">aspect</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="o">=-</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=-</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setFov</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inPersepectiveMode</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">toOrthographic</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inPersepectiveMode</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">();</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">toOrthographic</span><span class="p">()}};</span></div><div class='line' id='LC561'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setLens</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan</span><span class="p">((</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">24</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="mi">180</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setFov</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setZoom</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inPersepectiveMode</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">toOrthographic</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toFrontView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span></div><div class='line' id='LC562'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toBackView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toLeftView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toRightView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span></div><div class='line' id='LC563'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toTopView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toBottomView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span></div><div class='line' id='LC564'><span class="nx">THREE</span><span class="p">.</span><span class="nx">FirstPersonControls</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nb">document</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">movementSpeed</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lookSpeed</span><span class="o">=</span><span class="mf">0.0050</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">noFly</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lookVertical</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoForward</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">activeLook</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightSpeed</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightCoef</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightMin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">constrainVertical</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalMin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalMax</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">=</span></div><div class='line' id='LC565'><span class="k">this</span><span class="p">.</span><span class="nx">autoSpeedFactor</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseDragOn</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">freeze</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">moveRight</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">moveLeft</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">moveBackward</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">moveForward</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">===</span><span class="nb">document</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfX</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfY</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="o">/</span><span class="mi">2</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfX</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfY</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;tabindex&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">onMouseDown</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">!==</span><span class="nb">document</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">activeLook</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">button</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveForward</span><span class="o">=</span></div><div class='line' id='LC566'><span class="kc">true</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveBackward</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseDragOn</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">onMouseUp</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">activeLook</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">button</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveForward</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveBackward</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseDragOn</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">onMouseMove</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">===</span><span class="nb">document</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageX</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfX</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageY</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfY</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageX</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfX</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageY</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetTop</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfY</span><span class="p">}};</span></div><div class='line' id='LC567'><span class="k">this</span><span class="p">.</span><span class="nx">onKeyDown</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">){</span><span class="k">case</span> <span class="mi">38</span><span class="o">:</span><span class="k">case</span> <span class="mi">87</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveForward</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">37</span><span class="o">:</span><span class="k">case</span> <span class="mi">65</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveLeft</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">40</span><span class="o">:</span><span class="k">case</span> <span class="mi">83</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveBackward</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">39</span><span class="o">:</span><span class="k">case</span> <span class="mi">68</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveRight</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">82</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveUp</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">70</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveDown</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">81</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">freeze</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">freeze</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">onKeyUp</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">){</span><span class="k">case</span> <span class="mi">38</span><span class="o">:</span><span class="k">case</span> <span class="mi">87</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveForward</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">37</span><span class="o">:</span><span class="k">case</span> <span class="mi">65</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveLeft</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">40</span><span class="o">:</span><span class="k">case</span> <span class="mi">83</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveBackward</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">39</span><span class="o">:</span><span class="k">case</span> <span class="mi">68</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveRight</span><span class="o">=</span></div><div class='line' id='LC568'><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">82</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveUp</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">70</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveDown</span><span class="o">=</span><span class="kc">false</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">freeze</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">heightSpeed</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">heightMin</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">heightMax</span><span class="p">)</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">heightMin</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoSpeedFactor</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">heightCoef</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">autoSpeedFactor</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">movementSpeed</span><span class="p">;(</span><span class="k">this</span><span class="p">.</span><span class="nx">moveForward</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">autoForward</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">moveBackward</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateZ</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">autoSpeedFactor</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">moveBackward</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateZ</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">moveLeft</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateX</span><span class="p">(</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span></div><div class='line' id='LC569'><span class="k">this</span><span class="p">.</span><span class="nx">moveRight</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateX</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">moveUp</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateY</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">moveDown</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateY</span><span class="p">(</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">lookSpeed</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">activeLook</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lookVertical</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="mi">85</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">85</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">=</span><span class="p">(</span><span class="mi">90</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">180</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">180</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">)</span><span class="o">*</span></div><div class='line' id='LC570'><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">constrainVertical</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalMax</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalMin</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lookVertical</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="mi">85</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">85</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">=</span><span class="p">(</span><span class="mi">90</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">180</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">180</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">constrainVertical</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">mapLinear</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalMin</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalMax</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span></div><div class='line' id='LC571'><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">b</span><span class="p">)}};</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;contextmenu&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()},</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousemove&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">onMouseMove</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">onMouseDown</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mouseup&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">onMouseUp</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">onKeyDown</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keyup&quot;</span><span class="p">,</span></div><div class='line' id='LC572'><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">onKeyUp</span><span class="p">),</span><span class="kc">false</span><span class="p">)};</span></div><div class='line' id='LC573'><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathControls</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">:-</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="o">--</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">fps</span><span class="o">:</span><span class="mf">0.6</span><span class="p">,</span><span class="nx">length</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">hierarchy</span><span class="o">:</span><span class="p">[]},</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getControlPointsArray</span><span class="p">(),</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getLength</span><span class="p">(),</span><span class="nx">r</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">r</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="nx">parent</span><span class="o">:-</span><span class="mi">1</span><span class="p">,</span><span class="nx">keys</span><span class="o">:</span><span class="p">[]};</span><span class="nx">b</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">time</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">pos</span><span class="o">:</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">rot</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="nx">scl</span><span class="o">:</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]};</span><span class="nx">b</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">time</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">pos</span><span class="o">:</span><span class="nx">g</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">rot</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="nx">scl</span><span class="o">:</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]};</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">r</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">u</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">chunks</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">/</span><span class="nx">h</span><span class="p">.</span><span class="nx">total</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">time</span><span class="o">:</span><span class="nx">u</span><span class="p">,</span><span class="nx">pos</span><span class="o">:</span><span class="nx">g</span><span class="p">[</span><span class="nx">f</span><span class="p">]}}</span><span class="nx">e</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span></div><div class='line' id='LC574'><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="p">,</span><span class="kc">false</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="o">/</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="p">)}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nb">document</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="s2">&quot;PathControls&quot;</span><span class="o">+</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathControlsIdCounter</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="mi">1</span><span class="nx">E4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">waypoints</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">useConstantSpeed</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">resamplingCoef</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">debugPath</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">debugDummy</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span></div><div class='line' id='LC575'><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lookSpeed</span><span class="o">=</span><span class="mf">0.0050</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lookHorizontal</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lookVertical</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalAngleMap</span><span class="o">=</span><span class="p">{</span><span class="nx">srcRange</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">],</span><span class="nx">dstRange</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">]};</span><span class="k">this</span><span class="p">.</span><span class="nx">horizontalAngleMap</span><span class="o">=</span><span class="p">{</span><span class="nx">srcRange</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">],</span><span class="nx">dstRange</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">]};</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">===</span><span class="nb">document</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfX</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfY</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="o">/</span><span class="mi">2</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfX</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfY</span><span class="o">=</span></div><div class='line' id='LC576'><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;tabindex&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">180</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lookHorizontal</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">lookSpeed</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lookVertical</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">lookSpeed</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">360</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="mi">85</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">85</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">=</span><span class="p">(</span><span class="mi">90</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">lat</span><span class="p">)</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lon</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">%</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">=</span><span class="nx">a</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="o">+</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalAngleMap</span><span class="p">.</span><span class="nx">srcRange</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">verticalAngleMap</span><span class="p">.</span><span class="nx">dstRange</span><span class="p">;</span></div><div class='line' id='LC577'><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">mapLinear</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="o">=</span><span class="nx">c</span><span class="p">((</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">horizontalAngleMap</span><span class="p">.</span><span class="nx">srcRange</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">horizontalAngleMap</span><span class="p">.</span><span class="nx">dstRange</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">mapLinear</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="o">=</span><span class="nx">c</span><span class="p">((</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">100</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">phi</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theta</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">position</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">onMouseMove</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">===</span></div><div class='line' id='LC578'><span class="nb">document</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageX</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfX</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageY</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfY</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseX</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageX</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfX</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseY</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageY</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetTop</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">viewHalfY</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">spline</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Spline</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">spline</span><span class="p">.</span><span class="nx">initFromArray</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">waypoints</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">useConstantSpeed</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">spline</span><span class="p">.</span><span class="nx">reparametrizeByArcLength</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resamplingCoef</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">createDebugDummy</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">30719</span><span class="p">}),</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">65280</span><span class="p">}),</span></div><div class='line' id='LC579'><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animation</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">spline</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">animation</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">spline</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animationParent</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">createDebugPath</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span></div><div class='line' id='LC580'><span class="k">this</span><span class="p">.</span><span class="nx">debugPath</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">spline</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16711680</span><span class="p">,</span><span class="nx">linewidth</span><span class="o">:</span><span class="mi">3</span><span class="p">}),</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16755200</span><span class="p">,</span><span class="nx">size</span><span class="o">:</span><span class="mi">3</span><span class="p">}));</span><span class="nx">g</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">65280</span><span class="p">}),</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">o</span><span class="p">]);</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">)}}</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousemove&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">(</span><span class="k">this</span><span class="p">,</span></div><div class='line' id='LC581'><span class="k">this</span><span class="p">.</span><span class="nx">onMouseMove</span><span class="p">),</span><span class="kc">false</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathControlsIdCounter</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span></div><div class='line' id='LC582'><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlyControls</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">b</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nb">document</span><span class="p">;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;tabindex&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">movementSpeed</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rollSpeed</span><span class="o">=</span><span class="mf">0.0050</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoForward</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">dragToLook</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">useQuaternion</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tmpQuaternion</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseStatus</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="o">=</span><span class="p">{</span><span class="nx">up</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">down</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">left</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">right</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">forward</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">back</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">pitchUp</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">pitchDown</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">yawLeft</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">yawRight</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">rollLeft</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">rollRight</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">moveVector</span><span class="o">=</span></div><div class='line' id='LC583'><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationVector</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">handleEvent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">]</span><span class="o">==</span><span class="s2">&quot;function&quot;</span><span class="p">)</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">](</span><span class="nx">a</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">keydown</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">altKey</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">){</span><span class="k">case</span> <span class="mi">16</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">movementSpeedMultiplier</span><span class="o">=</span><span class="mf">0.1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">87</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">forward</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">83</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">back</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">65</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">68</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">82</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">up</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">70</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">down</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">38</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">pitchUp</span><span class="o">=</span></div><div class='line' id='LC584'><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">40</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">pitchDown</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">37</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">yawLeft</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">39</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">yawRight</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">81</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">rollLeft</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">69</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">rollRight</span><span class="o">=</span><span class="mi">1</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMovementVector</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">updateRotationVector</span><span class="p">()}};</span><span class="k">this</span><span class="p">.</span><span class="nx">keyup</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">){</span><span class="k">case</span> <span class="mi">16</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">movementSpeedMultiplier</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">87</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">forward</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">83</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">back</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">65</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">68</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">82</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">up</span><span class="o">=</span></div><div class='line' id='LC585'><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">70</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">down</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">38</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">pitchUp</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">40</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">pitchDown</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">37</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">yawLeft</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">39</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">yawRight</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">81</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">rollLeft</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">69</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">rollRight</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMovementVector</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">updateRotationVector</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">mousedown</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">!==</span><span class="nb">document</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dragToLook</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseStatus</span><span class="o">++</span><span class="p">;</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">button</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">moveForward</span><span class="o">=</span></div><div class='line' id='LC586'><span class="kc">true</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">moveBackward</span><span class="o">=</span><span class="kc">true</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">mousemove</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">dragToLook</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseStatus</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getContainerDimensions</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">yawLeft</span><span class="o">=-</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageX</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">pitchDown</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">pageY</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateRotationVector</span><span class="p">()}};</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseup</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dragToLook</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseStatus</span><span class="o">--</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">yawLeft</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">pitchDown</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">button</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveForward</span><span class="o">=</span></div><div class='line' id='LC587'><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">moveBackward</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">updateRotationVector</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">movementSpeed</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">rollSpeed</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateX</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">moveVector</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateY</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">moveVector</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateZ</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">moveVector</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">tmpQuaternion</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationVector</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationVector</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationVector</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">multiplySelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tmpQuaternion</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">setRotationFromQuaternion</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">);</span></div><div class='line' id='LC588'><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMovementVector</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">forward</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">autoForward</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">back</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">moveVector</span><span class="p">.</span><span class="nx">x</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">left</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">right</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">moveVector</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">down</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">up</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">moveVector</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="nx">a</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">back</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">updateRotationVector</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationVector</span><span class="p">.</span><span class="nx">x</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">pitchDown</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">pitchUp</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationVector</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">yawRight</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">yawLeft</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationVector</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span></div><div class='line' id='LC589'><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">rollRight</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">moveState</span><span class="p">.</span><span class="nx">rollLeft</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getContainerDimensions</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">!=</span><span class="nb">document</span><span class="o">?</span><span class="p">{</span><span class="nx">size</span><span class="o">:</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">],</span><span class="nx">offset</span><span class="o">:</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">offsetTop</span><span class="p">]}</span><span class="o">:</span><span class="p">{</span><span class="nx">size</span><span class="o">:</span><span class="p">[</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">],</span><span class="nx">offset</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]}};</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousemove&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">mousemove</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">mousedown</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mouseup&quot;</span><span class="p">,</span></div><div class='line' id='LC590'><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseup</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">keydown</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keyup&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">keyup</span><span class="p">),</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMovementVector</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">updateRotationVector</span><span class="p">()};</span></div><div class='line' id='LC591'><span class="nx">THREE</span><span class="p">.</span><span class="nx">RollControls</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nb">document</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseLook</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoForward</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rollSpeed</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">movementSpeed</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lookSpeed</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">constrainVertical</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mf">0.9</span><span class="p">,</span><span class="mf">0.9</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">roll</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mouseLook</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span></div><div class='line' id='LC592'><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">lookSpeed</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotateHorizontally</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">p</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotateVertically</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">m</span><span class="p">)}</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">movementSpeed</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateZ</span><span class="p">(</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="p">(</span><span class="nx">j</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">autoForward</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">j</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateX</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">l</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">translateY</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">k</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">roll</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">roll</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">rollSpeed</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">constrainVertical</span><span class="p">[</span><span class="mi">1</span><span class="p">]){</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">constrainVertical</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">constrainVertical</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">constrainVertical</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()}</span><span class="nx">e</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">);</span></div><div class='line' id='LC593'><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">identity</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">roll</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">roll</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">roll</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC594'><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">roll</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">multiplySelf</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">translateX</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span></div><div class='line' id='LC595'><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">translateY</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">translateZ</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span></div><div class='line' id='LC596'><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">rotateHorizontally</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">rotateVertically</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]);</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">forward</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()};</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;contextmenu&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()},</span></div><div class='line' id='LC597'><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousemove&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="o">-</span><span class="nx">o</span><span class="p">)</span><span class="o">/</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="o">-</span><span class="nx">q</span><span class="p">)</span><span class="o">/</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">},</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">button</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nx">j</span><span class="o">=-</span><span class="mi">1</span><span class="p">}},</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mouseup&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">button</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">}},</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">){</span><span class="k">case</span> <span class="mi">38</span><span class="o">:</span><span class="k">case</span> <span class="mi">87</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span></div><div class='line' id='LC598'><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">37</span><span class="o">:</span><span class="k">case</span> <span class="mi">65</span><span class="o">:</span><span class="nx">l</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">40</span><span class="o">:</span><span class="k">case</span> <span class="mi">83</span><span class="o">:</span><span class="nx">j</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">39</span><span class="o">:</span><span class="k">case</span> <span class="mi">68</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">81</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">69</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">h</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">82</span><span class="o">:</span><span class="nx">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">70</span><span class="o">:</span><span class="nx">k</span><span class="o">=-</span><span class="mi">1</span><span class="p">}},</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keyup&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">){</span><span class="k">case</span> <span class="mi">38</span><span class="o">:</span><span class="k">case</span> <span class="mi">87</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">37</span><span class="o">:</span><span class="k">case</span> <span class="mi">65</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">40</span><span class="o">:</span><span class="k">case</span> <span class="mi">83</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">39</span><span class="o">:</span><span class="k">case</span> <span class="mi">68</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">81</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">69</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">82</span><span class="o">:</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">70</span><span class="o">:</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">}},</span><span class="kc">false</span><span class="p">)};</span></div><div class='line' id='LC599'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TrackballControls</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventTarget</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nb">document</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">enabled</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">screen</span><span class="o">=</span><span class="p">{</span><span class="nx">width</span><span class="o">:</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span><span class="nx">height</span><span class="o">:</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span><span class="nx">offsetLeft</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">offsetTop</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">screen</span><span class="p">.</span><span class="nx">width</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">screen</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotateSpeed</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">zoomSpeed</span><span class="o">=</span><span class="mf">1.2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">panSpeed</span><span class="o">=</span><span class="mf">0.3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">staticMoving</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">noPan</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">noZoom</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">noRotate</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">dynamicDampingFactor</span><span class="o">=</span><span class="mf">0.2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">minDistance</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxDistance</span><span class="o">=</span><span class="kc">Infinity</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">keys</span><span class="o">=</span><span class="p">[</span><span class="mi">65</span><span class="p">,</span><span class="mi">83</span><span class="p">,</span><span class="mi">68</span><span class="p">];</span></div><div class='line' id='LC600'><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">f</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;change&quot;</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">handleEvent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">]</span><span class="o">==</span><span class="s2">&quot;function&quot;</span><span class="p">)</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">](</span><span class="nx">a</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">getMouseOnScreen</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">a</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">screen</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">screen</span><span class="p">.</span><span class="nx">offsetTop</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="mf">0.5</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">getMouseProjectionOnBall</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">((</span><span class="nx">a</span><span class="o">-</span></div><div class='line' id='LC601'><span class="nx">c</span><span class="p">.</span><span class="nx">screen</span><span class="p">.</span><span class="nx">width</span><span class="o">*</span><span class="mf">0.5</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">screen</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">radius</span><span class="p">,(</span><span class="nx">c</span><span class="p">.</span><span class="nx">screen</span><span class="p">.</span><span class="nx">height</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">screen</span><span class="p">.</span><span class="nx">offsetTop</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">).</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">crossSelf</span><span class="p">(</span><span class="nx">g</span><span class="p">).</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">));</span><span class="nx">e</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="p">));</span><span class="k">return</span> <span class="nx">e</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">rotateCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="o">/</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">/</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">cross</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">).</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotateSpeed</span><span class="p">;</span></div><div class='line' id='LC602'><span class="nx">d</span><span class="p">.</span><span class="nx">setFromAxisAngle</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">up</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">staticMoving</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">setFromAxisAngle</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">dynamicDampingFactor</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">h</span><span class="p">)}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">zoomCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">zoomSpeed</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">g</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">staticMoving</span><span class="o">?</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">dynamicDampingFactor</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">panCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">()){</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">panSpeed</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">crossSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">up</span><span class="p">).</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span></div><div class='line' id='LC603'><span class="nx">b</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">));</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">staticMoving</span><span class="o">?</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="o">:</span><span class="nx">p</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">dynamicDampingFactor</span><span class="p">))}};</span><span class="k">this</span><span class="p">.</span><span class="nx">checkDistances</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noZoom</span><span class="o">||!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noPan</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">()</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxDistance</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxDistance</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxDistance</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">()</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">minDistance</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">minDistance</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">minDistance</span><span class="p">))}};</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">g</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">).</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span></div><div class='line' id='LC604'><span class="nx">c</span><span class="p">.</span><span class="nx">noRotate</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotateCamera</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">noZoom</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">zoomCamera</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">noPan</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">panCamera</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">checkDistances</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">position</span><span class="p">)}};</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;contextmenu&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()},</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousemove&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">enabled</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseProjectionOnBall</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseOnScreen</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span></div><div class='line' id='LC605'><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseOnScreen</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="nx">f</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noRotate</span><span class="o">?</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseProjectionOnBall</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="o">===</span><span class="mi">1</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noZoom</span><span class="o">?</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseOnScreen</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="o">===</span><span class="mi">2</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noPan</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseOnScreen</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">)))}},</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">enabled</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">===-</span><span class="mi">1</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">button</span><span class="p">;</span><span class="nx">f</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noRotate</span><span class="o">?</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseProjectionOnBall</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="o">===</span><span class="mi">1</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noZoom</span><span class="o">?</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseOnScreen</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span></div><div class='line' id='LC606'><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">noPan</span><span class="o">||</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getMouseOnScreen</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">clientY</span><span class="p">))}}},</span><span class="kc">false</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;mouseup&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">enabled</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span><span class="nx">f</span><span class="o">=-</span><span class="mi">1</span><span class="p">}},</span><span class="kc">false</span><span class="p">);</span><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">enabled</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">===-</span><span class="mi">1</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noRotate</span><span class="o">?</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noZoom</span><span class="o">?</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">noPan</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">2</span><span class="p">);</span><span class="nx">f</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="kc">true</span><span class="p">)}},</span><span class="kc">false</span><span class="p">);</span><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;keyup&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">c</span><span class="p">.</span><span class="nx">enabled</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">!==-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=-</span><span class="mi">1</span><span class="p">)},</span><span class="kc">false</span><span class="p">)};</span></div><div class='line' id='LC607'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;x&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">===</span><span class="s2">&quot;y&quot;</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;y&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">===</span><span class="s2">&quot;x&quot;</span><span class="p">)</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;z&quot;</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;x&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">===</span><span class="s2">&quot;z&quot;</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;z&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">===</span><span class="s2">&quot;x&quot;</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;y&quot;</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">f</span><span class="o">||</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;z&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">===</span><span class="s2">&quot;y&quot;</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;y&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">===</span><span class="s2">&quot;z&quot;</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;x&quot;</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">f</span><span class="o">||</span><span class="mi">1</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">o</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="nx">p</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">j</span><span class="o">/</span><span class="nx">o</span><span class="p">,</span><span class="nx">Y</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">Y</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">u</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">F</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">j</span><span class="o">*</span><span class="nx">y</span><span class="o">-</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">*</span><span class="nx">C</span><span class="o">-</span><span class="nx">r</span><span class="p">)</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">F</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">o</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span></div><div class='line' id='LC608'><span class="nx">i</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">t</span><span class="p">,</span><span class="nx">j</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">t</span><span class="p">,</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">t</span><span class="p">,</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">t</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">Y</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">Y</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">Y</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">Y</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">Y</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">j</span><span class="o">/</span><span class="nx">p</span><span class="p">,</span><span class="nx">h</span><span class="o">/</span><span class="nx">o</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">j</span><span class="o">/</span><span class="nx">p</span><span class="p">,(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">o</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">p</span><span class="p">,(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">o</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">p</span><span class="p">,</span><span class="nx">h</span><span class="o">/</span><span class="nx">o</span><span class="p">)])}}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">materials</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">materials</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">o</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="mi">5</span><span class="p">}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">materials</span><span class="o">=</span></div><div class='line' id='LC609'><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="o">=</span><span class="p">{</span><span class="nx">px</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">nx</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">py</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">ny</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">pz</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">nz</span><span class="o">:</span><span class="kc">true</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">!=</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">y</span> <span class="k">in</span> <span class="nx">h</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">y</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">.</span><span class="nx">px</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">.</span><span class="nx">nx</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="nx">k</span><span class="p">,</span><span class="nx">r</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">.</span><span class="nx">py</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">.</span><span class="nx">ny</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="o">-</span><span class="nx">p</span><span class="p">,</span><span class="nx">u</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">.</span><span class="nx">pz</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">sides</span><span class="p">.</span><span class="nx">nz</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">mergeVertices</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span></div><div class='line' id='LC610'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">;</span></div><div class='line' id='LC611'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">20</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">20</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">100</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">8</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;=</span><span class="nx">e</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="p">[],</span><span class="nx">m</span><span class="o">=</span><span class="p">[],</span><span class="nx">o</span><span class="o">=</span><span class="nx">j</span><span class="o">/</span><span class="nx">e</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;=</span><span class="nx">d</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">q</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">n</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="nx">o</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">g</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">q</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">n</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">))}</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="mi">0</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">h</span><span class="p">]].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span></div><div class='line' id='LC612'><span class="mi">1</span><span class="p">]].</span><span class="nx">clone</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="nx">p</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="p">]].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">]].</span><span class="nx">clone</span><span class="p">()}</span><span class="nx">p</span><span class="p">.</span><span class="nx">setY</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">m</span><span class="p">.</span><span class="nx">setY</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">u</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">t</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">y</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">s</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">w</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">H</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">E</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">z</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,[</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">E</span><span class="p">,</span><span class="nx">z</span><span class="p">])}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC613'><span class="nx">g</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">h</span><span class="p">];</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">y</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">w</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">H</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">E</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">u</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,[</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">E</span><span class="p">])}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nx">g</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">y</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span></div><div class='line' id='LC614'><span class="nx">w</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">H</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">E</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">u</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,[</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">E</span><span class="p">])}}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">;</span></div><div class='line' id='LC615'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">!==</span><span class="s2">&quot;undefined&quot;</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shapebb</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">getBoundingBox</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">addShapeList</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">()}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addShapeList</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">addShape</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">b</span><span class="p">)};</span></div><div class='line' id='LC616'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addShape</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">||</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;die&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v1</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v2</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v3</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v4</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v5</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v6</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="o">-</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span></div><div class='line' id='LC617'><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">h</span><span class="p">).</span><span class="nx">dot</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Either infinite or no solutions!&quot;</span><span class="p">);</span><span class="nx">g</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Its finite solutions.&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Too bad, no solutions.&quot;</span><span class="p">)}</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">/</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">a</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)}</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">g</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">h</span><span class="p">).</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">clone</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">F</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">--</span><span class="nx">F</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;){</span><span class="nx">e</span><span class="o">=</span><span class="nx">F</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">F</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span></div><div class='line' id='LC618'><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">U</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">U</span><span class="o">*</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">J</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">J</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="nx">J</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">J</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">t</span><span class="p">));</span><span class="nx">l</span><span class="o">=</span><span class="nx">O</span><span class="p">.</span><span class="nx">generateSideWallUV</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="nx">A</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">)}}}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">A</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">J</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">J</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">J</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">u</span><span class="p">));</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="o">?</span><span class="nx">O</span><span class="p">.</span><span class="nx">generateBottomUV</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">O</span><span class="p">.</span><span class="nx">generateTopUV</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">A</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span></div><div class='line' id='LC619'><span class="nx">b</span><span class="p">.</span><span class="nx">amount</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">amount</span><span class="o">:</span><span class="mi">100</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelThickness</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelThickness</span><span class="o">:</span><span class="mi">6</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSize</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSize</span><span class="o">:</span><span class="nx">j</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSegments</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSegments</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelEnabled</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelEnabled</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">steps</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">steps</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">bendPath</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">extrudePath</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">extrudeMaterial</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">r</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">FrenetFrames</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="kc">false</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">w</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">p</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">=</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">E</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="k">this</span><span class="p">,</span></div><div class='line' id='LC620'><span class="nx">J</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">o</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">addWrapPath</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">extractPoints</span><span class="p">(),</span><span class="nx">o</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">shape</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">holes</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="o">=!</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">o</span><span class="p">)){</span><span class="nx">o</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">reverse</span><span class="p">();</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="nx">K</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">E</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">K</span><span class="p">[</span><span class="nx">z</span><span class="p">]</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">reverse</span><span class="p">())}</span><span class="nx">q</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="kd">var</span> <span class="nx">R</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">triangulateShape</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">K</span><span class="p">),</span><span class="nx">P</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="nx">K</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">o</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">E</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">U</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">Y</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="p">[],</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">G</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">D</span><span class="o">=</span><span class="nx">G</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="nx">F</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">G</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">,</span><span class="nx">D</span><span class="o">++</span><span class="p">,</span><span class="nx">M</span><span class="o">++</span><span class="p">){</span><span class="nx">D</span><span class="o">===</span><span class="nx">G</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">M</span><span class="o">===</span><span class="nx">G</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">q</span><span class="p">[</span><span class="nx">F</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">P</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">P</span><span class="p">[</span><span class="nx">D</span><span class="p">],</span><span class="nx">P</span><span class="p">[</span><span class="nx">M</span><span class="p">])}</span><span class="kd">var</span> <span class="nx">ea</span><span class="o">=</span><span class="p">[],</span><span class="nx">fa</span><span class="p">,</span><span class="nx">ia</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">concat</span><span class="p">();</span></div><div class='line' id='LC621'><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="nx">K</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">fa</span><span class="o">=</span><span class="p">[];</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">G</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">D</span><span class="o">=</span><span class="nx">G</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="nx">F</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">G</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">,</span><span class="nx">D</span><span class="o">++</span><span class="p">,</span><span class="nx">M</span><span class="o">++</span><span class="p">){</span><span class="nx">D</span><span class="o">===</span><span class="nx">G</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">M</span><span class="o">===</span><span class="nx">G</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">fa</span><span class="p">[</span><span class="nx">F</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">E</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">E</span><span class="p">[</span><span class="nx">D</span><span class="p">],</span><span class="nx">E</span><span class="p">[</span><span class="nx">M</span><span class="p">])}</span><span class="nx">ea</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fa</span><span class="p">);</span><span class="nx">ia</span><span class="o">=</span><span class="nx">ia</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">fa</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">D</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">D</span><span class="o">++</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">D</span><span class="o">/</span><span class="nx">k</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">G</span><span class="p">);</span><span class="nx">M</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">G</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">G</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">G</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">T</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">P</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">q</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">M</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="o">-</span><span class="nx">i</span><span class="p">)}</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="nx">K</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">fa</span><span class="o">=</span><span class="nx">ea</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">G</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">G</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">T</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">E</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">fa</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">M</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="o">-</span><span class="nx">i</span><span class="p">)}}}</span><span class="nx">M</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">U</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">T</span><span class="o">=</span><span class="nx">p</span><span class="o">?</span><span class="nx">c</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">ia</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">M</span><span class="p">)</span><span class="o">:</span><span class="nx">o</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="nx">w</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">normals</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">binormals</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span></div><div class='line' id='LC622'><span class="nx">H</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">z</span><span class="p">)}</span><span class="k">else</span> <span class="nx">f</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">G</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">G</span><span class="o">&lt;=</span><span class="nx">m</span><span class="p">;</span><span class="nx">G</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">U</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">T</span><span class="o">=</span><span class="nx">p</span><span class="o">?</span><span class="nx">c</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">ia</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">M</span><span class="p">)</span><span class="o">:</span><span class="nx">o</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="nx">w</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">normals</span><span class="p">[</span><span class="nx">G</span><span class="p">]).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">binormals</span><span class="p">[</span><span class="nx">G</span><span class="p">]).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">H</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">G</span><span class="p">]).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">z</span><span class="p">)}</span><span class="k">else</span> <span class="nx">f</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">/</span><span class="nx">m</span><span class="o">*</span><span class="nx">G</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">k</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">D</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="nx">D</span><span class="o">--</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">D</span><span class="o">/</span><span class="nx">k</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">G</span><span class="p">);</span><span class="nx">M</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">G</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">G</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">G</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">T</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">P</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">q</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">M</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">i</span><span class="p">)}</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="nx">K</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">fa</span><span class="o">=</span><span class="nx">ea</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">G</span><span class="o">=</span><span class="nx">E</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">G</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">T</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">E</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">fa</span><span class="p">[</span><span class="nx">F</span><span class="p">],</span><span class="nx">M</span><span class="p">);</span></div><div class='line' id='LC623'><span class="nx">r</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">n</span><span class="p">[</span><span class="nx">m</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">m</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">T</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">+</span><span class="nx">i</span><span class="p">)}}}</span><span class="kd">var</span> <span class="nx">O</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">WorldUVGenerator</span><span class="p">;(</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">U</span><span class="o">*</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">Y</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">C</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="nx">g</span><span class="p">(</span><span class="nx">C</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">C</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">C</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="kc">true</span><span class="p">)}</span><span class="nx">a</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="nx">k</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">U</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">Y</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">C</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="nx">g</span><span class="p">(</span><span class="nx">C</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">C</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">C</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="kc">false</span><span class="p">)}}</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">Y</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">C</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="nx">g</span><span class="p">(</span><span class="nx">C</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">C</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">C</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="kc">true</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">F</span><span class="o">&lt;</span><span class="nx">Y</span><span class="p">;</span><span class="nx">F</span><span class="o">++</span><span class="p">){</span><span class="nx">C</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="nx">g</span><span class="p">(</span><span class="nx">C</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">U</span><span class="o">*</span><span class="nx">m</span><span class="p">,</span><span class="nx">C</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">U</span><span class="o">*</span><span class="nx">m</span><span class="p">,</span><span class="nx">C</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">U</span><span class="o">*</span><span class="nx">m</span><span class="p">,</span><span class="kc">false</span><span class="p">)}}})();(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">(</span><span class="nx">P</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">P</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="nx">K</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">e</span><span class="p">(</span><span class="nx">E</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">E</span><span class="p">.</span><span class="nx">length</span><span class="p">}})()};</span></div><div class='line' id='LC624'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">WorldUVGenerator</span><span class="o">=</span><span class="p">{</span><span class="nx">generateTopUV</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">x</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">x</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">y</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">f</span><span class="p">)]},</span><span class="nx">generateBottomUV</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">generateTopUV</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)},</span><span class="nx">generateSideWallUV</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span></div><div class='line' id='LC625'><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">j</span><span class="p">)</span><span class="o">&lt;</span><span class="mf">0.01</span><span class="o">?</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">a</span><span class="p">)]</span><span class="o">:</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">a</span><span class="p">)]}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v3</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v4</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v5</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span></div><div class='line' id='LC626'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v6</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span></div><div class='line' id='LC627'><span class="nx">THREE</span><span class="p">.</span><span class="nx">LatheGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">12</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">).</span><span class="nx">makeRotationZ</span><span class="p">(</span><span class="nx">c</span><span class="o">/</span><span class="nx">b</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">])}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">clone</span><span class="p">());</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">])}</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">c</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">d</span><span class="p">,(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">d</span><span class="p">,(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">e</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">c</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">/</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span></div><div class='line' id='LC628'><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">/</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">,(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">c</span><span class="o">/</span><span class="nx">b</span><span class="p">,(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">e</span><span class="p">)])}}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LatheGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LatheGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LatheGeometry</span><span class="p">;</span></div><div class='line' id='LC629'><span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">j</span><span class="o">-</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">f</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="o">/</span><span class="nx">d</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="nx">c</span><span class="p">,(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span></div><div class='line' id='LC630'><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">,(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="o">/</span><span class="nx">d</span><span class="p">)])}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">;</span></div><div class='line' id='LC631'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">50</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="mi">8</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="mi">6</span><span class="p">),</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="p">[],</span><span class="nx">m</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">j</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">x</span><span class="o">=-</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">o</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">g</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">g</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">o</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">g</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span></div><div class='line' id='LC632'><span class="nx">q</span><span class="p">))}</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">q</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">r</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">u</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">t</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">y</span><span class="p">)</span><span class="o">==</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,[</span><span class="nx">p</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">n</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">])}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">)</span><span class="o">==</span></div><div class='line' id='LC633'><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,[</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">])}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,[</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">])}}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="p">{</span><span class="nx">radius</span><span class="o">:</span><span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">;</span></div><div class='line' id='LC634'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TextPath</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)).</span><span class="nx">toShapes</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">amount</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">:</span><span class="mi">50</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelThickness</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelThickness</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSize</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSize</span><span class="o">=</span><span class="mi">8</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelEnabled</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelEnabled</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">bend</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">getBoundingBox</span><span class="p">().</span><span class="nx">maxX</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">bendPath</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">120</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">))}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">;</span></div><div class='line' id='LC635'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextGeometry</span><span class="p">;</span></div><div class='line' id='LC636'><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">faces</span><span class="o">:</span><span class="p">{},</span><span class="nx">face</span><span class="o">:</span><span class="s2">&quot;helvetiker&quot;</span><span class="p">,</span><span class="nx">weight</span><span class="o">:</span><span class="s2">&quot;normal&quot;</span><span class="p">,</span><span class="nx">style</span><span class="o">:</span><span class="s2">&quot;normal&quot;</span><span class="p">,</span><span class="nx">size</span><span class="o">:</span><span class="mi">150</span><span class="p">,</span><span class="nx">divisions</span><span class="o">:</span><span class="mi">10</span><span class="p">,</span><span class="nx">getFace</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">face</span><span class="p">][</span><span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">][</span><span class="k">this</span><span class="p">.</span><span class="nx">style</span><span class="p">]},</span><span class="nx">loadFace</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">familyName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontWeight</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontWeight</span><span class="p">]</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontWeight</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontStyle</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontWeight</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontStyle</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">drawText</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getFace</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">/</span><span class="nx">b</span><span class="p">.</span><span class="nx">resolution</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span></div><div class='line' id='LC637'><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">extractGlyphPoints</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">h</span><span class="p">.</span><span class="nx">offset</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">path</span><span class="p">)}</span><span class="k">return</span><span class="p">{</span><span class="nx">paths</span><span class="o">:</span><span class="nx">g</span><span class="p">,</span><span class="nx">offset</span><span class="o">:</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="p">}},</span><span class="nx">extractGlyphPoints</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">glyphs</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">glyphs</span><span class="p">[</span><span class="s2">&quot;?&quot;</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">o</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">_cachedOutline</span><span class="o">||</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">_cachedOutline</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">o</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">));</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;){</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">];</span><span class="k">switch</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;m&quot;</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">));</span><span class="nx">e</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;l&quot;</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span></div><div class='line' id='LC638'><span class="nx">k</span><span class="p">));</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;q&quot;</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">quadraticCurveTo</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span><span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">divisions</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;=</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">g</span><span class="o">/</span><span class="nx">h</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">j</span><span class="p">),</span><span class="nx">t</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="nx">t</span><span class="p">))}}</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;b&quot;</span><span class="o">:</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*-</span><span class="nx">c</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*-</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">bezierCurveTo</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span><span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">divisions</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;=</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">g</span><span class="o">/</span><span class="nx">h</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span></div><div class='line' id='LC639'><span class="nx">n</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="nx">t</span><span class="p">))}}}}}</span><span class="k">return</span><span class="p">{</span><span class="nx">offset</span><span class="o">:</span><span class="nx">u</span><span class="p">.</span><span class="nx">ha</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">points</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">path</span><span class="o">:</span><span class="nx">e</span><span class="p">}}}};</span></div><div class='line' id='LC640'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="o">*</span><span class="mf">0.5</span><span class="p">};</span><span class="nx">a</span><span class="p">.</span><span class="nx">Triangulate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">l</span><span class="p">;</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">;){</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">--&lt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Warning, unable to triangulate polygon!&quot;</span><span class="p">);</span><span class="k">break</span><span class="p">}</span><span class="nx">j</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">m</span><span class="p">;</span><span class="nx">a</span><span class="o">:</span><span class="p">{</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC641'><span class="nx">E</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">u</span><span class="p">[</span><span class="nx">o</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">u</span><span class="p">[</span><span class="nx">o</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">u</span><span class="p">[</span><span class="nx">q</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">u</span><span class="p">[</span><span class="nx">q</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">]].</span><span class="nx">y</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">10</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">w</span><span class="o">-</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">z</span><span class="o">-</span><span class="nx">s</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nx">H</span><span class="o">-</span><span class="nx">s</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">E</span><span class="o">-</span><span class="nx">y</span><span class="p">))</span><span class="nx">m</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">t</span><span class="o">==</span><span class="nx">o</span><span class="o">||</span><span class="nx">t</span><span class="o">==</span><span class="nx">q</span><span class="o">||</span><span class="nx">t</span><span class="o">==</span><span class="nx">n</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">v</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">u</span><span class="p">[</span><span class="nx">t</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">u</span><span class="p">[</span><span class="nx">t</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">T</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">U</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Y</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">R</span><span class="o">=</span><span class="nx">D</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">E</span><span class="o">-</span><span class="nx">w</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="nx">z</span><span class="o">-</span><span class="nx">H</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="nx">y</span><span class="o">-</span><span class="nx">E</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="nx">s</span><span class="o">-</span><span class="nx">z</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="nx">w</span><span class="o">-</span><span class="nx">y</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="nx">H</span><span class="o">-</span><span class="nx">s</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="nx">v</span><span class="o">-</span><span class="nx">y</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">A</span><span class="o">-</span><span class="nx">s</span><span class="p">,</span><span class="nx">T</span><span class="o">=</span><span class="nx">v</span><span class="o">-</span><span class="nx">w</span><span class="p">,</span><span class="nx">U</span><span class="o">=</span><span class="nx">A</span><span class="o">-</span><span class="nx">H</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">v</span><span class="o">-</span><span class="nx">E</span><span class="p">,</span><span class="nx">Y</span><span class="o">=</span><span class="nx">A</span><span class="o">-</span><span class="nx">z</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">J</span><span class="o">*</span><span class="nx">U</span><span class="o">-</span><span class="nx">K</span><span class="o">*</span><span class="nx">T</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="nx">D</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">M</span><span class="o">*</span><span class="nx">G</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="nx">R</span><span class="o">*</span><span class="nx">Y</span><span class="o">-</span><span class="nx">P</span><span class="o">*</span><span class="nx">C</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">J</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">R</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">break</span> <span class="nx">a</span><span class="p">}}</span><span class="nx">m</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">[</span><span class="nx">j</span><span class="p">]],</span></div><div class='line' id='LC642'><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="p">]],</span><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">[</span><span class="nx">k</span><span class="p">]]]);</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">g</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="nx">k</span><span class="p">]]);</span><span class="nx">j</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">,</span><span class="nx">k</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="nx">e</span><span class="o">--</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="p">}}</span><span class="k">return</span> <span class="nx">d</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span><span class="nx">f</span><span class="p">};</span><span class="nx">a</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">})(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">);</span><span class="nx">self</span><span class="p">.</span><span class="nx">_typeface_js</span><span class="o">=</span><span class="p">{</span><span class="nx">faces</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">loadFace</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">loadFace</span><span class="p">};</span></div><div class='line' id='LC643'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">100</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">40</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">6</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">arc</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">arc</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">g</span><span class="p">))</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">g</span><span class="p">))</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span></div><div class='line' id='LC644'><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">d</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">subSelf</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">normalize</span><span class="p">())}</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,[</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">h</span><span class="p">]]);</span><span class="nx">j</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]);</span><span class="nx">j</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="nx">j</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">]);</span><span class="nx">j</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">h</span><span class="p">]);</span><span class="nx">j</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span></div><div class='line' id='LC645'><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">()])}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="p">;</span></div><div class='line' id='LC646'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusKnotGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">/</span><span class="nx">d</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">200</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">40</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">64</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="o">||</span><span class="mi">3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightScale</span><span class="o">=</span><span class="nx">g</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">;</span><span class="o">++</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC647'><span class="nb">Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="o">*</span><span class="mi">2</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="o">*</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">q</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">heightScale</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">q</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">heightScale</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">j</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="p">(</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="p">(</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="p">))</span><span class="o">-</span><span class="mi">1</span><span class="p">}}</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span></div><div class='line' id='LC648'><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">;</span><span class="o">++</span><span class="nx">a</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">b</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">b</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">f</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">f</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">,</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">,</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">,(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">,(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">])}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span></div><div class='line' id='LC649'><span class="k">this</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusKnotGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusKnotGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusKnotGeometry</span><span class="p">;</span></div><div class='line' id='LC650'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">64</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">closed</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">debug</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">FrenetFrames</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">tangents</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">normals</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">binormals</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tangents</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normals</span><span class="o">=</span><span class="nx">o</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">binormals</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPointAt</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">debug</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">debug</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span></div><div class='line' id='LC651'><span class="nx">k</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">255</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">debug</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">16711680</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">debug</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">65280</span><span class="p">))}</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="o">*</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="nx">l</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="p">(</span><span class="nx">l</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">l</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="p">(</span><span class="nx">l</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="p">))</span><span class="o">-</span><span class="mi">1</span><span class="p">}}</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="o">:</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="p">;</span></div><div class='line' id='LC652'><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">d</span><span class="p">];</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">f</span><span class="p">][</span><span class="nx">d</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">f</span><span class="p">][</span><span class="nx">p</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">p</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,</span><span class="nx">d</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,</span><span class="nx">d</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,(</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segmentsRadius</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">p</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">g</span><span class="p">])}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span></div><div class='line' id='LC653'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">;</span></div><div class='line' id='LC654'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">FrenetFrames</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tangents</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normals</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">binormals</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">l</span><span class="o">/</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getTangentAt</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">normalize</span><span class="p">()}</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nb">Number</span><span class="p">.</span><span class="nx">MAX_VALUE</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">z</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="nx">p</span><span class="o">&lt;=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span></div><div class='line' id='LC655'><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">cross</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">h</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">cross</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">h</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">&gt;</span><span class="mf">1.0</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">){</span><span class="nx">h</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">dot</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">]));</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeRotationAxis</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="p">).</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">l</span><span class="p">])}</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">cross</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">l</span><span class="p">])}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">dot</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">]));</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">/</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">dot</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=-</span><span class="nx">d</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">makeRotationAxis</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">d</span><span class="o">*</span><span class="nx">l</span><span class="p">).</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">l</span><span class="p">]);</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">cross</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">l</span><span class="p">])}}};</span></div><div class='line' id='LC656'><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalize</span><span class="p">().</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">))</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">+</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">b</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">c</span><span class="p">.</span><span class="nx">clone</span><span class="p">()]);</span><span class="nx">d</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">divideScalar</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">j</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span></div><div class='line' id='LC657'><span class="nx">j</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">h</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">h</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)])}</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">p</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">p</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">][</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="p">];</span><span class="nx">c</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">][</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">).</span><span class="nx">divideScalar</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">u</span><span class="o">===</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">u</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">v</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">c</span><span class="o">/</span><span class="mi">2</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">v</span><span class="p">));</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span></div><div class='line' id='LC658'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">l</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="nx">l</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="nx">l</span><span class="p">][</span><span class="mi">2</span><span class="p">]));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">l</span><span class="p">][</span><span class="mi">0</span><span class="p">]],</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">l</span><span class="p">][</span><span class="mi">1</span><span class="p">]],</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">l</span><span class="p">][</span><span class="mi">2</span><span class="p">]],</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">mergeVertices</span><span class="p">();</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="p">{</span><span class="nx">radius</span><span class="o">:</span><span class="nx">c</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">;</span></div><div class='line' id='LC659'><span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,[[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">],[</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]],[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">10</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">11</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">10</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">11</span><span class="p">],[</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">],[</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">9</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">]],</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="p">;</span></div><div class='line' id='LC660'><span class="nx">THREE</span><span class="p">.</span><span class="nx">OctahedronGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]],[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">]],</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OctahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OctahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OctahedronGeometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TetrahedronGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]],[[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]],</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span></div><div class='line' id='LC661'><span class="nx">THREE</span><span class="p">.</span><span class="nx">TetrahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TetrahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TetrahedronGeometry</span><span class="p">;</span></div><div class='line' id='LC662'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParametricGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="kc">false</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="nx">c</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">/</span><span class="nx">b</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">)}}</span><span class="kd">var</span> <span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">j</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">j</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">h</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="o">/</span><span class="nx">c</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">(</span><span class="nx">h</span><span class="o">/</span><span class="nx">b</span><span class="p">,(</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="o">/</span><span class="nx">c</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">((</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">,(</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">k</span><span class="p">));</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">));</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">m</span><span class="p">,</span></div><div class='line' id='LC663'><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">]);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">o</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">q</span><span class="p">])}</span><span class="k">else</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">));</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">])}}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParametricGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParametricGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParametricGeometry</span><span class="p">;</span></div><div class='line' id='LC664'><span class="nx">THREE</span><span class="p">.</span><span class="nx">AxisHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16711680</span><span class="p">}));</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16711680</span><span class="p">}));</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">65280</span><span class="p">}));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span></div><div class='line' id='LC665'><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">65280</span><span class="p">}));</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">255</span><span class="p">}));</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">255</span><span class="p">}));</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AxisHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AxisHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AxisHelper</span><span class="p">;</span></div><div class='line' id='LC666'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">d</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">16776960</span><span class="p">);</span><span class="nx">c</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">20</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">d</span><span class="p">}));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.25</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">d</span><span class="p">}));</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span></div><div class='line' id='LC667'><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setDirection</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">c</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setDirection</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)).</span><span class="nx">crossSelf</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)).</span><span class="nx">dot</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">()));</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">).</span><span class="nx">makeRotationAxis</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">getRotationFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">)};</span></div><div class='line' id='LC668'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setColor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></div><div class='line' id='LC669'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">lineGeometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">lineGeometry</span><span class="p">.</span><span class="nx">colors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span><span class="nx">d</span><span class="p">.</span><span class="nx">pointMap</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">pointMap</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">d</span><span class="p">.</span><span class="nx">pointMap</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">lineGeometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lineGeometry</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lineMaterial</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16777215</span><span class="p">,</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">pointMap</span><span class="o">=</span><span class="p">{};</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span></div><div class='line' id='LC670'><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;f1&quot;</span><span class="p">,</span><span class="s2">&quot;f2&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;f2&quot;</span><span class="p">,</span><span class="s2">&quot;f4&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;f4&quot;</span><span class="p">,</span><span class="s2">&quot;f3&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;f3&quot;</span><span class="p">,</span><span class="s2">&quot;f1&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="s2">&quot;f1&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="s2">&quot;f2&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="s2">&quot;f3&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="s2">&quot;f4&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="mi">16711680</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="mi">16711680</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="mi">16711680</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="mi">16711680</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;u1&quot;</span><span class="p">,</span><span class="s2">&quot;u2&quot;</span><span class="p">,</span><span class="mi">43775</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;u2&quot;</span><span class="p">,</span><span class="s2">&quot;u3&quot;</span><span class="p">,</span><span class="mi">43775</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;u3&quot;</span><span class="p">,</span><span class="s2">&quot;u1&quot;</span><span class="p">,</span><span class="mi">43775</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="mi">16777215</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;cn1&quot;</span><span class="p">,</span><span class="s2">&quot;cn2&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;cn3&quot;</span><span class="p">,</span><span class="s2">&quot;cn4&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;cf1&quot;</span><span class="p">,</span><span class="s2">&quot;cf2&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;cf3&quot;</span><span class="p">,</span><span class="s2">&quot;cf4&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">camera</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></div><div class='line' id='LC671'><span class="k">this</span><span class="p">.</span><span class="nx">lines</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lineGeometry</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lineMaterial</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lines</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">;</span></div><div class='line' id='LC672'><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__v</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__projector</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__v</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__c</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">pointMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">lineGeometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__v</span><span class="p">)}}</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__c</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;f1&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span></div><div class='line' id='LC673'><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;f2&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;f3&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;f4&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;u1&quot;</span><span class="p">,</span><span class="mf">0.7</span><span class="p">,</span><span class="mf">1.1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;u2&quot;</span><span class="p">,</span><span class="o">-</span><span class="mf">0.7</span><span class="p">,</span><span class="mf">1.1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;u3&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;cf1&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;cf2&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;cf3&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;cf4&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;cn1&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;cn2&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;cn3&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;cn4&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">lineGeometry</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__projector</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">__c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">;</span></div><div class='line' id='LC674'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubdivisionModifier</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">subdivisions</span><span class="o">=</span><span class="nx">a</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">useOldVertexColors</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">supportUVs</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">debug</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubdivisionModifier</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubdivisionModifier</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubdivisionModifier</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">modify</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">subdivisions</span><span class="p">;</span><span class="nx">b</span><span class="o">--</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">;)</span><span class="k">this</span><span class="p">.</span><span class="nx">smooth</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></div><div class='line' id='LC675'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubdivisionModifier</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">smooth</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span><span class="nx">m</span><span class="p">.</span><span class="nx">debug</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(){</span><span class="nx">console</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">useOldVertexColors</span><span class="p">){</span><span class="nx">j</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">q</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="nx">q</span><span class="o">++</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">q</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">o</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="nx">l</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">b</span><span class="p">}</span><span class="nx">l</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">r</span><span class="o">/</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">g</span><span class="o">/</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">b</span><span class="o">/</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span></div><div class='line' id='LC676'><span class="nx">j</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">q</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">}}</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">supportUVs</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="p">[</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">i</span><span class="p">)];</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">?</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">?</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">?</span><span class="nx">g</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">?</span><span class="nx">p</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;d :( &quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;c :( &quot;</span><span class="p">,</span><span class="nx">d</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;b :( &quot;</span><span class="p">,</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;a :( &quot;</span><span class="p">,</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">i</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">f</span><span class="p">){</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">y</span><span class="o">+</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;face pt&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;edge pt&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;warning, UV not found for&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="k">return</span> <span class="nx">f</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">t</span><span class="o">?</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;dup vertexNo&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;oldFaceNo&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">])</span><span class="o">:</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></div><div class='line' id='LC677'><span class="nx">b</span><span class="p">){</span><span class="nx">R</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">R</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">R</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">P</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">P</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{});</span><span class="nx">P</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="o">=</span><span class="p">[],</span><span class="nx">p</span><span class="o">=</span><span class="p">[],</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">concat</span><span class="p">(),</span><span class="nx">n</span><span class="o">=</span><span class="p">[],</span><span class="nx">r</span><span class="o">=</span><span class="p">{},</span><span class="nx">u</span><span class="o">=</span><span class="p">{},</span><span class="nx">t</span><span class="o">=</span><span class="p">{},</span><span class="nx">y</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">E</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">A</span><span class="p">;</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;originalFaces, uvs, originalVerticesLength&quot;</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">y</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">supportUVs</span><span class="p">){</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">E</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="nx">s</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="nx">H</span><span class="o">&lt;</span><span class="nx">E</span><span class="p">;</span><span class="nx">H</span><span class="o">++</span><span class="p">){</span><span class="nx">A</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="p">][</span><span class="s2">&quot;abcd&quot;</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">H</span><span class="p">)];</span><span class="nx">g</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">[</span><span class="nx">s</span><span class="p">][</span><span class="nx">H</span><span class="p">])}}}</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">supportUVs</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">z</span> <span class="k">in</span> <span class="nx">t</span><span class="p">)</span><span class="nx">s</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">){</span><span class="nx">m</span><span class="p">.</span><span class="nx">supportUVs</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;no uvs&quot;</span><span class="p">)}</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;-- Original Faces + Vertices UVs completed&quot;</span><span class="p">,</span></div><div class='line' id='LC678'><span class="nx">t</span><span class="p">,</span><span class="s2">&quot;vs&quot;</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="nx">z</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="p">];</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">supportUVs</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">u</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">v</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">v</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">v</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">/</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">z</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">u</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">v</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">v</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">v</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="nx">s</span><span class="p">).</span><span class="nx">v</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">/</span><span class="mi">4</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">/</span><span class="mi">4</span><span class="p">}</span><span class="nx">g</span><span class="p">(</span><span class="nx">y</span><span class="o">+</span><span class="nx">s</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">v</span><span class="p">)}}</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;-- added UVs for new Faces&quot;</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">w</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">h</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">h</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)}</span></div><div class='line' id='LC679'><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">{};</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">)}}</span><span class="k">return</span> <span class="nx">h</span><span class="p">}(</span><span class="nx">a</span><span class="p">);</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">J</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="p">{},</span><span class="nx">P</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span> <span class="k">in</span> <span class="nx">w</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">s</span><span class="p">];</span><span class="nx">J</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">);</span><span class="nx">K</span><span class="o">=</span><span class="nx">J</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">J</span><span class="o">=</span><span class="nx">J</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">h</span><span class="p">(</span><span class="nx">K</span><span class="p">,[</span><span class="nx">K</span><span class="p">,</span><span class="nx">J</span><span class="p">]);</span><span class="nx">h</span><span class="p">(</span><span class="nx">J</span><span class="p">,[</span><span class="nx">K</span><span class="p">,</span><span class="nx">J</span><span class="p">]);</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">E</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">H</span><span class="o">&lt;</span><span class="nx">E</span><span class="p">;</span><span class="nx">H</span><span class="o">++</span><span class="p">){</span><span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="nx">H</span><span class="p">];</span><span class="nx">j</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">j</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">s</span><span class="p">)}</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="kc">true</span><span class="p">)}</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;vertexEdgeMap&quot;</span><span class="p">,</span><span class="nx">R</span><span class="p">,</span><span class="s2">&quot;vertexFaceMap&quot;</span><span class="p">,</span><span class="nx">P</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span> <span class="k">in</span> <span class="nx">w</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span></div><div class='line' id='LC680'><span class="nx">w</span><span class="p">[</span><span class="nx">s</span><span class="p">];</span><span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">E</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">J</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">);</span><span class="nx">K</span><span class="o">=</span><span class="nx">J</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">J</span><span class="o">=</span><span class="nx">J</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">s</span><span class="p">]){</span><span class="nx">v</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">K</span><span class="p">]);</span><span class="nx">v</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">J</span><span class="p">]);</span><span class="nx">v</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">v</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">z</span><span class="p">]);</span><span class="nx">v</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">E</span><span class="p">]);</span><span class="nx">v</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">K</span><span class="p">]);</span><span class="nx">v</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">J</span><span class="p">]);</span><span class="nx">v</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.25</span><span class="p">)}</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">y</span><span class="o">+</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="nx">A</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span><span class="nx">A</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">supportUVs</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">z</span><span class="p">).</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">z</span><span class="p">).</span><span class="nx">u</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">z</span><span class="p">).</span><span class="nx">v</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">z</span><span class="p">).</span><span class="nx">v</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">g</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">],</span><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">u</span><span class="p">[</span><span class="nx">s</span><span class="p">]){</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">E</span><span class="p">).</span><span class="nx">u</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">E</span><span class="p">).</span><span class="nx">u</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">E</span><span class="p">).</span><span class="nx">v</span><span class="o">+</span><span class="nx">f</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">E</span><span class="p">).</span><span class="nx">v</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">u</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">v</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">g</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">],</span><span class="nx">E</span><span class="p">,</span><span class="nx">v</span><span class="p">)}}}</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;-- Step 2 done&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;123&quot;</span><span class="p">,</span></div><div class='line' id='LC681'><span class="s2">&quot;12&quot;</span><span class="p">,</span><span class="s2">&quot;2&quot;</span><span class="p">,</span><span class="s2">&quot;23&quot;</span><span class="p">];</span><span class="nx">J</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;123&quot;</span><span class="p">,</span><span class="s2">&quot;23&quot;</span><span class="p">,</span><span class="s2">&quot;3&quot;</span><span class="p">,</span><span class="s2">&quot;31&quot;</span><span class="p">];</span><span class="kd">var</span> <span class="nx">G</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;123&quot;</span><span class="p">,</span><span class="s2">&quot;31&quot;</span><span class="p">,</span><span class="s2">&quot;1&quot;</span><span class="p">,</span><span class="s2">&quot;12&quot;</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;1234&quot;</span><span class="p">,</span><span class="s2">&quot;12&quot;</span><span class="p">,</span><span class="s2">&quot;2&quot;</span><span class="p">,</span><span class="s2">&quot;23&quot;</span><span class="p">],</span><span class="nx">T</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;1234&quot;</span><span class="p">,</span><span class="s2">&quot;23&quot;</span><span class="p">,</span><span class="s2">&quot;3&quot;</span><span class="p">,</span><span class="s2">&quot;34&quot;</span><span class="p">],</span><span class="nx">U</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;1234&quot;</span><span class="p">,</span><span class="s2">&quot;34&quot;</span><span class="p">,</span><span class="s2">&quot;4&quot;</span><span class="p">,</span><span class="s2">&quot;41&quot;</span><span class="p">],</span><span class="nx">C</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;1234&quot;</span><span class="p">,</span><span class="s2">&quot;41&quot;</span><span class="p">,</span><span class="s2">&quot;1&quot;</span><span class="p">,</span><span class="s2">&quot;12&quot;</span><span class="p">];</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="nx">z</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">s</span><span class="p">];</span><span class="nx">v</span><span class="o">=</span><span class="nx">y</span><span class="o">+</span><span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">A</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="nx">K</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">K</span><span class="p">],</span><span class="nx">z</span><span class="p">,</span><span class="nx">E</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">K</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">D</span><span class="p">],</span><span class="nx">z</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">D</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">z</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">s</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">z</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">A</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="nx">K</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">d</span><span class="p">);</span><span class="nx">M</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">K</span><span class="p">],</span><span class="nx">z</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">K</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">D</span><span class="p">],</span><span class="nx">z</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">D</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">M</span><span class="p">],</span></div><div class='line' id='LC682'><span class="nx">z</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">s</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">M</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">r</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">s</span><span class="p">)}</span><span class="k">else</span> <span class="nx">b</span><span class="p">(</span><span class="s2">&quot;face should be a face!&quot;</span><span class="p">,</span><span class="nx">z</span><span class="p">)}</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">R</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">K</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">H</span> <span class="k">in</span> <span class="nx">P</span><span class="p">[</span><span class="nx">s</span><span class="p">]){</span><span class="nx">r</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">H</span><span class="p">]);</span><span class="nx">v</span><span class="o">++</span><span class="p">}</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">s</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">H</span><span class="o">&lt;</span><span class="nx">A</span><span class="p">;</span><span class="nx">H</span><span class="o">++</span><span class="p">)</span><span class="nx">u</span><span class="p">[</span><span class="nx">e</span><span class="p">(</span><span class="nx">R</span><span class="p">[</span><span class="nx">s</span><span class="p">][</span><span class="nx">H</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="nx">R</span><span class="p">[</span><span class="nx">s</span><span class="p">][</span><span class="nx">H</span><span class="p">][</span><span class="mi">1</span><span class="p">])]</span><span class="o">&amp;&amp;</span><span class="nx">E</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">E</span><span class="o">!=</span><span class="mi">2</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">H</span><span class="o">&lt;</span><span class="nx">A</span><span class="p">;</span><span class="nx">H</span><span class="o">++</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">s</span><span class="p">][</span><span class="nx">H</span><span class="p">];</span><span class="nx">v</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]]).</span><span class="nx">divideScalar</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="nx">z</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">v</span><span class="p">)}</span><span class="nx">z</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="nx">A</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">s</span><span class="p">]);</span><span class="nx">K</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">A</span><span class="o">-</span><span class="mi">3</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">K</span><span class="p">.</span><span class="nx">addSelf</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span></div><div class='line' id='LC683'><span class="nx">K</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="nx">A</span><span class="p">);</span><span class="nx">l</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">K</span><span class="p">}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">delete</span> <span class="nx">a</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(){}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="p">;</span></div><div class='line' id='LC684'><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">lensFlares</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">customUpdateCallback</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">!==</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">supr</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span></div><div class='line' id='LC685'><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">add</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">);</span><span class="nx">c</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">f</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">===</span><span class="k">void</span> <span class="mi">0</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">texture</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">size</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">distance</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">scale</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">rotation</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">opacity</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">color</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">blending</span><span class="o">:</span><span class="nx">d</span><span class="p">})};</span></div><div class='line' id='LC686'><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateLensFlares</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="nx">e</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">wantedRotation</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mf">0.25</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">wantedRotation</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="p">)</span><span class="o">*</span><span class="mf">0.25</span><span class="p">}};</span></div><div class='line' id='LC687'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsList</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">createAnimation</span><span class="p">(</span><span class="s2">&quot;__default&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">/</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setAnimationWeight</span><span class="p">(</span><span class="s2">&quot;__default&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">;</span></div><div class='line' id='LC688'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="nx">startFrame</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">endFrame</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">length</span><span class="o">:</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">fps</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">duration</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">lastFrame</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">currentFrame</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">active</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">time</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">direction</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">weight</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">directionBackwards</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">mirroredLoop</span><span class="o">:</span><span class="kc">false</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)};</span></div><div class='line' id='LC689'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">autoCreateAnimations</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="sr">/([a-z]+)(\d+)/</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">{},</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">name</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="kc">Infinity</span><span class="p">,</span><span class="nx">end</span><span class="o">:-</span><span class="kc">Infinity</span><span class="p">});</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">start</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">end</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">j</span><span class="p">)}}</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">d</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">createAnimation</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">firstAnimation</span><span class="o">=</span><span class="nx">c</span><span class="p">};</span></div><div class='line' id='LC690'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationDirectionForward</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">]){</span><span class="nx">a</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">false</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationDirectionBackward</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">]){</span><span class="nx">a</span><span class="p">.</span><span class="nx">direction</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">true</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationFPS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">fps</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">fps</span><span class="p">}};</span></div><div class='line' id='LC691'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationDuration</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">fps</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">duration</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationWeight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">weight</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationTime</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getAnimationTime</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span></div><div class='line' id='LC692'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getAnimationDuration</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">playAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;animation[&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;] undefined&quot;</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stopAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="nx">a</span><span class="p">.</span><span class="nx">active</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span></div><div class='line' id='LC693'><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsList</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">active</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">direction</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">direction</span><span class="o">*-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="kc">false</span><span class="p">}}}</span><span class="k">else</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="p">}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">startFrame</span><span class="o">+</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">/</span></div><div class='line' id='LC694'><span class="nx">e</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">lastFrame</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">lastFrame</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="o">=</span><span class="nx">f</span><span class="p">}</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">%</span><span class="nx">e</span><span class="o">/</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">lastFrame</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nx">g</span><span class="p">}}};</span></div><div class='line' id='LC695'><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlarePlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createProgram</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">linkProgram</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span></div><div class='line' id='LC696'><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">();</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGB</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGB</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_BYTE</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span></div><div class='line' id='LC697'><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_S</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_T</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_MAG_FILTER</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_MIN_FILTER</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_BYTE</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_S</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_T</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_MAG_FILTER</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">);</span></div><div class='line' id='LC698'><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_MIN_FILTER</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">MAX_VERTEX_TEXTURE_IMAGE_UNITS</span><span class="p">)</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderFlares</span><span class="p">.</span><span class="nx">lensFlare</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">l</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderFlares</span><span class="p">.</span><span class="nx">lensFlareVertexTexture</span><span class="p">)}</span><span class="nx">p</span><span class="o">=</span><span class="p">{};</span><span class="nx">m</span><span class="o">=</span><span class="p">{};</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertex</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;position&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">uv</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;uv&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">renderType</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;renderType&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;map&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">occlusionMap</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;occlusionMap&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;opacity&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span></div><div class='line' id='LC699'><span class="s2">&quot;color&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;scale&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;rotation&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">screenPosition</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="s2">&quot;screenPosition&quot;</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">u</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFlares</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">y</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">u</span><span class="o">/</span><span class="nx">e</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="nx">u</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="mi">16</span><span class="o">/</span><span class="nx">u</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">E</span><span class="o">*</span><span class="nx">s</span><span class="p">,</span><span class="nx">E</span><span class="p">),</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">A</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">J</span><span class="o">=</span><span class="nx">m</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">useProgram</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">o</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertex</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">uv</span><span class="p">);</span><span class="nx">o</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">occlusionMap</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span></div><div class='line' id='LC700'><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">E</span><span class="p">.</span><span class="nx">vertex</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">E</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthMask</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span><span class="kd">var</span> <span class="nx">K</span><span class="p">,</span><span class="nx">R</span><span class="p">,</span><span class="nx">P</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">M</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">K</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">K</span><span class="o">++</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">16</span><span class="o">/</span><span class="nx">u</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">E</span><span class="o">*</span><span class="nx">s</span><span class="p">,</span><span class="nx">E</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">K</span><span class="p">];</span><span class="nx">y</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">D</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">D</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">]);</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span><span class="nx">v</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">w</span><span class="o">+</span><span class="nx">w</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">H</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">||</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC701'><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">u</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">copyTexImage2D</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGB</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">renderType</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">screenPosition</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">copyTexImage2D</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">renderType</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE1</span><span class="p">);</span></div><div class='line' id='LC702'><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">customUpdateCallback</span><span class="o">?</span><span class="nx">D</span><span class="p">.</span><span class="nx">customUpdateCallback</span><span class="p">(</span><span class="nx">D</span><span class="p">)</span><span class="o">:</span><span class="nx">D</span><span class="p">.</span><span class="nx">updateLensFlares</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">renderType</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">R</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">P</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">R</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">;</span><span class="nx">R</span><span class="o">++</span><span class="p">){</span><span class="nx">M</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">[</span><span class="nx">R</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">M</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&gt;</span><span class="mf">0.0010</span><span class="o">&amp;&amp;</span><span class="nx">M</span><span class="p">.</span><span class="nx">scale</span><span class="o">&gt;</span><span class="mf">0.0010</span><span class="p">){</span><span class="nx">v</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">size</span><span class="o">*</span><span class="nx">M</span><span class="p">.</span><span class="nx">scale</span><span class="o">/</span><span class="nx">u</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">E</span><span class="o">*</span><span class="nx">s</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">E</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">screenPosition</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">rotation</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span></div><div class='line' id='LC703'><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">M</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">M</span><span class="p">.</span><span class="nx">texture</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}}}</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthMask</span><span class="p">(</span><span class="kc">true</span><span class="p">)}}};</span></div><div class='line' id='LC704'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShadowMapPlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="p">.</span><span class="nx">depthRGBA</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">f</span><span class="p">});</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">morphTargets</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span><span class="nx">c</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span></div><div class='line' id='LC705'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="p">[];</span><span class="nx">o</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapCullFrontFaces</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">FRONT</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BACK</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">__lights</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCascade</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">q</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCascadeCount</span><span class="p">;</span><span class="nx">q</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="p">[</span><span class="nx">q</span><span class="p">])</span><span class="nx">s</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="p">[</span><span class="nx">q</span><span class="p">];</span></div><div class='line' id='LC706'><span class="k">else</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">isVirtual</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowCameraLeft</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCameraLeft</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowCameraRight</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCameraRight</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowCameraBottom</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCameraBottom</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowCameraTop</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCameraTop</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowBias</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCascadeBias</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCascadeWidth</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCascadeHeight</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span></div><div class='line' id='LC707'><span class="nx">s</span><span class="p">.</span><span class="nx">pointsWorld</span><span class="o">=</span><span class="p">[];</span><span class="nx">s</span><span class="p">.</span><span class="nx">pointsFrustum</span><span class="o">=</span><span class="p">[];</span><span class="nx">u</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">pointsWorld</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">pointsFrustum</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">w</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">w</span><span class="o">&lt;</span><span class="mi">8</span><span class="p">;</span><span class="nx">w</span><span class="o">++</span><span class="p">){</span><span class="nx">u</span><span class="p">[</span><span class="nx">w</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">n</span><span class="p">[</span><span class="nx">w</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">}</span><span class="nx">u</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCascadeNearZ</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCascadeFarZ</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">u</span><span class="p">);</span><span class="nx">n</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">u</span><span class="p">);</span><span class="nx">n</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">u</span><span class="p">);</span><span class="nx">n</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">u</span><span class="p">);</span><span class="nx">n</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">n</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">n</span><span class="p">[</span><span class="mi">6</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">n</span><span class="p">[</span><span class="mi">7</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">originalCamera</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCascadeOffset</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="p">[</span><span class="nx">q</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Created virtualLight&quot;</span><span class="p">,</span><span class="nx">s</span><span class="p">)}</span><span class="nx">r</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span></div><div class='line' id='LC708'><span class="nx">q</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="p">[</span><span class="nx">u</span><span class="p">];</span><span class="nx">t</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="p">;</span><span class="nx">t</span><span class="p">.</span><span class="nx">shadowBias</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">shadowCascadeBias</span><span class="p">[</span><span class="nx">u</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">shadowCascadeNearZ</span><span class="p">[</span><span class="nx">u</span><span class="p">];</span><span class="nx">r</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">shadowCascadeFarZ</span><span class="p">[</span><span class="nx">u</span><span class="p">];</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">pointsFrustum</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="mi">6</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">t</span><span class="p">[</span><span class="mi">7</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">y</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">y</span><span class="p">[</span><span class="nx">o</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">o</span><span class="o">++</span><span class="p">}}</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">y</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMap</span><span class="p">){</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMap</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="p">,</span></div><div class='line' id='LC709'><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="p">,{</span><span class="nx">minFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">,</span><span class="nx">magFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">,</span><span class="nx">format</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="p">});</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraFov</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="o">/</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraLeft</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraRight</span><span class="p">,</span></div><div class='line' id='LC710'><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraTop</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraBottom</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Unsupported light type for shadow&quot;</span><span class="p">);</span><span class="k">continue</span><span class="p">}</span><span class="nx">j</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">autoUpdateScene</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">()}</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">&amp;&amp;!</span><span class="nx">m</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="p">){</span><span class="nx">m</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">isVirtual</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">originalCamera</span><span class="o">==</span><span class="nx">l</span><span class="p">){</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">o</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">pointsFrustum</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">pointsWorld</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">,</span><span class="kc">Infinity</span><span class="p">,</span><span class="kc">Infinity</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">,</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">,</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span></div><div class='line' id='LC711'><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="mi">8</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">){</span><span class="nx">u</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="nx">u</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">r</span><span class="p">]);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShadowMapPlugin</span><span class="p">.</span><span class="nx">__projector</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="nx">o</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">multiplyVector3</span><span class="p">(</span><span class="nx">u</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="nx">o</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()}</span><span class="nx">o</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMap</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span><span class="nx">q</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">());</span><span class="nx">q</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span></div><div class='line' id='LC712'><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="p">.</span><span class="nx">lines</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">multiplySelf</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">multiplySelf</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">q</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="p">)</span><span class="nx">q</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">q</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="p">)</span><span class="nx">q</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">flattenToArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">flattenToArray</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span></div><div class='line' id='LC713'><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span><span class="nx">t</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">o</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">m</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">)</span><span class="o">||!</span><span class="nx">n</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">n</span><span class="p">))){</span><span class="nx">n</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">o</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">m</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">render</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">buffer</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">c</span><span class="p">;</span><span class="nx">r</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="o">?</span></div><div class='line' id='LC714'><span class="nx">b</span><span class="p">.</span><span class="nx">renderBufferDirect</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderBuffer</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">n</span><span class="p">)}}</span><span class="nx">t</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">o</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">o</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">m</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">){</span><span class="nx">n</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderImmediateObject</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">n</span><span class="p">)}}}</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getClearColor</span><span class="p">();</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getClearAlpha</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">p</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapCullFrontFaces</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BACK</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShadowMapPlugin</span><span class="p">.</span><span class="nx">__projector</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="p">;</span></div><div class='line' id='LC715'><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpritePlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span></div><div class='line' id='LC716'><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderSprite</span><span class="p">.</span><span class="nx">sprite</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createProgram</span><span class="p">(),</span><span class="nx">o</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">linkProgram</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="p">{};</span><span class="nx">l</span><span class="o">=</span><span class="p">{};</span><span class="nx">j</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;position&quot;</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">uv</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;uv&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">uvOffset</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;uvOffset&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">uvScale</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span></div><div class='line' id='LC717'><span class="s2">&quot;uvScale&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;rotation&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;scale&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">alignment</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;alignment&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;color&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;map&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;opacity&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;useScreenCoordinates&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;affectedByDistance&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">screenPosition</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;screenPosition&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">modelViewMatrix</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;modelViewMatrix&quot;</span><span class="p">);</span></div><div class='line' id='LC718'><span class="nx">l</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="s2">&quot;projectionMatrix&quot;</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">q</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">__webglSprites</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">q</span><span class="o">/</span><span class="nx">o</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">o</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">q</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">useProgram</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">k</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">uv</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthMask</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span></div><div class='line' id='LC719'><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">w</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="p">[],</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">){</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">opacity</span><span class="o">!==</span><span class="mi">0</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">)</span><span class="nx">w</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="nx">w</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">w</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">w</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="nx">w</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">]}}</span><span class="nx">d</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">){</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">r</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">opacity</span><span class="o">!==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">image</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span></div><div class='line' id='LC720'><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">screenPosition</span><span class="p">,(</span><span class="nx">w</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">o</span><span class="p">)</span><span class="o">/</span><span class="nx">o</span><span class="p">,(</span><span class="nx">y</span><span class="o">-</span><span class="nx">w</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">/</span><span class="nx">y</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="p">)))}</span><span class="k">else</span><span class="p">{</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">affectedByDistance</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">modelViewMatrix</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">)}</span><span class="nx">e</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="o">/</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">?</span><span class="nx">q</span><span class="o">:</span><span class="mi">1</span><span class="p">);</span><span class="nx">H</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">w</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">H</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">w</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">alignment</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">alignment</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">alignment</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span></div><div class='line' id='LC721'><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">rotation</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2fv</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">H</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">mergeWith3D</span><span class="o">&amp;&amp;!</span><span class="nx">s</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">w</span><span class="p">.</span><span class="nx">mergeWith3D</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="kc">false</span><span class="p">}</span><span class="nx">c</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthMask</span><span class="p">(</span><span class="kc">true</span><span class="p">)}}};</span></div><div class='line' id='LC722'><span class="nx">THREE</span><span class="p">.</span><span class="nx">DepthPassPlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">enabled</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">renderTarget</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="p">.</span><span class="nx">depthRGBA</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">f</span><span class="p">});</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">morphTargets</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span><span class="nx">c</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span></div><div class='line' id='LC723'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">enabled</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">autoUpdateScene</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">h</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="p">)</span><span class="nx">h</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">flattenToArray</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">_viewMatrixArray</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">flattenToArray</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">_projectionMatrixArray</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span></div><div class='line' id='LC724'><span class="nx">h</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">renderTarget</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">)</span><span class="o">||!</span><span class="nx">m</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">m</span><span class="p">))){</span><span class="nx">m</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kc">true</span><span class="p">}}</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">render</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">buffer</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">setObjectFaces</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="o">?</span><span class="nx">m</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="o">:</span><span class="nx">m</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">c</span><span class="p">;</span><span class="nx">k</span> <span class="k">instanceof</span></div><div class='line' id='LC725'><span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderBufferDirect</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">m</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderBuffer</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">m</span><span class="p">)}}</span><span class="nx">o</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">o</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="nx">k</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">){</span><span class="nx">m</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderImmediateObject</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">m</span><span class="p">)}}</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getClearColor</span><span class="p">();</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getClearAlpha</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">)}};</span></div><div class='line' id='LC726'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderFlares</span><span class="o">=</span><span class="p">{</span><span class="nx">lensFlareVertexTexture</span><span class="o">:</span><span class="p">{</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}&quot;</span><span class="p">,</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;precision mediump float;\nuniform sampler2D map;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}&quot;</span><span class="p">},</span></div><div class='line' id='LC727'><span class="nx">lensFlare</span><span class="o">:</span><span class="p">{</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}&quot;</span><span class="p">,</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;precision mediump float;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}&quot;</span><span class="p">}};</span></div><div class='line' id='LC728'><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderSprite</span><span class="o">=</span><span class="p">{</span><span class="nx">sprite</span><span class="o">:</span><span class="p">{</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;uniform int useScreenCoordinates;\nuniform int affectedByDistance;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( affectedByDistance == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}&quot;</span><span class="p">,</span></div><div class='line' id='LC729'><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;precision mediump float;\nuniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\n}&quot;</span><span class="p">}};</span></div></pre></div>
            </td>
          </tr>
        </table>
  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" class="js-jump-to-line" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/">
      <span class="mega-octicon octicon-mark-github"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2013 <span title="1.93137s from github-fe134-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-fullscreen-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="js-fullscreen-contents" placeholder="" data-suggester="fullscreen_suggester"></textarea>
          <div class="suggester-container">
              <div class="suggester fullscreen-suggester js-navigation-container" id="fullscreen_suggester"
                 data-url="/yomotsu/threejs-examples/suggestions/commit">
              </div>
          </div>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped leftwards" title="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped leftwards"
      title="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-remove-close close ajax-error-dismiss"></a>
      Something went wrong with that request. Please try again.
    </div>

  </body>
</html>

